CREATE TABLE QA_PAR_FILES_ACTIONS
(
  DUMP_ID        NUMBER                         NOT NULL,
  ACTION_ID      NUMBER,
  ACTION_TYPE    VARCHAR2(30 BYTE),
  OPERATOR_TYPE  VARCHAR2(10 BYTE),
  OBJECT_TYPE    VARCHAR2(30 BYTE),
  OBJECT_NAME    VARCHAR2(4000 BYTE)            NOT NULL,
  QUERY_TEXT     VARCHAR2(4000 BYTE),
  STATUS         NUMBER,
  TEMPLATE_NAME  VARCHAR2(100 BYTE)
);


CREATE UNIQUE INDEX QA_PAR_FILES_ACTIONS_PK ON QA_PAR_FILES_ACTIONS
(DUMP_ID, ACTION_ID);


CREATE OR REPLACE TRIGGER QA_par_template_handle
BEFORE INSERT ON QA_PAR_FILES_ACTIONS 
FOR EACH ROW
WHEN (
NEW.TEMPLATE_NAME IS NOT NULL
      )
DECLARE
BEGIN
:NEW.ACTION_TYPE  := 'N/A';
:NEW.OBJECT_TYPE := 'N/A';
:NEW.OBJECT_NAME := 'N/A';
:NEW.OPERATOR_TYPE  := 'N/A';
:NEW.QUERY_TEXT := NULL;

END;
/


CREATE OR REPLACE TRIGGER QA_par_seq 
BEFORE INSERT ON QA_PAR_FILES_ACTIONS 
FOR EACH ROW
BEGIN
  SELECT QA_PAR_SEQ.nextval
  INTO   :new.ACTION_ID
  FROM   dual;
END;
/


CREATE OR REPLACE TRIGGER QA_DUMP_MODE_DML
AFTER DELETE OR UPDATE ON QA_PAR_FILES_ACTIONS 
FOR EACH ROW
BEGIN
UPDATE QA_PAR_FILES_MAIN
SET DUMP_MODE = 'IN_EDIT'
WHERE DUMP_ID = :OLD.DUMP_ID; 

IF UPDATING THEN

INSERT INTO QA_PAR_FILES_ACTIONS_HIST (
   DUMP_ID, ACTION_ID, ACTION_TYPE, 
   OPERATOR_TYPE, OBJECT_TYPE, OBJECT_NAME, 
   QUERY_TEXT, STATUS, TEMPLATE_NAME, 
   USERNAME, ENTRY_DATE) 
VALUES ( :NEW.DUMP_ID,
 :NEW.ACTION_ID,
  'UPDATE',
  :NEW.OPERATOR_TYPE,
  :NEW.OBJECT_TYPE,
  :NEW.OBJECT_NAME,
  :NEW.QUERY_TEXT,
  :NEW.STATUS,
  :NEW.TEMPLATE_NAME,
 (NVL(v('APP_USER'),USER)),
 sysdate);
 
ELSE

INSERT INTO QA_PAR_FILES_ACTIONS_HIST (
   DUMP_ID, ACTION_ID, ACTION_TYPE, 
   OPERATOR_TYPE, OBJECT_TYPE, OBJECT_NAME, 
   QUERY_TEXT, STATUS, TEMPLATE_NAME, 
   USERNAME, ENTRY_DATE) 
VALUES ( :OLD.DUMP_ID,
 :OLD.ACTION_ID,
  'DELETE',
  :OLD.OPERATOR_TYPE,
  :OLD.OBJECT_TYPE,
  :OLD.OBJECT_NAME,
  :OLD.QUERY_TEXT,
  :OLD.STATUS,
  :OLD.TEMPLATE_NAME,
 (NVL(v('APP_USER'),USER)),
 sysdate);

END IF;



END;
/


CREATE OR REPLACE TRIGGER QA_DUMP_MODE
AFTER INSERT OR DELETE OR UPDATE ON QA_PAR_FILES_ACTIONS 
FOR EACH ROW
BEGIN
UPDATE QA_PAR_FILES_MAIN
SET DUMP_MODE = 'IN_EDIT'
WHERE DUMP_ID = :NEW.DUMP_ID; 
END;
/


CREATE OR REPLACE TRIGGER QA_DUMP_MODE_INS
AFTER INSERT ON QA_PAR_FILES_ACTIONS 
FOR EACH ROW
BEGIN
UPDATE QA_PAR_FILES_MAIN
SET DUMP_MODE = 'IN_EDIT'
WHERE DUMP_ID = :NEW.DUMP_ID; 

INSERT INTO QA_PAR_FILES_ACTIONS_HIST (
   DUMP_ID, ACTION_ID, ACTION_TYPE, 
   OPERATOR_TYPE, OBJECT_TYPE, OBJECT_NAME, 
   QUERY_TEXT, STATUS, TEMPLATE_NAME, 
   USERNAME, ENTRY_DATE) 
VALUES ( :NEW.DUMP_ID,
 :NEW.ACTION_ID,
  'INSERT',
  :NEW.OPERATOR_TYPE,
  :NEW.OBJECT_TYPE,
  :NEW.OBJECT_NAME,
  :NEW.QUERY_TEXT,
  :NEW.STATUS,
  :NEW.TEMPLATE_NAME,
 (NVL(v('APP_USER'),USER)),
 sysdate);

END;
/


ALTER TABLE QA_PAR_FILES_ACTIONS ADD (
  CONSTRAINT CHECK_ACTION_TYPE
  CHECK (ACTION_TYPE IN ('EXCLUDE','INCLUDE','QUERY','N/A'))
  ENABLE VALIDATE,
  CONSTRAINT CHECK_OBJECT_TYPE
  CHECK (OBJECT_TYPE IN ('TABLE','TABLE_DATA','INDEX','VIEW','N/A',NULL))
  ENABLE VALIDATE,
  CONSTRAINT CHECK_OPREATOR
  CHECK (OPERATOR_TYPE IN ('=','LIKE','IN','<>','N/A'))
  ENABLE VALIDATE,
  CONSTRAINT CHECK_QAS_STATUS
  CHECK (STATUS IN (0,1))
  ENABLE VALIDATE,
  CONSTRAINT CHECK_QUERY
  CHECK ( (ACTION_TYPE = 'QUERY' AND QUERY_TEXT IS NOT NULL) OR (ACTION_TYPE <> 'QUERY' AND QUERY_TEXT IS  NULL) OR (TEMPLATE_NAME IS NOT NULL AND QUERY_TEXT IS  NULL))
  ENABLE VALIDATE,
  CONSTRAINT QA_PAR_FILES_ACTIONS_PK
  PRIMARY KEY
  (DUMP_ID, ACTION_ID)
  USING INDEX QA_PAR_FILES_ACTIONS_PK
  ENABLE VALIDATE);

ALTER TABLE QA_PAR_FILES_ACTIONS ADD (
  CONSTRAINT DUMP_ID_FK 
  FOREIGN KEY (DUMP_ID) 
  REFERENCES QA_PAR_FILES_MAIN (DUMP_ID)
  ENABLE VALIDATE);
