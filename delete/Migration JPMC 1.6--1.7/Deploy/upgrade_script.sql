
begin
alter_constraints('disable');
end;
/


create table exceptions(row_id rowid,
	                owner varchar2(30),
	                table_name varchar2(30),
		        constraint varchar2(30));

delete ARCH_DL_DETAIL where address_id not in (select id from arch_address);

--
-- 1. ARCH_CREDIT_CURRENCY  (Table) 
--
ALTER TABLE ARCH_CREDIT_CURRENCY DROP PRIMARY KEY CASCADE;


--
-- 2. ARCH_GENERIC_NOE_DEALS_TMP  (Table) 
--
-- DROP TABLE ARCH_GENERIC_NOE_DEALS_TMP;

--
-- 3. A_INSTRUMENT_BOND  (Table) 
--
ALTER TABLE A_INSTRUMENT_BOND DROP PRIMARY KEY CASCADE;
DROP TABLE A_INSTRUMENT_BOND;

--
-- 4. A_INSTRUMENT_CURRENCY  (Table) 
--
ALTER TABLE A_INSTRUMENT_CURRENCY DROP PRIMARY KEY CASCADE;
DROP TABLE A_INSTRUMENT_CURRENCY;

--
-- 5. A_INSTRUMENT_LISTED  (Table) 
--
ALTER TABLE A_INSTRUMENT_LISTED DROP PRIMARY KEY CASCADE;
DROP TABLE A_INSTRUMENT_LISTED;

--
-- 6. A_INSTRUMENT_LOC  (Table) 
--
ALTER TABLE A_INSTRUMENT_LOC DROP PRIMARY KEY CASCADE;
DROP TABLE A_INSTRUMENT_LOC;

--
-- 7. A_INSTRUMENT_SERIAL  (Table) 
--
ALTER TABLE A_INSTRUMENT_SERIAL DROP PRIMARY KEY CASCADE;
DROP TABLE A_INSTRUMENT_SERIAL;

--
-- 8. A_INSTRUMENT_STOCK  (Table) 
--
ALTER TABLE A_INSTRUMENT_STOCK DROP PRIMARY KEY CASCADE;
DROP TABLE A_INSTRUMENT_STOCK;

--
-- 9. A_PRICE  (Table) 
--
ALTER TABLE A_PRICE DROP PRIMARY KEY CASCADE;
DROP TABLE A_PRICE;

--
-- 10. A_PRICE_HISTORY  (Table) 
--
ALTER TABLE A_PRICE_HISTORY DROP PRIMARY KEY CASCADE;
DROP TABLE A_PRICE_HISTORY;

--
-- 11. A_PRICE_SOURCE  (Table) 
--
ALTER TABLE A_PRICE_SOURCE DROP PRIMARY KEY CASCADE;
DROP TABLE A_PRICE_SOURCE;

--
-- 12. A_QUOTE_HISTORY  (Table) 
--
ALTER TABLE A_QUOTE_HISTORY DROP PRIMARY KEY CASCADE;
DROP TABLE A_QUOTE_HISTORY;

--
-- 13. A_TA_NOE  (Table) 
--
ALTER TABLE A_TA_NOE DROP PRIMARY KEY CASCADE;
DROP TABLE A_TA_NOE;

--
-- 14. A_TA_OA  (Table) 
--
ALTER TABLE A_TA_OA DROP PRIMARY KEY CASCADE;
DROP TABLE A_TA_OA;

--
-- 15. A_TA_TRADE  (Table) 
--
ALTER TABLE A_TA_TRADE DROP PRIMARY KEY CASCADE;
DROP TABLE A_TA_TRADE;

--
-- 16. A_TA_TRANSACTION  (Table) 
--
ALTER TABLE A_TA_TRANSACTION DROP PRIMARY KEY CASCADE;
DROP TABLE A_TA_TRANSACTION;

--
-- 17. A_TA_TRANSFER  (Table) 
--
ALTER TABLE A_TA_TRANSFER DROP PRIMARY KEY CASCADE;
DROP TABLE A_TA_TRANSFER;

--
-- 18. TMP1  (Table) 
--
-- DROP TABLE TMP1;

--
-- 19. TOAD_PLAN_TABLE  (Table) 
--
-- DROP TABLE TOAD_PLAN_TABLE;


--
-- 52. V_FXPB_REPORT_USD_SPOT_RATES  (View) 
--
DROP VIEW V_FXPB_REPORT_USD_SPOT_RATES;

--
-- 232. ARCH_VAL_MARKET_2_SOURCE_DATA  (Table) 
--
CREATE TABLE ARCH_VAL_MARKET_2_SOURCE_DATA
(
  ID              NUMBER(30)                    NOT NULL,
  MARKET_DATA_ID  NUMBER(30)                    NOT NULL,
  SOURCE_DATA_ID  NUMBER(30)                    NOT NULL
)
TABLESPACE TR_DATA
STORAGE    (
            INITIAL          256K
            NEXT             2M
           )
NOCACHE
NOPARALLEL;

--
-- 233. ARCH_VAL_MD_CURRENCY  (Table) 
--
CREATE TABLE ARCH_VAL_MD_CURRENCY
(
  ID             NUMBER(30)                     NOT NULL,
  INSTRUMENT_ID  NUMBER(30)                     NOT NULL,
  SPOT_RATE      NUMBER(30,10)                  NOT NULL,
  CURRENCY_DATE  DATE                           NOT NULL,
  SOURCE_ID      NUMBER(10)                     NOT NULL
)
TABLESPACE TR_DATA
STORAGE    (
            INITIAL          256K
            NEXT             2M
           )
NOCACHE
NOPARALLEL;

--
-- 234. ARCH_VAL_MD_DISCOUNT_CURVE  (Table) 
--
CREATE TABLE ARCH_VAL_MD_DISCOUNT_CURVE
(
  ID             NUMBER(30)                     NOT NULL,
  RATE           NUMBER(30,10)                  NOT NULL,
  DISCOUNT_DATE  DATE                           NOT NULL,
  SOURCE_ID      NUMBER(10)                     NOT NULL,
  INSTRUMENT_ID  NUMBER(30)                     NOT NULL
)
TABLESPACE TR_DATA
STORAGE    (
            INITIAL          256K
            NEXT             2M
           )
NOCACHE
NOPARALLEL;

--
-- 235. ARCH_VAL_MD_OPTION  (Table) 
--
CREATE TABLE ARCH_VAL_MD_OPTION
(
  ID              NUMBER(30)                    NOT NULL,
  INSTRUMENT_ID   NUMBER(30)                    NOT NULL,
  DELTA           NUMBER(30,10),
  DELTA_CURRENCY  VARCHAR2(10),
  SIGMA           NUMBER(30,10),
  MARKET_SPOT     NUMBER(30,10),
  SOURCE_ID       NUMBER(10)                    NOT NULL,
  UPDATE_DATE     DATE,
  DELTA_SEC       NUMBER(30,10)
)
TABLESPACE TR_DATA
STORAGE    (
            INITIAL          256K
            NEXT             2M
           )
NOCACHE
NOPARALLEL;


--
-- 53. ARCH_GENERIC_REQUEST_DEALS_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH_GENERIC_REQUEST_DEALS_SEQ
  START WITH 4000000
  MAXVALUE 1E+20
  MINVALUE 4000000
  NOCYCLE
  CACHE 20
  NOORDER;

--
-- 54. ARCH_VAL_MARKET_DATA_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH_VAL_MARKET_DATA_SEQ
  START WITH 4000000
  MAXVALUE 1E+20
  MINVALUE 4000000
  NOCYCLE
  CACHE 20
  NOORDER;

--
-- 55. ARCH_VAL_MARK_2_SOUR_DATA_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH_VAL_MARK_2_SOUR_DATA_SEQ
  START WITH 4000000
  MAXVALUE 1E+20
  MINVALUE 4000000
  NOCYCLE
  CACHE 20
  NOORDER;

--
-- 56. ARCH_VAL_MD_CURRENCY_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH_VAL_MD_CURRENCY_SEQ
  START WITH 4000000
  MAXVALUE 1E+20
  MINVALUE 4000000
  NOCYCLE
  CACHE 20
  NOORDER;

--
-- 57. ARCH_VAL_MD_DISCOUNT_CURVE_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH_VAL_MD_DISCOUNT_CURVE_SEQ
  START WITH 4000000
  MAXVALUE 1E+20
  MINVALUE 4000000
  NOCYCLE
  CACHE 20
  NOORDER;

--
-- 58. ARCH_VAL_MD_OPTION_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH_VAL_MD_OPTION_SEQ
  START WITH 4000000
  MAXVALUE 1E+20
  MINVALUE 4000000
  NOCYCLE
  CACHE 20
  NOORDER;

--
-- 59. ARCH_VAL_SOURCE_DATA_SEQ  (Sequence) 
--
CREATE SEQUENCE ARCH_VAL_SOURCE_DATA_SEQ
  START WITH 4000000
  MAXVALUE 1E+20
  MINVALUE 4000000
  NOCYCLE
  CACHE 20
  NOORDER;

--
-- 60. FXPB_CUT_OFF_TIMES_SEQ  (Sequence) 
--
CREATE SEQUENCE FXPB_CUT_OFF_TIMES_SEQ
  START WITH 4000000
  MAXVALUE 1E+20
  MINVALUE 4000000
  NOCYCLE
  CACHE 20
  NOORDER;

--
-- 61. FXPB_DEFAULT_CCY_PAIRS_SEQ  (Sequence) 
--
CREATE SEQUENCE FXPB_DEFAULT_CCY_PAIRS_SEQ
  START WITH 4000000
  MAXVALUE 1E+20
  MINVALUE 4000000
  NOCYCLE
  CACHE 20
  NOORDER;

--
-- 62. JPMC_GENERIC_MUREX_DEALS_SEQ  (Sequence) 
--
CREATE SEQUENCE JPMC_GENERIC_MUREX_DEALS_SEQ
  START WITH 4000000
  MAXVALUE 1E+20
  MINVALUE 4000000
  NOCYCLE
  CACHE 20
  NOORDER;

--
-- 63. INSTRUMENT_TYPE  (Column) 
--
--ALTER TABLE ARCH_BILLING_DATA ADD (INSTRUMENT_TYPE  NUMBER(10)                   NOT NULL);
ALTER TABLE ARCH_BILLING_DATA ADD (INSTRUMENT_TYPE  NUMBER(10)         NULL);
update ARCH_BILLING_DATA  set INSTRUMENT_TYPE   = 1;
alter TABLE ARCH_BILLING_DATA modify INSTRUMENT_TYPE  NOT NULL;
update Arch_billing_data set billing_fee = BILLING_FEE_USD;



--
-- 64. BILLING_FEE_USD  (Column) 
--
ALTER TABLE ARCH_BILLING_DATA DROP COLUMN BILLING_FEE_USD;

--
-- 65. MQ_SERVER_CHANNEL  (Column) 
--
ALTER TABLE ARCH_CON_MQ ADD (MQ_SERVER_CHANNEL  VARCHAR2(255));

--
-- 66. MQ_SERVER_CHANNEL  (Column) 
--
ALTER TABLE ARCH_CON_MQ_CHECKER ADD (MQ_SERVER_CHANNEL  VARCHAR2(255));

--
-- 67. TRANSFORMER_PARSER  (Column) 
--

ALTER TABLE ARCH_EVENT ADD (TRANSFORMER_PARSER  VARCHAR2(255)             NULL);
update ARCH_EVENT  set TRANSFORMER_PARSER  = 'Template' where id != 1000016;
update ARCH_EVENT  set TRANSFORMER_PARSER  = 'DelimiterString' where id = 1000016;
ALTER TABLE ARCH_EVENT modify TRANSFORMER_PARSER  NOT NULL;


--
-- 68. ARCH_GENERIC_REQUEST_DEALS  (Table) 
--
CREATE TABLE ARCH_GENERIC_REQUEST_DEALS
(
  ID                        NUMBER(30)          NOT NULL,
  DOMAIN_ID                 NUMBER(30)          NOT NULL,
  PARTNER_ID                NUMBER(30)          NOT NULL,
  PARTNER_NAME              VARCHAR2(255)       NOT NULL,
  NAMER_ID                  NUMBER(30)          NOT NULL,
  STATUS                    NUMBER(10)          NOT NULL,
  REASON                    VARCHAR2(4000),
  INSERT_TIME               DATE                NOT NULL,
  EXEC_TIME                 DATE,
  INSERT_UUID               VARCHAR2(255)       NOT NULL,
  EXEC_UUID                 VARCHAR2(255)       NOT NULL,
  TRANSFORMER_NAME          VARCHAR2(255)       NOT NULL,
  PROTOCOL_INFO_MESSAGE_ID  NUMBER(30)          NOT NULL,
  TARGET_DATA               LONG RAW            NOT NULL
)

TABLESPACE TR_BIG_DATA
STORAGE    (
            INITIAL          2M
            NEXT             5M
           )
NOCACHE
NOPARALLEL;

--
-- 69. ARCH_VAL_MARKET_DATA  (Table) 
--
CREATE TABLE ARCH_VAL_MARKET_DATA
(
  ID           NUMBER(30)                       NOT NULL,
  NAME         VARCHAR2(255),
  MARKET_TYPE  NUMBER(10)                       NOT NULL,
  DESCRIPTION  VARCHAR2(255)
)
TABLESPACE TR_DATA
STORAGE    (
            INITIAL          256K
            NEXT             2M
           )
NOCACHE
NOPARALLEL;

--
-- 70. STATUS  (Column) 
--
ALTER TABLE ARCH_VAL_MARKET_FUNCTION ADD (STATUS  NUMBER(10)                            NOT NULL);

--
-- 71. RESULT_CLASS_FORMAT  (Column) 
--
ALTER TABLE ARCH_VAL_MARKET_FUNCTION DROP COLUMN RESULT_CLASS_FORMAT;

--
-- 72. ARCH_VAL_SOURCE_DATA  (Table) 
--
CREATE TABLE ARCH_VAL_SOURCE_DATA
(
  ID                   NUMBER(30)               NOT NULL,
  SOURCE_ID            NUMBER(10)               NOT NULL,
  SOURCE_DATA_TYPE_ID  NUMBER(30)               NOT NULL,
  DESCRIPTION          VARCHAR2(255)
)
TABLESPACE TR_DATA
STORAGE    (
            INITIAL          256K
            NEXT             2M
           )
NOCACHE
NOPARALLEL;

--
-- 73. CODE_GROUP_ID  (Column) 
--
ALTER TABLE ARCH_VAL_SOURCE_DATA_TYPE ADD (CODE_GROUP_ID  NUMBER(30));

--
-- 74. SOURCE_TARGET_IMPL_CLASS  (Column) 
--
ALTER TABLE ARCH_VAL_SOURCE_DATA_TYPE ADD (SOURCE_TARGET_IMPL_CLASS  VARCHAR2(255)       NOT NULL);

--
-- 75. DESCRIPTION  (Column) 
--
ALTER TABLE ARCH_VAL_SOURCE_DATA_TYPE ADD (DESCRIPTION  VARCHAR2(255));

--
-- 76. SOURCE_DATA_TYPE  (Column) 
--
ALTER TABLE ARCH_VAL_SOURCE_DATA_TYPE DROP COLUMN SOURCE_DATA_TYPE;

--
-- 77. BARR_LEVEL  (Column) 
--
ALTER TABLE A_INSTRUMENT_BARRIER_OPTION ADD (BARR_LEVEL  NUMBER(30,10)                     NOT NULL);

--
-- 78. BARR_DIRECTION  (Column) 
--
ALTER TABLE A_INSTRUMENT_BARRIER_OPTION ADD (BARR_DIRECTION  NUMBER(10)                    NOT NULL);

--
-- 79. REBATE_PCT  (Column) 
--
ALTER TABLE A_INSTRUMENT_BARRIER_OPTION ADD (REBATE_PCT  NUMBER(30,10));

--
-- 80. BARRIER  (Column) 
--
ALTER TABLE A_INSTRUMENT_BARRIER_OPTION DROP COLUMN BARRIER;

--
-- 81. IN_OUT  (Column) 
--
ALTER TABLE A_INSTRUMENT_BARRIER_OPTION DROP COLUMN IN_OUT;

--
-- 82. UP_DOWN  (Column) 
--
ALTER TABLE A_INSTRUMENT_BARRIER_OPTION DROP COLUMN UP_DOWN;

--
-- 83. REBATE  (Column) 
--
ALTER TABLE A_INSTRUMENT_BARRIER_OPTION DROP COLUMN REBATE;

--
-- 84. A_INSTRUMENT_DBL_BARRIER_OPT  (Table) 
--
CREATE TABLE A_INSTRUMENT_DBL_BARRIER_OPT
(
  ID           NUMBER(30)                       NOT NULL,
  BARR_LEVEL2  NUMBER(30,10)                    NOT NULL,
  REBATE_PCT2  NUMBER(30,10)                    NOT NULL
)
TABLESPACE TR_DATA
STORAGE    (
            INITIAL          256K
            NEXT             2M
           )
NOCACHE
NOPARALLEL;

--
-- 85. A_INSTRUMENT_DIGITAL_OPT  (Table) 
--
CREATE TABLE A_INSTRUMENT_DIGITAL_OPT
(
  ID             NUMBER(30)                     NOT NULL,
  PAYOUT_CCY     NUMBER(30)                     NOT NULL,
  PAYOUT_AMOUNT  NUMBER(30,10)                  NOT NULL
)
TABLESPACE TR_DATA
STORAGE    (
            INITIAL          256K
            NEXT             2M
           )
NOCACHE
NOPARALLEL;

--
-- 86. A_OBJECT_2_OBJECT  (Table) 
--
ALTER TABLE A_OBJECT_2_OBJECT NOCACHE;

--
-- 87. PARENT_TA_ID  (Column) 
--
ALTER TABLE A_TA_TA_REL MODIFY (PARENT_TA_ID NOT NULL);

--
-- 88. CHILD_TA_ID  (Column) 
--
ALTER TABLE A_TA_TA_REL MODIFY (CHILD_TA_ID NOT NULL);

--
-- 89. RELATION  (Column) 
--
ALTER TABLE A_TA_TA_REL MODIFY (RELATION NOT NULL);

--
-- 90. FXPB_CUT_OFF_TIMES  (Table) 
--
CREATE TABLE FXPB_CUT_OFF_TIMES
(
  ID           NUMBER(30)                       NOT NULL,
  CUTOFF_NAME  VARCHAR2(255),
  DESCRIPTION  VARCHAR2(255),
  TIME         VARCHAR2(255),
  ZONE         VARCHAR2(255)
)
TABLESPACE TR_BIG_DATA
STORAGE    (
            INITIAL          10M
            NEXT             5M
           )
NOCACHE
NOPARALLEL;

--
-- 91. FXPB_DEFAULT_CCY_PAIRS  (Table) 
--
CREATE TABLE FXPB_DEFAULT_CCY_PAIRS
(
  ID        NUMBER(30)                          NOT NULL,
  CCY_PAIR  VARCHAR2(255)                       NOT NULL
)
TABLESPACE TR_BIG_DATA
STORAGE    (
            INITIAL          10M
            NEXT             5M
           )
NOCACHE
NOPARALLEL;

--
-- 92. FXPB_MD_OPTION_EXT  (Table) 
--
CREATE TABLE FXPB_MD_OPTION_EXT
(
  ID                        NUMBER(30)          NOT NULL,
  MUREX_TRADE_ID            NUMBER(30)          NOT NULL,
  VAL_QUOTE_TYPE            NUMBER(30),
  VAL_DATA_SOURCE           VARCHAR2(255),
  CCY_PAIR                  VARCHAR2(6),
  DELTA                     NUMBER(30,10),
  GAMMA                     NUMBER(30,10),
  VEGA                      NUMBER(30,10),
  GREEKS_CCY_ID             NUMBER(30),
  GREEKS_SPOT               NUMBER(30,10),
  GREEKS_SPOT_DATE          DATE,
  VOLATILITY                NUMBER(30,10),
  MTM_PRICE                 NUMBER(30,10),
  MTM_PRICE_Q_MODE          NUMBER(30),
  UNREALIZED_DAILY_PNL      NUMBER(30,10),
  REALIZED_DAILY_PNL        NUMBER(30,10),
  UNREALIZED_INC_PNL        NUMBER(30,10),
  REALIZED_INC_PNL          NUMBER(30,10),
  UNREALIZED_MONTH2DAY_PNL  NUMBER(30,10),
  REALIZED_MONTH2DAY_PNL    NUMBER(30,10),
  MONTH2DAY_TOTAL_PNL       NUMBER(30,10),
  IS_BASE_CCY_FIRST         NUMBER(1)
)
TABLESPACE TR_BIG_DATA
STORAGE    (
            INITIAL          10M
            NEXT             5M
           )
NOCACHE
NOPARALLEL;

--
-- 93. OPTION_BO_TRADE_ID  (Column) 
--
ALTER TABLE FXPB_NOE ADD (OPTION_BO_TRADE_ID  VARCHAR2(255));

--
-- 94. PARTNER_ID  (Column) 
--
ALTER TABLE FXPB_NOE ADD (PARTNER_ID  NUMBER(30));

--
-- 95. REQUEST_ID  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE MODIFY (REQUEST_ID VARCHAR2(255));

--
-- 96. EXPIRY_DATE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (EXPIRY_DATE  DATE);

--
-- 97. STRIKE_QUOTE_MODE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (STRIKE_QUOTE_MODE  NUMBER(3));

--
-- 98. PRICE_PAID  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (PRICE_PAID  NUMBER(30,10));

--
-- 99. BARRIER_TYPE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (BARRIER_TYPE  NUMBER(3));

--
-- 100. LOWER_BARRIER_LEVEL  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (LOWER_BARRIER_LEVEL  NUMBER(30,10));

--
-- 101. UPPER_BARRIER_LEVEL  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (UPPER_BARRIER_LEVEL  NUMBER(30,10));

--
-- 102. REBATE_QUOTE_MODE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (REBATE_QUOTE_MODE  NUMBER(3));

--
-- 103. REBATE_PERCENT_1  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (REBATE_PERCENT_1  NUMBER(30,10));

--
-- 104. REBATE_PERCENT_2  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (REBATE_PERCENT_2  NUMBER(30,10));

--
-- 105. REBATE_TYPE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (REBATE_TYPE  VARCHAR2(255));

--
-- 106. PAYOUT_CURRENCY  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (PAYOUT_CURRENCY  NUMBER(30));

--
-- 107. PAYOUT_AMOUNT  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (PAYOUT_AMOUNT  NUMBER(30,10));

--
-- 108. PREMIUM_AMOUNT  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (PREMIUM_AMOUNT  NUMBER(30,10));

--
-- 109. PREMIUM_TYPE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (PREMIUM_TYPE  NUMBER(3));

--
-- 110. OPTION_STYLE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (OPTION_STYLE  NUMBER(3));

--
-- 111. EXPIRY_TIME  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (EXPIRY_TIME  VARCHAR2(255));

--
-- 112. UNDERLYING_CLIENT_REF  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (UNDERLYING_CLIENT_REF  VARCHAR2(255));

--
-- 113. DELIVERY_METHOD  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (DELIVERY_METHOD  NUMBER(3));

--
-- 114. OPTION_STATUS  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (OPTION_STATUS  VARCHAR2(255));

--
-- 115. DATE_TERMINATED  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (DATE_TERMINATED  DATE);

--
-- 116. OPTION_BO_TRADE_ID  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (OPTION_BO_TRADE_ID  VARCHAR2(255));

--
-- 117. PARTNER_ID  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE ADD (PARTNER_ID  NUMBER(30));

--
-- 118. EXERCISE_DATE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN EXERCISE_DATE;

--
-- 119. STRIKE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN STRIKE;

--
-- 120. BARRIER_DIRECTION  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN BARRIER_DIRECTION;

--
-- 121. PREMIUM  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN PREMIUM;

--
-- 122. CONTRACT_STYLE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN CONTRACT_STYLE;

--
-- 123. CUT_OFF_TIME  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN CUT_OFF_TIME;

--
-- 124. DELTA  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN DELTA;

--
-- 125. FAR_VALUE_DATE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN FAR_VALUE_DATE;

--
-- 126. FAR_QUANTITY  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN FAR_QUANTITY;

--
-- 127. FAR_QUANTITY2  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN FAR_QUANTITY2;

--
-- 128. U_FAR_RATE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN U_FAR_RATE;

--
-- 129. SPOT_RATE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN SPOT_RATE;

--
-- 130. FORWARD_POINTS  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN FORWARD_POINTS;

--
-- 131. TRADER_MARKUP  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN TRADER_MARKUP;

--
-- 132. FORWARD_MARKUP  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN FORWARD_MARKUP;

--
-- 133. FAR_SPOT_RATE  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN FAR_SPOT_RATE;

--
-- 134. FAR_FORWARD_POINTS  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN FAR_FORWARD_POINTS;

--
-- 135. FAR_TRADER_MARKUP  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN FAR_TRADER_MARKUP;

--
-- 136. FAR_FORWARD_MARKUP  (Column) 
--
ALTER TABLE FXPB_OPTION_NOE DROP COLUMN FAR_FORWARD_MARKUP;

--
-- 137. FXPB_OPTION_TRADE  (Table) 
--
CREATE TABLE FXPB_OPTION_TRADE
(
  ID                       NUMBER(30)           NOT NULL,
  TYPE                     NUMBER(30)           NOT NULL,
  TRADE_DATE               DATE                 NOT NULL,
  EXTERNAL_REF             VARCHAR2(255),
  CREATION_DATE            DATE,
  SETTLEMENT_DATE          DATE,
  TERMINATED_DATE          DATE,
  ENTERING_ORG_ID          NUMBER(30),
  SUBMITTER_PERSON_ID      NUMBER(30),
  PROCESS_ID               NUMBER(30),
  OLD_ID                   NUMBER(30),
  NEW_ID                   NUMBER(30),
  STATE_ID                 NUMBER(30)           NOT NULL,
  STATUS_TYPE              NUMBER(30),
  DESCRIPTION              VARCHAR2(255),
  SIDE_A_ORG_ID            NUMBER(30),
  SIDE_B_ORG_ID            NUMBER(30),
  ARRANGEMENT_ID           NUMBER(30),
  RATE                     NUMBER(30,10),
  ROLE_A                   NUMBER(30),
  ROLE_B                   NUMBER(30),
  TRADER_ID                NUMBER(30),
  TRADING_ACTIVITY_SIDE_A  NUMBER(30),
  TRADING_ACTIVITY_SIDE_B  NUMBER(30),
  ISFINAL                  NUMBER(1),
  QUANTITY2                NUMBER(30,10),
  SIDE_A_MANAGER_ID        NUMBER(30),
  SIDE_B_MANAGER_ID        NUMBER(30),
  QUANTITY                 NUMBER(30,10),
  BOR_STATUS               NUMBER(30),
  BOR_STATUS_REASON        VARCHAR2(255),
  LIFE_STATUS              NUMBER(30),
  LIFE_STATUS_REASON       VARCHAR2(255),
  OPTION_STATUS            NUMBER(30),
  OPTION_STATUS_REASON     VARCHAR2(255),
  BILLING_DATA_ID1         NUMBER(30),
  BILLING_DATA_ID2         NUMBER(30),
  OPTION_BO_TRADE_ID       VARCHAR2(255),
  EXPIRY_DATE              DATE,
  PRICE_PAID               NUMBER(30,10),
  PAYOUT_AMOUNT            NUMBER(30,10),
  PRIMIUM_AMOUNT           NUMBER(30,10),
  SECONDARY_COUNTERPARTY   VARCHAR2(255),
  UNDERLYING_CLIENT_REF    VARCHAR2(255),
  AGREEMENT                NUMBER(30),
  PORTFOLIO_ID             NUMBER(30)
)
TABLESPACE TR_BIG_DATA
STORAGE    (
            INITIAL          10M
            NEXT             5M
           )
NOCACHE
NOPARALLEL;

--
-- 138. FXPB_ORG_ROLE_2_EVENT  (Table) 
--
CREATE TABLE FXPB_ORG_ROLE_2_EVENT
(
  ID           NUMBER(30)                       NOT NULL,
  ORG_ROLE_ID  NUMBER(30),
  EVENT_ID     NUMBER(30)
)
TABLESPACE TR_BIG_DATA
STORAGE    (
            INITIAL          10M
            NEXT             5M
           )
NOCACHE
NOPARALLEL;

--
-- 139. LINEAR_BO_TRADE_ID  (Column) 
--
ALTER TABLE FXPB_TRADE ADD (LINEAR_BO_TRADE_ID  VARCHAR2(255));

--
-- 140. OPTION_BO_TRADE_ID  (Column) 
--
ALTER TABLE FXPB_TRADE ADD (OPTION_BO_TRADE_ID  VARCHAR2(255));

--
-- 141. IRFE_TRADE_ID  (Column) 
--
ALTER TABLE FXPB_TRADE DROP COLUMN IRFE_TRADE_ID;

--
-- 142. JPMC_GENERIC_MUREX_DEALS  (Table) 
--
CREATE TABLE JPMC_GENERIC_MUREX_DEALS
(
  ID                     NUMBER(30)             NOT NULL,
  MUREX_TRADE_ID         NUMBER(30)             NOT NULL,
  STATUS                 NUMBER(30)             NOT NULL,
  REASON                 VARCHAR2(255),
  PARTNER_NAME           VARCHAR2(255),
  UUID                   VARCHAR2(255)          NOT NULL,
  TIME                   DATE,
  TP_BROKER              VARCHAR2(255),
  ENTERING_PARTY_ORG_ID  NUMBER(30),
  SUBMITTER_PERSON_ID    NUMBER(30),
  VALUE_DATE             DATE,
  TRADE_DATE             DATE,
  SECONDARY_CCY_NAME     VARCHAR2(255),
  BASE_CCY_NAME          VARCHAR2(255),
  RATE                   NUMBER(30,10),
  TRADE_TYPE             NUMBER(30),
  BINTERNAL              VARCHAR2(255),
  BPORTFOLIO             VARCHAR2(255),
  SINTERNAL              VARCHAR2(255),
  SPORTFOLIO             VARCHAR2(255),
  SEC_CTRP               VARCHAR2(255),
  CONTRACT_TYPE          NUMBER(30),
  QTY                    NUMBER(30,10),
  CLIENT_REF             VARCHAR2(255),
  TRADER                 VARCHAR2(255),
  PB_NAME                VARCHAR2(255),
  NB_AMD                 NUMBER(30),
  CLIENT_NOE_ID          NUMBER(30),
  BANK_NOE_ID            NUMBER(30),
  TP_CREATOR             NUMBER(30),
  TP_TRADER              VARCHAR2(255),
  TP_AE                  VARCHAR2(25),
  TP_BARTYPE             VARCHAR2(255),
  TP_MOPLSTL             VARCHAR2(255),
  OPTION_TYPE            VARCHAR2(255),
  TRADE_REF_ID           NUMBER(30),
  OPERATION              VARCHAR2(50),
  TRAIDING_PARTY         VARCHAR2(255),
  COUNTER_PARTY          VARCHAR2(255),
  SECONDARY_PARTY        VARCHAR2(255),
  RESERVED1              VARCHAR2(255)
)
TABLESPACE TR_BIG_DATA
STORAGE    (
            INITIAL          10M
            NEXT             5M
           )
NOCACHE
NOPARALLEL;

--
-- 143. ARCH_GENERIC_REQUEST_DEALS_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH_GENERIC_REQUEST_DEALS_PK ON ARCH_GENERIC_REQUEST_DEALS
(ID)
NOPARALLEL;

--
-- 144. ARCH_SOU_ID_SOU_DATA_TYPE_UNQ  (Index) 
--
CREATE UNIQUE INDEX ARCH_SOU_ID_SOU_DATA_TYPE_UNQ ON ARCH_VAL_SOURCE_DATA
(SOURCE_DATA_TYPE_ID, SOURCE_ID)
NOPARALLEL;


--
-- 146. ARCH_VAL_INST_DATE_SOUR_UNIQ  (Index) 
--
CREATE UNIQUE INDEX ARCH_VAL_INST_DATE_SOUR_UNIQ ON ARCH_VAL_MD_DISCOUNT_CURVE
(SOURCE_ID, INSTRUMENT_ID, DISCOUNT_DATE)
NOPARALLEL;

--
-- 147. ARCH_VAL_INST_SOUR_UNIQ  (Index) 
--
CREATE UNIQUE INDEX ARCH_VAL_INST_SOUR_UNIQ ON ARCH_VAL_MD_OPTION
(INSTRUMENT_ID, SOURCE_ID)
NOPARALLEL;

--
-- 148. ARCH_VAL_MARKET_2_SOUR_DATA_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH_VAL_MARKET_2_SOUR_DATA_PK ON ARCH_VAL_MARKET_2_SOURCE_DATA
(ID)
NOPARALLEL;

--
-- 149. ARCH_VAL_MARKET_DATA_NAME_UNIQ  (Index) 
--
CREATE UNIQUE INDEX ARCH_VAL_MARKET_DATA_NAME_UNIQ ON ARCH_VAL_MARKET_DATA
(NAME)
NOPARALLEL;

--
-- 150. ARCH_VAL_MARKET_DATA_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH_VAL_MARKET_DATA_PK ON ARCH_VAL_MARKET_DATA
(ID)
NOPARALLEL;

--
-- 151. ARCH_VAL_MD_CURRENCY_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH_VAL_MD_CURRENCY_PK ON ARCH_VAL_MD_CURRENCY
(ID)
NOPARALLEL;

--
-- 152. ARCH_VAL_MD_DATE_INST_SOU_UNIQ  (Index) 
--
CREATE UNIQUE INDEX ARCH_VAL_MD_DATE_INST_SOU_UNIQ ON ARCH_VAL_MD_CURRENCY
(INSTRUMENT_ID, CURRENCY_DATE, SOURCE_ID)
NOPARALLEL;

--
-- 153. ARCH_VAL_MD_DISCOUNT_CURVE_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH_VAL_MD_DISCOUNT_CURVE_PK ON ARCH_VAL_MD_DISCOUNT_CURVE
(ID)
NOPARALLEL;

--
-- 154. ARCH_VAL_MD_OPTION_PK  (Index) 
--
CREATE UNIQUE INDEX ARCH_VAL_MD_OPTION_PK ON ARCH_VAL_MD_OPTION
(ID)
NOPARALLEL;


--
-- 156. ARCH_VAL_SOURCE_DATA_TYPES_PK  (Index) 
--
--CREATE UNIQUE INDEX ARCH_VAL_SOURCE_DATA_TYPES_PK ON ARCH_VAL_SOURCE_DATA_TYPE(ID)NOPARALLEL;


--
-- 158. A_INSTRUMENT_DIGITAL_OPT_PK  (Index) 
--
CREATE UNIQUE INDEX A_INSTRUMENT_DIGITAL_OPT_PK ON A_INSTRUMENT_DIGITAL_OPT
(ID)
NOPARALLEL;

--
-- 159. A_TA_TA_REL_PK  (Index) 
--
-- DROP INDEX A_TA_TA_REL_PK;
-- CREATE UNIQUE INDEX A_TA_TA_REL_PK ON A_TA_TA_REL
-- (CHILD_TA_ID, PARENT_TA_ID, RELATION)
-- NOPARALLEL;

--
-- 160. FXPB_CUT_OFF_TIMES_PK  (Index) 
--
CREATE UNIQUE INDEX FXPB_CUT_OFF_TIMES_PK ON FXPB_CUT_OFF_TIMES
(ID)
NOPARALLEL;

--
-- 161. FXPB_DEFAULT_CCY_PAIRS_UNQ1  (Index) 
--
CREATE UNIQUE INDEX FXPB_DEFAULT_CCY_PAIRS_UNQ1 ON FXPB_DEFAULT_CCY_PAIRS
(CCY_PAIR)
NOPARALLEL;

--
-- 162. FXPB_OPTION_TRADE_IDX1  (Index) 
--
CREATE INDEX FXPB_OPTION_TRADE_IDX1 ON FXPB_OPTION_TRADE
(OPTION_BO_TRADE_ID)
TABLESPACE TR_BIG_INDEX
STORAGE    (
            INITIAL          10M
            NEXT             5M
           )
NOPARALLEL;

NOPARALLEL;

--
-- 163. FXPB_OPTION_TRADE_PK  (Index) 
--
CREATE UNIQUE INDEX FXPB_OPTION_TRADE_PK ON FXPB_OPTION_TRADE
(ID)
NOPARALLEL;

--
-- 164. FXPB_ORG_ROLE_2_EVENT_PK  (Index) 
--
CREATE UNIQUE INDEX FXPB_ORG_ROLE_2_EVENT_PK ON FXPB_ORG_ROLE_2_EVENT
(ID)
NOPARALLEL;

--
-- 165. FXPB_TRADE_TA_SIDE_A_IDX  (Index) 
--
CREATE INDEX FXPB_TRADE_TA_SIDE_A_IDX ON FXPB_TRADE
(TRADING_ACTIVITY_SIDE_A)
TABLESPACE TR_BIG_INDEX
STORAGE    (
            INITIAL          10M
            NEXT             5M
           )
NOPARALLEL;

--
-- 166. FXPB_TRADE_TA_SIDE_B_IDX  (Index) 
--
CREATE INDEX FXPB_TRADE_TA_SIDE_B_IDX ON FXPB_TRADE
(TRADING_ACTIVITY_SIDE_B)
TABLESPACE TR_BIG_INDEX
STORAGE    (
            INITIAL          10M
            NEXT             5M
           )
NOPARALLEL;

--
-- 167. PK_FXPB_DEFAULT_CCY_PAIRS  (Index) 
--
CREATE UNIQUE INDEX PK_FXPB_DEFAULT_CCY_PAIRS ON FXPB_DEFAULT_CCY_PAIRS
(ID)
NOPARALLEL;

--
-- 168. PK_FXPB_MD_OPTION_EXT  (Index) 
--
CREATE UNIQUE INDEX PK_FXPB_MD_OPTION_EXT ON FXPB_MD_OPTION_EXT
(ID)
NOPARALLEL;

--
-- 169. PK_JPMC_GENERIC_MUREX_DEALS  (Index) 
--
CREATE UNIQUE INDEX PK_JPMC_GENERIC_MUREX_DEALS ON JPMC_GENERIC_MUREX_DEALS
(ID)
NOPARALLEL;

--
-- 170. V_ARCH_AUTHORIZATION  (View) 
--
CREATE OR REPLACE FORCE VIEW V_ARCH_AUTHORIZATION 
(DOMAIN_ID, AUTHO_NAME, GROUP_ID, RELATION) AS 
SELECT
  a.domain_id,
  a.autho_name
--  , a.autho_id
  , b.group_id
--  , b.seq
  , b.relation
FROM arch_authorization_def a
  , arch_authorization_relation b
WHERE (a.autho_id = b.autho_id)
ORDER BY autho_name, group_id, b.seq;

--
-- 171. V_ARCH_BILLING_CAPS  (View) 
--
CREATE OR REPLACE FORCE VIEW V_ARCH_BILLING_CAPS 
(ID, ACCOUNT_ID, ACTIVITY_CAP, DAILY_CAP, MONTHLY_CAP, 
 ACTIVITY_FEE, DAILY_FEE, MONTHLY_FEE, INSTRUMENT_TYPE) AS 
SELECT
  C1.VALUE,
  C2.VALUE,
  C3.VALUE,
  C4.VALUE,
  C5.VALUE,
  C6.VALUE,
  C7.VALUE,
  C8.VALUE,
   C9.VALUE
  FROM
    ARCH_OBJ_PROP_GROUP_DEF A,
	ARCH_OBJ_PROP_DEF  B1,
	ARCH_OBJ_PROP_DEF  B2,
	ARCH_OBJ_PROP_DEF  B3,
	ARCH_OBJ_PROP_DEF  B4,
	ARCH_OBJ_PROP_DEF  B5,
	ARCH_OBJ_PROP_DEF  B6,
	ARCH_OBJ_PROP_DEF  B7,
	ARCH_OBJ_PROP_DEF  B8,
	ARCH_OBJ_PROP_DEF  B9,
	ARCH_OBJECT_PROPS C1,
	ARCH_OBJECT_PROPS C2,
	ARCH_OBJECT_PROPS C3,
	ARCH_OBJECT_PROPS C4,
	ARCH_OBJECT_PROPS C5,
	ARCH_OBJECT_PROPS C6,
	ARCH_OBJECT_PROPS C7,
	ARCH_OBJECT_PROPS C8,
	ARCH_OBJECT_PROPS C9
  WHERE
  A.OBJECT_TYPE = 20001
  AND B1.GROUP_ID = A.ID
  AND B1.ID = 310
  AND C1.OBJECT_TYPE = A.OBJECT_TYPE
  AND C1.CODE_ID = B1.ID
  AND C2.OBJECT_ID = C1.OBJECT_ID
  AND B2.GROUP_ID = A.ID
  AND B2.ID = 311
  AND C2.OBJECT_TYPE = A.OBJECT_TYPE
  AND C2.CODE_ID = B2.ID
  AND C3.OBJECT_ID = C1.OBJECT_ID
  AND B3.GROUP_ID = A.ID
  AND B3.ID = 312
  AND C3.OBJECT_TYPE = A.OBJECT_TYPE
  AND C3.CODE_ID = B3.ID
  AND C4.OBJECT_ID = C1.OBJECT_ID
  AND B4.GROUP_ID = A.ID
  AND B4.ID = 313
  AND C4.OBJECT_TYPE = A.OBJECT_TYPE
  AND C4.CODE_ID = B4.ID
  AND C5.OBJECT_ID = C1.OBJECT_ID
  AND B5.GROUP_ID = A.ID
  AND B5.ID = 314
  AND C5.OBJECT_TYPE = A.OBJECT_TYPE
  AND C5.CODE_ID = B5.ID
  AND C6.OBJECT_ID = C1.OBJECT_ID
  AND B6.GROUP_ID = A.ID
  AND B6.ID = 315
  AND C6.OBJECT_TYPE = A.OBJECT_TYPE
  AND C6.CODE_ID = B6.ID
  AND C7.OBJECT_ID = C1.OBJECT_ID
  AND B7.GROUP_ID = A.ID
  AND B7.ID = 316
  AND C7.OBJECT_TYPE = A.OBJECT_TYPE
  AND C7.CODE_ID = B7.ID
  AND C8.OBJECT_ID = C1.OBJECT_ID
  AND B8.GROUP_ID = A.ID
  AND B8.ID = 317
  AND C8.OBJECT_TYPE = A.OBJECT_TYPE
  AND C8.CODE_ID = B8.ID
  AND C9.OBJECT_ID = C1.OBJECT_ID
  AND B9.GROUP_ID = A.ID
  AND B9.ID = 318
  AND C9.OBJECT_TYPE = A.OBJECT_TYPE
  AND C9.CODE_ID = B9.ID;

--
-- 172. V_ARCH_CON_MQ_CHECKER  (View) 
--
CREATE OR REPLACE FORCE VIEW V_ARCH_CON_MQ_CHECKER 
(ADDRESS_ID, ADDRESS_NAME, TRANSPORT_TYPE, TYPE, STATUS, 
 QUEUENAME, QMGR, LISTENER_CLASS_NAME, MQ_SERVER_NAME, MQ_SERVER_PORT, 
 MQ_SERVER_CHANNEL, CHECK_MODE, PARTNER_ID, DOMAIN_ID, TIME_IN_QUEUE) AS 
SELECT
  A.ADDRESS_ID,
  D.NAME,
  E.DATA,
  D.DATA_MODE,
  D.STATUS,
  A.QUEUENAME,
  A.QMGR,
  A.LISTENER_CLASS_NAME,
  A.MQ_SERVER_NAME,
  A.MQ_SERVER_PORT,
  A.MQ_SERVER_CHANNEL,
  A.CHECK_MODE,
  B.ID,
  B.DOMAIN_ID,
  A.TIME_IN_QUEUE
  FROM
  ARCH_CON_MQ_CHECKER  A,
  ARCH_PARTNER B,
  A_OBJECT_2_OBJECT C,
  ARCH_ADDRESS D,
  ARCH_CODE_MEMBER E
  WHERE
  C.TO_OBJECT_TYPE = 10000
  AND  C.TO_OBJECT_ID = A.ADDRESS_ID
  AND C.FROM_OBJECT_TYPE = 1000
  AND B.ID = C.FROM_OBJECT_ID
  AND A.ADDRESS_ID=D.ID
  AND E.GROUP_ID = 41
  AND E.CODE_KEY = D.TRANSPORT_TYPE;

--
-- 173. V_ARCH_GAPPRESEND_EVENTLIST  (View) 
--
CREATE OR REPLACE FORCE VIEW V_ARCH_GAPPRESEND_EVENTLIST 
(ID, NAME) AS 
SELECT ID, NAME
FROM ARCH_EVENT
WHERE ID in (1000020, 1000021, 1000022, 1000023)
ORDER BY NAME;

--
-- 174. V_ARCH_OPTION_MD_POS_DETAIL  (View) 
--
CREATE OR REPLACE FORCE VIEW V_ARCH_OPTION_MD_POS_DETAIL 
(ACCOUNT_ID, CREATION_DATE, TYPE, POSITION_DATE, LONG_AMOUNT, 
 SHORT_AMOUNT, UPDATE_DATE, INSTRUMENT_ID, SOURCE_ID, SOURCE_TYPE, 
 SOURCE_REF, SOURCE_REF_TYPE, DELTA, SIGMA, MARKET_SPOT, 
 MD_SOURCE_ID, DELTA_CURRENCY, DELTA_SEC) AS 
select posDetails.ACCOUNT_ID,posDetails.CREATION_DATE, posDetails.TYPE,posDetails.POSITION_DATE,posDetails.LONG_AMOUNT,posDetails.SHORT_AMOUNT,posDetails.UPDATE_DATE, posDetails.INSTRUMENT_ID,(posDetails.SOURCE_ID) SOURCE_ID,posDetails.SOURCE_TYPE,posDetails.SOURCE_REF,posDetails.SOURCE_REF_TYPE,mdOption.DELTA,mdOption.SIGMA,mdOption.MARKET_SPOT,(mdOption.SOURCE_ID) MD_SOURCE_ID,mdOption.DELTA_CURRENCY,mdOption.DELTA_SEC
from
ARCH_POSITION_DETAILS posDetails,
ARCH_VAL_MD_OPTION mdOption
where posDetails.source_id = mdOption.INSTRUMENT_ID;

--
-- 175. V_ARCH_RECON  (View) 
--
CREATE OR REPLACE FORCE VIEW V_ARCH_RECON 
(DOMAIN_ID, RECON_NAME, RECON_ID, TABLE_NAME, TRESHOLD, 
 MATCH_LIST_SIZE, STOP_ONCE_FOUND, DETAIL_ID, COLUMN_NAME_SOURCE, VIEW_IN_TRACE_MODE, 
 COMPARING_TYPE, EXP_ID, COLUMN_NAME_TARGET, EXPRESSION, EXPRESSION_TYPE, 
 WEIGHT, METHOD_PATH, METHOD_NAME) AS 
SELECT /*+ ordered USE_MERGE (d) */
  a.domain_id,
  a.recon_name
  , a.recon_id
  , b.table_name
  , b.treshold
  , b.match_list_size
  , b.stop_once_found
  , c.id detail_id
  , c.column_name column_name_source
  , c.view_in_trace_mode
  , c.comparing_type
  , d.id exp_id
  , d.compare_column_name column_name_target
  , d.expression
  , d.expression_type
  , d.weight
  , d.method_path
  , d.method_name
FROM arch_recon_def a
  , arch_recon b
  , arch_recon_detail c
  , arch_recon_exp d
WHERE (a.recon_id = b.id)
  AND (b.id = c.recon_id)
  AND (d.recon_detail_id(+) = c.id)
  AND d.EXPRESSION_TYPE(+) != '0'
ORDER BY detail_id
  , exp_id;

--
-- 176. V_ARCH_REPORT_MONITOR_ADAPTER  (View) 
--
CREATE OR REPLACE FORCE VIEW V_ARCH_REPORT_MONITOR_ADAPTER 
(UUID, TIME, IN_OUT_TIME, ADAPTER_PROCESS, FLOW_PROCESS, 
 DATA) AS 
select A1.UUID, B.TIME, (A2.AUDIT_TIME-A1.AUDIT_TIME) *24*3600,
B.ADAPTER_PROCESS, B.FLOW_PROCESS, B.DATA
from
ARCH_AUDIT A1,
ARCH_AUDIT A2,
ARCH_TRACKING_DATA B
where
A1.AUDIT_TIME >= sysdate-2  /* no need for all the population */
and A1.UUID = A2.UUID
and A1.DIRECTION=1
and A2.DIRECTION=2
and A1.UUID=B.UUID;

--
-- 177. V_ARCH_REPORT_MONITOR_FLOW  (View) 
--
CREATE OR REPLACE FORCE VIEW V_ARCH_REPORT_MONITOR_FLOW 
(UUID, TIME, FLOW_TIME, ADAPTER_PROCESS, FLOW_PROCESS, 
 FLOW_ID, FLOW_NAME, FLOW_TYPE, DATA) AS 
select F1.UUID, F2.END_TIME,(F2.END_TIME-F1.START_TIME)*24*3600 ,
F2.ADAPTER_PROCESS, F2.FLOW_PROCESS,F1.ID, C.NAME, D.DATA,F2.TRACKING_DATA
from
ARCH_FLOW F1,
ARCH_FLOW_ANSWER F2,
ARCH_CODE_MEMBER D,
ARCH_FLOW_DEF C
where
F1.START_TIME >= sysdate-2  /* no need for all the population */
and F1.ID=F2.FLOW_ID
and TO_CHAR(F1.TYPE) = D.CODE_KEY AND D.GROUP_ID=10
and C.ID=F1.FLOW_DEF_ID;

--
-- 178. V_ARCH_VAL_MAR_2_SOURCE_DATA  (View) 
--
CREATE OR REPLACE FORCE VIEW V_ARCH_VAL_MAR_2_SOURCE_DATA 
(MARKET_DATA_ID, SOURCE_DATA_ID, SOURCE_ID, SOURCE_DATA_TYPE_ID) AS 
select
M.MARKET_DATA_ID,
M.SOURCE_DATA_ID,
S.SOURCE_ID,
S.SOURCE_DATA_TYPE_ID
from
ARCH_VAL_MARKET_2_SOURCE_DATA M,
ARCH_VAL_SOURCE_DATA S
where
M.SOURCE_DATA_ID = S.ID;

--
-- 179. V_A_REPORT_COUPLED_ACCOUNTS  (View) 
--
CREATE OR REPLACE FORCE VIEW V_A_REPORT_COUPLED_ACCOUNTS 
(ID, TRIPARTY_BANK, EXTERNAL_REF, USER_COMMENT, VALUE_INSTRUMENT_ID, 
 STATUS, ORG_REL_TYPE_STR, ORG_REL_TYPE, MANAGES_ORG_ID, NAMER_ID, 
 PB_ORG_NAME, AGREEMENT_TYPE) AS 
SELECT  /*+ ordered index(C, A_STATE_DETAIL_PK)*/
DISTINCT A.ID,
(DECODE(R.COUPLED_OWNER_ROLE,
                1000002, DM.EXTERNAL_VALUE,
				200002, DM.EXTERNAL_VALUE,
				NULL))TRIPARTY_BANK,
A.EXTERNAL_REF,
A.USER_COMMENT,
 A.VALUE_INSTRUMENT_ID,
 (B.DATA)STATE_ID,
 (E.DATA)RELATION,
D.RELATION,
D.FROM_OBJECT_ID,
DM.NAMER_ID,
DM_PB.EXTERNAL_VALUE AS PB_ORG_NAME,
AGR_TYPE.DATA
FROM
A_OBJECT_2_OBJECT D,
A_ACCOUNT A,
A_STATE_DETAIL C,
ARCH_CODE_MEMBER B,
ARCH_CODE_MEMBER E,
A_TRIPLE_ACCOUNT R,   -- Triparty Bank
ARCH_DATA_MAPPING DM,
ARCH_DATA_MAPPING DM_PB,
ARCH_CODE_MEMBER AGR_TYPE
WHERE
A.STATE_ID = C.STATE_ID
AND C.STATUS_VALUE <> -1
AND (D.FROM_OBJECT_TYPE = 1000 AND D.TO_OBJECT_TYPE = 2000 AND D.TO_OBJECT_ID = A.ID)
AND TO_CHAR(C.STATUS_VALUE) = B.CODE_KEY
AND B.GROUP_ID IN(6,200006,1000100)
AND TO_CHAR(D.RELATION) = E.CODE_KEY
AND E.CODE_KEY <> '1'
AND E.GROUP_ID=24
-- Triparty Bank
AND R.ACCOUNT_ID = A.ID
AND R.COUPLED_OWNER_ORG_ID = DM.INTERNAL_VALUE
AND DM.MAP_TYPE = 3
AND DM.TYPE = 0
AND DM.STATUS = 1
AND DM.NAMER_ID = 1000000
-- PB Name
AND R.ACCOUNT_ID = A.ID
AND R.PB_ORG_ID = DM_PB.INTERNAL_VALUE
AND DM_PB.MAP_TYPE = 3
AND DM_PB.TYPE = 0
AND DM_PB.STATUS = 1
AND DM_PB.NAMER_ID = 1000000
-- Agreement Type
AND AGR_TYPE.GROUP_ID IN (1032, 1000032)
AND TO_CHAR(A.AGREEMENT_TYPE) = AGR_TYPE.CODE_KEY;

--
-- 180. V_A_REPORT_ORG_ACCOUNTS  (View) 
--
CREATE OR REPLACE FORCE VIEW V_A_REPORT_ORG_ACCOUNTS 
(ID, TRIPARTY_BANK, EXTERNAL_REF, USER_COMMENT, VALUE_INSTRUMENT_ID, 
 STATUS, ORG_REL_TYPE_STR, ORG_REL_TYPE, MANAGES_ORG_ID, NAMER_ID) AS 
SELECT  /*+ ordered index(C, A_STATE_DETAIL_PK)*/
DISTINCT A.ID,
(DECODE(R.COUPLED_OWNER_ROLE,
                1000002, DM.EXTERNAL_VALUE,
				200002, DM.EXTERNAL_VALUE,
				NULL))TRIPARTY_BANK,
A.EXTERNAL_REF,
A.USER_COMMENT,
 A.VALUE_INSTRUMENT_ID,
 (B.DATA)STATE_ID,
 (E.DATA)RELATION,
D.RELATION,
D.FROM_OBJECT_ID,
DM.NAMER_ID
FROM
A_OBJECT_2_OBJECT D,
A_ACCOUNT A,
A_STATE_DETAIL C,
ARCH_CODE_MEMBER B,
ARCH_CODE_MEMBER E,
A_TRIPLE_ACCOUNT R,   -- Triparty Bank
ARCH_DATA_MAPPING DM
WHERE
A.STATE_ID = C.STATE_ID
AND C.STATUS_VALUE <> -1
AND (D.FROM_OBJECT_TYPE = 1000 AND D.TO_OBJECT_TYPE = 2000 AND D.TO_OBJECT_ID = A.ID)
AND TO_CHAR(C.STATUS_VALUE) = B.CODE_KEY
AND B.GROUP_ID IN(6,200006,1000100)
AND TO_CHAR(D.RELATION) = E.CODE_KEY
AND E.GROUP_ID=24
-- Triparty Bank
AND R.ACCOUNT_ID = A.ID
AND R.COUPLED_OWNER_ORG_ID = DM.INTERNAL_VALUE
AND DM.MAP_TYPE = 3 AND DM.TYPE = 0  AND DM.STATUS = 1;

--
-- 181. V_A_REPORT_ORG_FUNDS  (View) 
--
CREATE OR REPLACE FORCE VIEW V_A_REPORT_ORG_FUNDS 
(PARENT_ID, FUND_ID, FUND_NAME, ACC_ID, ACC_NAME, 
 BANK_ID, BANK_NAME) AS 
SELECT parentId, fundId, fundName, accId, accName, bankId, bankName
FROM
(
 	-- all funds with owned accounts
	SELECT parentOrg.ID parentId, fund.id fundId, fund.name fundName, acc.external_ref accName, acc.id accId
	FROM A_ORGANIZATION fund, A_OBJECT_2_OBJECT f2a, A_ACCOUNT acc, A_OBJECT_ROLE ROLE,
	     A_ORGANIZATION parentOrg, A_OBJECT_2_OBJECT o2p,
		 A_STATE_DETAIL state
	WHERE
	-- from parent to org
	    o2p.FROM_OBJECT_TYPE = 1000         AND o2p.TO_OBJECT_TYPE = 1000
	AND o2p.FROM_OBJECT_ID   = parentOrg.ID AND o2p.TO_OBJECT_ID   = fund.ID
	-- org owns account
	AND o2p.RELATION = 1
	-- org roles (fund)
	AND fund.id = ROLE.object_id
	AND ROLE.object_type = 1000
	AND	(ROLE.ROLE = 200003 OR ROLE.ROLE = 1000004)
	-- org(fund) to account
	AND f2a.from_object_type = 1000    AND f2a.to_object_type = 2000
	AND f2a.from_object_id   = fund.id AND f2a.to_object_id   = acc.id
	-- fund owns account
	AND f2a.relation = 1
	-- fund not deleted
	AND fund.STATE_ID = state.STATE_ID AND state.STATUS_VALUE != -1
) funds,
(
    -- all banks with giveup accounts
	SELECT bank.id bankId, bank.name bankName, a2b.to_object_id
	FROM A_ORGANIZATION bank, A_OBJECT_2_OBJECT a2b, A_STATE_DETAIL state
	WHERE
	-- form bank to account
	a2b.from_object_type = 1000 AND a2b.to_object_type = 2000
	AND bank.id = a2b.from_object_id
	-- giveup
	AND a2b.relation = 2
	-- bank not deleted
	AND bank.STATE_ID = state.STATE_ID AND state.STATUS_VALUE != -1
) bank
WHERE funds.accId = bank.to_object_id (+)
ORDER BY fundName;

--
-- 182. V_FXPB_ALLOC_STALE_NOE  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_ALLOC_STALE_NOE 
(ID, CREATION_DATE, ENTERING_ORG_ID, SETTLEMENT_DATE, SUBMITTER_PERSON_ID, 
 TRADE_DATE, RATE, SIDE_A_ORG_ID, SIDE_B_ORG_ID, TRADER_ID, 
 U_FAR_RATE, BASE_INSTRUMENT_ID, SECONDARY_INSTRUMENT_ID, CONTRACT_TYPE, DIRECTION, 
 QUANTITY, QUANTITY2, VALUE_DATE, FAR_QUANTITY, FAR_QUANTITY2, 
 FAR_VALUE_DATE, REPORTER, TRADE_TYPE, LIFE_STATUS, ALLOC_STATUS, 
 TIME_OUT) AS 
SELECT
 A.ID,
 A.CREATION_DATE,
 A.ENTERING_ORG_ID,
 A.SETTLEMENT_DATE,
 A.SUBMITTER_PERSON_ID,
 A.TRADE_DATE,
 A.RATE,
 A.SIDE_A_ORG_ID,
 A.SIDE_B_ORG_ID,
 A.TRADER_ID,
 A.U_FAR_RATE,
 A.BASE_INSTRUMENT_ID,
 A.SECONDARY_INSTRUMENT_ID,
 A.CONTRACT_TYPE,
 A.DIRECTION,
 A.QUANTITY,
 A.QUANTITY2,
 A.VALUE_DATE,
 A.FAR_QUANTITY,
 A.FAR_QUANTITY2,
 A.FAR_VALUE_DATE,
 A.REPORTER,
 A.TRADE_TYPE,
 A.LIFE_STATUS,
 A.ALLOC_STATUS,
 O.VALUE
FROM
	FXPB_NOE A,
	ARCH_OBJECT_PROPS O
WHERE
	 A.ALLOC_STATUS = 1 -- unallocated
	 AND A.LIFE_STATUS In (2,4) -- noe active or done
	 AND A.SIDE_A_ORG_ID = O.OBJECT_ID(+)
	 AND (
            O.OBJECT_ID is null
			OR ( O.CODE_ID = 1000002 -- alloc timeout
				 AND A.CREATION_DATE < SYSDATE - (to_number(O.VALUE)) / 1440 -- convert to days
				)
         );

--
-- 183. V_FXPB_ARCH_COUPLED_ACCOUNT  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_ARCH_COUPLED_ACCOUNT 
(PB_ID, PB_NAME, COUPLED_OWNER_ID, COUPLED_OWNER_NAME, COUPLED_ID, 
 COUPLED_NAME, ACCOUNT_ID) AS 
SELECT
	   PB1.FROM_OBJECT_ID,
	   PB2.EXTERNAL_VALUE,
	   BK1.FROM_OBJECT_ID,
	   BK2.EXTERNAL_VALUE,
	   CL1.FROM_OBJECT_ID,
	   CL2.EXTERNAL_VALUE,
	   BK1.TO_OBJECT_ID
FROM
	A_OBJECT_2_OBJECT BK1, -- Bank to account
	A_OBJECT_2_OBJECT CL1, -- Client to account
	A_OBJECT_2_OBJECT PB1, -- PB ro account
	ARCH_DATA_MAPPING BK2,
	ARCH_DATA_MAPPING CL2,
	ARCH_DATA_MAPPING PB2
WHERE
	  BK1.FROM_OBJECT_TYPE = 1000 -- org
	  AND BK1.TO_OBJECT_TYPE = 2000 -- account
	  AND BK1.RELATION = 5 -- coupled owner
	  AND CL1.FROM_OBJECT_TYPE = 1000 -- org
	  AND CL1.TO_OBJECT_TYPE = 2000 -- account
	  AND CL1.RELATION = 3 -- coupled
	  AND PB1.FROM_OBJECT_TYPE = 1000 -- org
	  AND PB1.TO_OBJECT_TYPE = 2000 -- account
	  AND PB1.RELATION = 4 --  PB
	  AND BK1.TO_OBJECT_ID = CL1.TO_OBJECT_ID
	  AND PB1.TO_OBJECT_ID = CL1.TO_OBJECT_ID
	  AND BK1.TO_OBJECT_ID = PB1.TO_OBJECT_ID
	  AND BK2.INTERNAL_VALUE =  BK1.FROM_OBJECT_ID
	  AND CL2.INTERNAL_VALUE = CL1.FROM_OBJECT_ID
	  AND PB2.INTERNAL_VALUE =  PB1.FROM_OBJECT_ID
	  AND BK2.MAP_TYPE=3 AND BK2.TYPE=0
	  AND CL2.MAP_TYPE=3 AND CL2.TYPE=0
	  AND PB2.MAP_TYPE=3 AND PB2.TYPE=0
	  AND BK2.NAMER_ID = 1000000
  	  AND CL2.NAMER_ID = 1000000
  	  AND PB2.NAMER_ID = 1000000;

--
-- 184. V_FXPB_CUT_OFF_TIMES_USAGE  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_CUT_OFF_TIMES_USAGE 
(CUT_OFF_TIME, CUT_OFF_ZONE, STATUS, SETTLEMENT_DATE) AS 
SELECT
	OPTION_NOE.EXPIRY_TIME,
        OPTION_NOE.CUT_OFF_ZONE,
	OPTION_TRADE.OPTION_STATUS,
	OPTION_TRADE.SETTLEMENT_DATE
FROM
	FXPB_OPTION_NOE OPTION_NOE,
	FXPB_OPTION_TRADE OPTION_TRADE
WHERE
 	OPTION_NOE.ID = OPTION_TRADE.TRADING_ACTIVITY_SIDE_A
	AND OPTION_TRADE.OPTION_STATUS = 1
	AND OPTION_TRADE.SETTLEMENT_DATE >= SYSDATE;

--
-- 185. V_FXPB_DEFAULT_CCY_PAIRS  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_DEFAULT_CCY_PAIRS 
(CCY1_ID, CCY1_NAME, CCY2_ID, CCY2_NAME, CCY_PAIR_NAME, 
 RATE_DIRECTION) AS 
SELECT
   A.FIRST_CCY_ID,
   C1.NAME,
   A.SECOND_CCY_ID,
   C2.NAME,
   B.CCY_PAIR,
   A.RATE_DIRECTION
FROM
ARCH_BILLING_CCY_PAIR A,
FXPB_DEFAULT_CCY_PAIRS B,
A_INSTRUMENT C1,
A_INSTRUMENT C2
WHERE
	 A.CCY_PAIR = B.CCY_PAIR
	 AND C1.TYPE = 5006
	 AND C1.ID = A.FIRST_CCY_ID
	 AND C2.TYPE = 5006
	 AND C2.ID = A.SECOND_CCY_ID;

--
-- 186. V_FXPB_FLOW_MONITOR_SERVICE  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_FLOW_MONITOR_SERVICE 
(ID, FLOW_ID, FLOW_NAME, UUID, START_TIME, 
 END_TIME, FLOW_TYPE, FLOW_MODE, ANSWER, MESSAGE) AS 
SELECT A.ID, C.ID, C.NAME, A.UUID, A.START_TIME, B.END_TIME, A.TYPE, C.FLOW_MODE, B.ANSWER, B.MSG
FROM ARCH_FLOW A, ARCH_FLOW_ANSWER B, ARCH_FLOW_DEF C
WHERE A.ID = B.FLOW_ID and A.FLOW_DEF_ID=C.ID;

--
-- 187. V_FXPB_INTERNAL_LOG  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_INTERNAL_LOG 
(MSG_ID, MESSAGE, LOG_MSG_DEVISION, LANG) AS 
select
   MSG_ID, MESSAGE, LOG_MSG_DEVISION, LANG
from
	ARCH_LOG_MESSAGES
where
	  MSG_ID > 1000000 and --  range of FXPB
	  MSG_ID < 2000000;

--
-- 188. V_FXPB_ORG_ROLE_2_EVENT  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_ORG_ROLE_2_EVENT 
(ORG_ROLE_ID, EVENT_ID, EVENT_NAME) AS 
SELECT A.ORG_ROLE_ID , A.EVENT_ID ,B.NAME
FROM
FXPB_ORG_ROLE_2_EVENT A,
ARCH_EVENT B
WHERE
A.EVENT_ID = B.ID;

--
-- 189. V_FXPB_RECON_NOE  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_RECON_NOE 
(ID, CREATION_DATE, ENTERING_ORG_ID, SETTLEMENT_DATE, SUBMITTER_PERSON_ID, 
 TRADE_DATE, RATE, SIDE_A_ORG_ID, SIDE_B_ORG_ID, TRADER_ID, 
 U_FAR_RATE, BASE_INSTRUMENT_ID, SECONDARY_INSTRUMENT_ID, CONTRACT_TYPE, DIRECTION, 
 QUANTITY, QUANTITY2, VALUE_DATE, FAR_QUANTITY, FAR_QUANTITY2, 
 FAR_VALUE_DATE, REPORTER, TRADE_TYPE, RECON_STATUS, LIFE_STATUS) AS 
SELECT
 A.ID,
 A.CREATION_DATE,
 A.ENTERING_ORG_ID,
 A.SETTLEMENT_DATE,
 A.SUBMITTER_PERSON_ID,
 A.TRADE_DATE,
 A.RATE,
 A.SIDE_A_ORG_ID,
 A.SIDE_B_ORG_ID,
 A.TRADER_ID,
 A.U_FAR_RATE,
 A.BASE_INSTRUMENT_ID,
 A.SECONDARY_INSTRUMENT_ID,
 A.CONTRACT_TYPE,
 A.DIRECTION,
 A.QUANTITY,
 A.QUANTITY2,
 A.VALUE_DATE,
 A.FAR_QUANTITY,
 A.FAR_QUANTITY2,
 A.FAR_VALUE_DATE,
 A.REPORTER,
 A.TRADE_TYPE,
 A.RECON_STATUS,
 A.LIFE_STATUS
FROM
	 FXPB_NOE A
WHERE
	  A.RECON_STATUS <> 1 -- recon matched
	  AND A.LIFE_STATUS in (2,1) -- noe active or draft;

--
-- 190. V_FXPB_RECON_OPTION_NOE  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_RECON_OPTION_NOE 
(ID, CREATION_DATE, ENTERING_ORG_ID, SUBMITTER_PERSON_ID, TRADER_ID, 
 REPORTER, TRADE_TYPE, RECON_STATUS, LIFE_STATUS, TRADE_DATE, 
 SIDE_A_ORG_ID, SIDE_B_ORG_ID, BASE_INSTRUMENT_ID, SECONDARY_INSTRUMENT_ID, QUANTITY, 
 QUANTITY2, DIRECTION, VALUE_DATE, EXPIRY_DATE, STRIKE, 
 STRIKE_QUOTE_MODE, BARRIER_LEVEL, BARRIER_TYPE, LOWER_BARRIER_LEVEL, UPPER_BARRIER_LEVEL, 
 REBATE_QUOTE_MODE, REBATE_PERCENT_1, REBATE_PERCENT_2, REBATE_TYPE, PAYOUT_CURRENCY, 
 PAYOUT_AMOUNT, PREMIUM_AMOUNT, PREMIUM_DATE, PREMIUM_CCY, PREMIUM_TYPE, 
 OPTION_STYLE, CONTRACT_TYPE, OPTION_TYPE, EXPIRY_TIME, CUT_OFF_ZONE, 
 PB_ID, DELIVERY_METHOD) AS 
SELECT
 A.ID,
 A.CREATION_DATE,
 A.ENTERING_ORG_ID,
 A.SUBMITTER_PERSON_ID,
 A.TRADER_ID,
 A.REPORTER,
 A.TRADE_TYPE,
 A.RECON_STATUS,
 A.LIFE_STATUS,
 A.TRADE_DATE,
 A.SIDE_A_ORG_ID,
 A.SIDE_B_ORG_ID,
 A.BASE_INSTRUMENT_ID,
 A.SECONDARY_INSTRUMENT_ID,
 A.QUANTITY,
 A.QUANTITY2,
 A.DIRECTION,
 A.VALUE_DATE,
 A.EXPIRY_DATE,
 A.RATE,
 A.STRIKE_QUOTE_MODE,
 A.BARRIER_LEVEL,
 A.BARRIER_TYPE,
 A.LOWER_BARRIER_LEVEL,
 A.UPPER_BARRIER_LEVEL,
 A.REBATE_QUOTE_MODE,
 A.REBATE_PERCENT_1,
 A.REBATE_PERCENT_2,
 A.REBATE_TYPE,
 A.PAYOUT_CURRENCY,
 A.PAYOUT_AMOUNT,
 A.PREMIUM_AMOUNT,
 A.PREMIUM_DATE,
 A.PREMIUM_CCY,
 A.PREMIUM_TYPE,
 A.OPTION_STYLE,
 A.CONTRACT_TYPE,
 A.OPTION_TYPE,
 A.EXPIRY_TIME,
 A.CUT_OFF_ZONE,
 A.PB_ID,
 A.DELIVERY_METHOD
FROM
	 FXPB_OPTION_NOE A
WHERE
	  A.RECON_STATUS <> 1 -- recon matched
	  AND A.LIFE_STATUS IN (2,1) -- noe active or draft;

--
-- 191. V_FXPB_RECON_STALE_NOE  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_RECON_STALE_NOE 
(ID, CREATION_DATE, ENTERING_ORG_ID, SETTLEMENT_DATE, SUBMITTER_PERSON_ID, 
 TRADE_DATE, RATE, SIDE_A_ORG_ID, SIDE_B_ORG_ID, TRADER_ID, 
 U_FAR_RATE, BASE_INSTRUMENT_ID, SECONDARY_INSTRUMENT_ID, CONTRACT_TYPE, DIRECTION, 
 QUANTITY, QUANTITY2, VALUE_DATE, FAR_QUANTITY, FAR_QUANTITY2, 
 FAR_VALUE_DATE, REPORTER, TRADE_TYPE, LIFE_STATUS, RECON_STATUS, 
 TIME_OUT) AS 
SELECT
 A.ID,
 A.CREATION_DATE,
 A.ENTERING_ORG_ID,
 A.SETTLEMENT_DATE,
 A.SUBMITTER_PERSON_ID,
 A.TRADE_DATE,
 A.RATE,
 A.SIDE_A_ORG_ID,
 A.SIDE_B_ORG_ID,
 A.TRADER_ID,
 A.U_FAR_RATE,
 A.BASE_INSTRUMENT_ID,
 A.SECONDARY_INSTRUMENT_ID,
 A.CONTRACT_TYPE,
 A.DIRECTION,
 A.QUANTITY,
 A.QUANTITY2,
 A.VALUE_DATE,
 A.FAR_QUANTITY,
 A.FAR_QUANTITY2,
 A.FAR_VALUE_DATE,
 A.REPORTER,
 A.TRADE_TYPE,
 A.LIFE_STATUS,
 A.RECON_STATUS,
 O.VALUE
 FROM
	FXPB_NOE A,
	ARCH_OBJECT_PROPS O
WHERE
	 A.RECON_STATUS = 2 -- unmatched
	 AND A.LIFE_STATUS = 2 -- noe active
	 AND A.SIDE_A_ORG_ID = O.OBJECT_ID(+)
	 AND (
            O.OBJECT_ID is null
			OR ( O.CODE_ID = 1000001 -- recon timeout
				 AND A.CREATION_DATE < SYSDATE - (to_number(O.VALUE)) / 1440 -- convert to days
				)
         );

--
-- 192. V_FXPB_REPORT_BILLING  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_BILLING 
(TRADE_ID, DIRECTION, QUANTITY, CCY1, CCY2, 
 CALCULATED_FEE, BILLING_TYPE, TRADE_DATE, CLIENT, FUND, 
 IS_FUND, PARENT_BILLING_ID) AS 
SELECT /*+ ORDERED */
	T.ID, -- trade id
	CASE WHEN T.BILLING_DATA_ID2 != 0 THEN (CASE WHEN BD1.DIRECTION = 'S' THEN 'S/B' ELSE 'B/S' END) ELSE BD1.DIRECTION   END, -- direction
	T.QUANTITY + T.FAR_QUANTITY, --qty
	CCY1.NAME, --CCY1
	CCY2.NAME, --CCY2
	--FEE
	BD1.BILLING_FEE + CASE WHEN BD2.BILLING_FEE IS NULL THEN 0 ELSE BD2.BILLING_FEE END,--CALCULATED_FEE
	BD1.BILLING_TYPE,  --BILLING_TYPE
	T.TRADE_DATE, --TRADE_DATE
	C.EXTERNAL_VALUE,--CLIENT
	CASE WHEN F.MAP_TYPE =7 THEN F.EXTERNAL_VALUE ELSE '' END, --FUND
	CASE WHEN F.MAP_TYPE =7 THEN 1 ELSE 0 END,
	BD1.PERENT_BILLING_ID
FROM
ARCH_DATA_MAPPING C,
	FXPB_TRADE T,
	ARCH_BILLING_DATA BD1,
	ARCH_BILLING_DATA BD2,
	A_INSTRUMENT CCY1,
	A_INSTRUMENT CCY2,
	ARCH_DATA_MAPPING F
WHERE
	T.BILLING_DATA_ID1 = BD1.ID
	AND T.LIFE_STATUS <> 4 -- no deleted trades
	AND T.BILLING_DATA_ID2 = BD2.ID(+)
	AND F.NAMER_ID=1000000 AND F.STATUS=1 AND F.TYPE=0
	AND C.MAP_TYPE=3 -- organization
	AND C.NAMER_ID=1000000 AND C.STATUS=1 AND C.TYPE=0
	AND
	(
  	    (
			(
			    (T.ROLE_A = 1000003 AND F.MAP_TYPE=3) -- client
				OR (T.ROLE_A = 1000004 AND F.MAP_TYPE=7) -- fund
			)
			AND T.SIDE_A_ORG_ID=F.INTERNAL_VALUE
			AND T.SIDE_A_MANAGER_ID=C.INTERNAL_VALUE
		)
		OR
		(
		    (
		        (T.ROLE_B = 1000003 AND F.MAP_TYPE=3) -- client
				OR  (T.ROLE_B = 1000004 AND F.MAP_TYPE=7) -- fund
			)
 			AND T.SIDE_B_ORG_ID=F.INTERNAL_VALUE
			AND T.SIDE_B_MANAGER_ID=C.INTERNAL_VALUE
		)
	)
	AND CCY1.TYPE= 5006 AND CCY2.TYPE= 5006 --ccy
	AND BD1.SECONDERY_INSTRUMENT_ID = CCY1.ID
	AND BD1.BASE_INSTRUMENT_ID = CCY2.ID;

--
-- 193. V_FXPB_REPORT_CT  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_CT 
(TRADE_GROUP, TRADE_ID, SIDE_A_MANAGER, SIDE_B_MANAGER, SIDE_A, 
 SIDE_B, SIDE_A_NOE_ID, SIDE_B_NOE_ID, CURRENCY1, QUANTITY1, 
 CURRENCY2, NEAR_QUANTITY, NEAR_DATE, NEAR_RATE, FAR_QUANTITY, 
 FAR_QUANTITY2, FAR_DATE, FAR_RATE, TIME, LIFE_STATUS, 
 BOR_STATUS, TRADE_TYPE, AGREEMENT, SPOT_RATE, FORWARD_POINTS, 
 TRADER_MARKUP, FORWARD_MARKUP, FAR_SPOT_RATE, FAR_FORWARD_POINTS, FAR_TRADER_MARKUP, 
 FAR_FORWARD_MARKUP, CONTRACT_NUMBER, FAR_CONTRACT_NUMBER) AS 
SELECT
/*+ first_rows */
	  TG.ID, -- tg id
	  TRADE.ID, -- trade id
	  M3.EXTERNAL_VALUE,
	  M4.EXTERNAL_VALUE,
--	  TRADE.SIDE_B_MANAGER_ID,
--	  TRADE.SIDE_A_MANAGER_ID,
	  M2.EXTERNAL_VALUE,
	  M1.EXTERNAL_VALUE,
	  TRADE.TRADING_ACTIVITY_SIDE_A, -- sell  NOE    (swaped)
	  TRADE.TRADING_ACTIVITY_SIDE_B, -- buyer NOE    (swaped)
	  I2.NAME, -- secondary ccy
	  TRADE.QUANTITY,
	  I1.NAME, -- base ccy
	  TRADE.QUANTITY2,
	  NOE.VALUE_DATE,
	  TRADE.RATE,
	  TRADE.FAR_QUANTITY,
	  TRADE.FAR_QUANTITY2,
	  NOE.FAR_VALUE_DATE,
	  TRADE.U_FAR_RATE,
	  TRADE.TRADE_DATE,
	  (C_TR_LG.DATA)STATUS_TR,
	  (C_TR_BOR.DATA)STATUS_BOR,
	  C.DATA,
	  C_AGREEMENT.DATA,
  NOE.SPOT_RATE,
  NOE.FORWARD_POINTS,
  NOE.TRADER_MARKUP,
  NOE.FORWARD_MARKUP,
  NOE.FAR_SPOT_RATE,
  NOE.FAR_FORWARD_POINTS,
  NOE.FAR_TRADER_MARKUP,
  NOE.FAR_FORWARD_MARKUP,
  TRADE.CONTRACT_NUMBER,
  TRADE.FAR_CONTRACT_NUMBER
FROM
		FXPB_TRADE  TG,--TRADE GROUP
		FXPB_TRADE  TRADE,--TRADE
		A_TA_TA_REL B,
		FXPB_NOE NOE,
		ARCH_DATA_MAPPING M1, -- buyer da
		ARCH_DATA_MAPPING M2, -- seller da
		ARCH_DATA_MAPPING M3, -- side a manager
		ARCH_DATA_MAPPING M4, -- side b manager
		A_INSTRUMENT I1, -- base currency
		A_INSTRUMENT I2, -- secondary currency
		ARCH_CODE_MEMBER C_TR_LG, -- lifecycle status
		ARCH_CODE_MEMBER C_TR_BOR, -- BOR status
		ARCH_CODE_MEMBER C, -- trade type
		ARCH_CODE_MEMBER C_AGREEMENT -- trade type
WHERE
TG.TYPE = 4006
AND	 B.PARENT_TA_ID = TG.ID
AND B.RELATION = 4
AND B.CHILD_TA_ID = TRADE.ID--GET CHILD TA
AND NOE.ID = TRADE.TRADING_ACTIVITY_SIDE_A
 --  base currency
 AND NOE.BASE_INSTRUMENT_ID=I1.ID
 AND I1.TYPE = 5006 -- currency
 --  secondary currency
 AND NOE.SECONDARY_INSTRUMENT_ID=I2.ID
 AND I2.TYPE = 5006 -- currency
 -- life status
 AND C_TR_LG.CODE_KEY = TO_CHAR(TRADE.LIFE_STATUS)
 AND C_TR_LG.GROUP_ID = 1001018
 -- BOR status
 AND C_TR_BOR.CODE_KEY = TO_CHAR(TRADE.BOR_STATUS)
 AND C_TR_BOR.GROUP_ID = 1001019
  --trade type
  AND C.CODE_KEY=  TO_CHAR(NOE.TRADE_TYPE)
  AND C.GROUP_ID=1000024
 -- side a mapping
 AND TRADE.SIDE_B_ORG_ID=M1.INTERNAL_VALUE
 AND M1.MAP_TYPE IN (3,7) -- organization  or fund
 AND M1.NAMER_ID=1000000
 AND M1.STATUS=1
 AND M1.TYPE=0
 -- side b mapping
 AND TRADE.SIDE_A_ORG_ID=M2.INTERNAL_VALUE
 AND M2.MAP_TYPE IN (3,7) -- organization  or fund
 AND M2.NAMER_ID=1000000
 AND M2.STATUS=1
 AND M2.TYPE=0
  -- side a manager
 AND TRADE.SIDE_A_MANAGER_ID=M3.INTERNAL_VALUE
 AND M3.MAP_TYPE = 3
 AND M3.NAMER_ID=1000000
 AND M3.STATUS=1
 AND M3.TYPE=0
  -- side b manager
 AND TRADE.SIDE_b_MANAGER_ID=M4.INTERNAL_VALUE
 AND M4.MAP_TYPE = 3
 AND M4.NAMER_ID=1000000
 AND M4.STATUS=1
 AND M4.TYPE=0
 -- Agreement
 AND C_AGREEMENT.CODE_KEY = TO_CHAR(NOE.AGREEMENT)
 AND C_AGREEMENT.GROUP_ID = 1000032;

--
-- 194. V_FXPB_REPORT_EOD_CT_RECON  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_EOD_CT_RECON 
(TRADE_GROUP, CREATION_DATE, PB_ROLE, TRADE_ID, SIDE_A_MANAGER, 
 SIDE_A_MANAGER_ID, SIDE_B_MANAGER, SIDE_B_MANAGER_ID, SIDE_A, SIDE_A_ID, 
 SIDE_B, SIDE_B_ID, SIDE_A_NOE_ID, SIDE_B_NOE_ID, CURRENCY1, 
 QUANTITY1, CURRENCY2, NEAR_QUANTITY, NEAR_DATE, NEAR_RATE, 
 FAR_QUANTITY, FAR_QUANTITY2, FAR_DATE, FAR_RATE, TIME, 
 LIFE_STATUS, BOR_STATUS, TRADE_TYPE, AGREEMENT, SPOT_RATE, 
 FORWARD_POINTS, TRADER_MARKUP, FORWARD_MARKUP, FAR_SPOT_RATE, FAR_FORWARD_POINTS, 
 FAR_TRADER_MARKUP, FAR_FORWARD_MARKUP, CONTRACT_NUMBER, FAR_CONTRACT_NUMBER) AS 
SELECT
/*+ first_rows */
	  TG.ID, -- tg id
	  TO_DATE(TO_CHAR(TRADE.CREATION_DATE,'DD/MM/YYYY'),'DD/MM/YYYY'),
	  CASE WHEN TRADE.SIDE_A_ORG_ID = 1000000 THEN 'SELL' ELSE 'BUY' END,
	  TRADE.ID, -- trade id
	  M3.EXTERNAL_VALUE,
	  TRADE.SIDE_A_MANAGER_ID,
	  M4.EXTERNAL_VALUE,
	   TRADE.SIDE_B_MANAGER_ID,
--	  TRADE.SIDE_B_MANAGER_ID,
--	  TRADE.SIDE_A_MANAGER_ID,
	  M2.EXTERNAL_VALUE,
	  TRADE.SIDE_A_ORG_ID,
	  M1.EXTERNAL_VALUE,
	  TRADE.SIDE_B_ORG_ID,
	  TRADE.TRADING_ACTIVITY_SIDE_A, -- sell  NOE    (swaped)
	  TRADE.TRADING_ACTIVITY_SIDE_B, -- buyer NOE    (swaped)
	  I2.NAME, -- secondary ccy
	  TRADE.QUANTITY,
	  I1.NAME, -- base ccy
	  TRADE.QUANTITY2,
	  NOE.VALUE_DATE,
	  TRADE.RATE,
	  TRADE.FAR_QUANTITY,
	  TRADE.FAR_QUANTITY2,
	  NOE.FAR_VALUE_DATE,
	  TRADE.U_FAR_RATE,
	  TRADE.TRADE_DATE,
	  (C_TR_LG.DATA)STATUS_TR,
	  (C_TR_BOR.DATA)STATUS_BOR,
	  C.DATA,
	  C_AGREEMENT.DATA,
  NOE.SPOT_RATE,
  NOE.FORWARD_POINTS,
  NOE.TRADER_MARKUP,
  NOE.FORWARD_MARKUP,
  NOE.FAR_SPOT_RATE,
  NOE.FAR_FORWARD_POINTS,
  NOE.FAR_TRADER_MARKUP,
  NOE.FAR_FORWARD_MARKUP,
  TRADE.CONTRACT_NUMBER,
  TRADE.FAR_CONTRACT_NUMBER
FROM
		FXPB_TRADE  TG,--TRADE GROUP
		FXPB_TRADE  TRADE,--TRADE
		A_TA_TA_REL B,
		FXPB_NOE NOE,
		ARCH_DATA_MAPPING M1, -- buyer da
		ARCH_DATA_MAPPING M2, -- seller da
		ARCH_DATA_MAPPING M3, -- side a manager
		ARCH_DATA_MAPPING M4, -- side b manager
		A_INSTRUMENT I1, -- base currency
		A_INSTRUMENT I2, -- secondary currency
		ARCH_CODE_MEMBER C_TR_LG, -- lifecycle status
		ARCH_CODE_MEMBER C_TR_BOR, -- BOR status
		ARCH_CODE_MEMBER C, -- trade type
		ARCH_CODE_MEMBER C_AGREEMENT -- trade type
WHERE
TG.TYPE = 4006
AND	 B.PARENT_TA_ID = TG.ID
AND B.RELATION = 4
AND B.CHILD_TA_ID = TRADE.ID--GET CHILD TA
AND NOE.ID = TRADE.TRADING_ACTIVITY_SIDE_A
 --  base currency
 AND NOE.BASE_INSTRUMENT_ID=I1.ID
 AND I1.TYPE = 5006 -- currency
 --  secondary currency
 AND NOE.SECONDARY_INSTRUMENT_ID=I2.ID
 AND I2.TYPE = 5006 -- currency
 -- life status
 AND TRADE.LIFE_STATUS = 2
 AND C_TR_LG.CODE_KEY = TO_CHAR(TRADE.LIFE_STATUS)
 AND C_TR_LG.GROUP_ID = 1001018
 -- BOR status
AND TRADE.BOR_STATUS = 2
 AND C_TR_BOR.CODE_KEY = TO_CHAR(TRADE.BOR_STATUS)
 AND C_TR_BOR.GROUP_ID = 1001019
  --trade type
  AND C.CODE_KEY=  TO_CHAR(NOE.TRADE_TYPE)
  AND C.GROUP_ID=1000024
 -- side a mapping
 AND TRADE.SIDE_B_ORG_ID=M1.INTERNAL_VALUE
 AND M1.MAP_TYPE IN (3,7) -- organization  or fund
 AND M1.NAMER_ID=1000000
 AND M1.STATUS=1
 AND M1.TYPE=0
 -- side b mapping
 AND TRADE.SIDE_A_ORG_ID=M2.INTERNAL_VALUE
 AND M2.MAP_TYPE IN (3,7) -- organization  or fund
 AND M2.NAMER_ID=1000000
 AND M2.STATUS=1
 AND M2.TYPE=0
  -- side a manager
 AND TRADE.SIDE_A_MANAGER_ID=M3.INTERNAL_VALUE
 AND M3.MAP_TYPE = 3
 AND M3.NAMER_ID=1000000
 AND M3.STATUS=1
 AND M3.TYPE=0
  -- side b manager
 AND TRADE.SIDE_b_MANAGER_ID=M4.INTERNAL_VALUE
 AND M4.MAP_TYPE = 3
 AND M4.NAMER_ID=1000000
 AND M4.STATUS=1
 AND M4.TYPE=0
 -- Agreement
 AND C_AGREEMENT.CODE_KEY = TO_CHAR(NOE.AGREEMENT)
 AND C_AGREEMENT.GROUP_ID = 1000032;

--
-- 195. V_FXPB_REPORT_EOD_NOE_DIRECT  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_EOD_NOE_DIRECT 
(ID, CLIENT_REF, APPROVAL, APPR_REASON, RECON, 
 ALLOC, LIFECYCLE, CREATION_DATE, ENTERING_ORG, SETTLEMENT_DATE, 
 SUBMITTER_PERSON, TRADE_DATE, RATE, SIDE_A, SIDE_A_ORG_ID, 
 SIDE_B, SIDE_B_ORG_ID, TRADER, U_FAR_RATE, BASE_CCY, 
 SECONDARY_CCY, CONTRACT_TYPE, DIRECTION, QUANTITY, QUANTITY2, 
 VALUE_DATE, FAR_QUANTITY, FAR_QUANTITY2, FAR_VALUE_DATE, REPORTER, 
 TRADE_TYPE, NEW_NOE, OLD_NOE, IS_DUMMY, AGREEMENT, 
 SPOT_RATE, FORWARD_POINTS, TRADER_MARKUP, FORWARD_MARKUP, FAR_SPOT_RATE, 
 FAR_FORWARD_POINTS, FAR_TRADER_MARKUP, FAR_FORWARD_MARKUP, TP_ROLE) AS 
SELECT  /*+ ordered */
 NOE.ID,
 NOE.EXTERNAL_REF,
 C_APPR.DATA,
 (NOE.APPROVE_STATUS_REASON)APPR_REASON,
 C_RECON.DATA,
 C_ALLOC.DATA,
 C_LIFE.DATA,
 TO_DATE(TO_CHAR( NOE.CREATION_DATE,'DD/MM/YYYY'),'DD/MM/YYYY'),
 I.EXTERNAL_VALUE,
 NOE.SETTLEMENT_DATE,
 D.EXTERNAL_VALUE,
 NOE.TRADE_DATE,
 NOE.RATE,
 E.EXTERNAL_VALUE,
 NOE.SIDE_A_ORG_ID,
 F.EXTERNAL_VALUE,
 NOE.SIDE_B_ORG_ID,
 J.FIRST_NAME||' '||J.LAST_NAME,
 NOE.U_FAR_RATE,
 G.NAME,
 H.NAME,
 C1.DATA,
 C2.DATA,
 NOE.QUANTITY,
 NOE.QUANTITY2,
 NOE.VALUE_DATE,
 NOE.FAR_QUANTITY,
 NOE.FAR_QUANTITY2,
 NOE.FAR_VALUE_DATE,
 NOE.REPORTER,
C3.DATA,
NOE.NEW_ID,
NOE.OLD_ID,
case when NOE.IS_DUMMY = 1 then 'true' else 'false' end,
C_AGREEMENT.DATA,
  NOE.SPOT_RATE,
  NOE.FORWARD_POINTS,
  NOE.TRADER_MARKUP,
  NOE.FORWARD_MARKUP,
  NOE.FAR_SPOT_RATE,
  NOE.FAR_FORWARD_POINTS,
  NOE.FAR_TRADER_MARKUP,
  NOE.FAR_FORWARD_MARKUP,
 (CASE WHEN TP_ROLE.ROLE = '1000002' THEN 'bank' ELSE 'client' END) TP_ROLE
FROM
FXPB_NOE NOE,
ARCH_DATA_MAPPING D, -- submitter
ARCH_DATA_MAPPING E, -- side a
ARCH_DATA_MAPPING F, -- side  b
A_INSTRUMENT G, -- base currency
A_INSTRUMENT H, -- secondary currency
ARCH_DATA_MAPPING I, --  entering org
A_PERSON J, --  trader (optional)
ARCH_CODE_MEMBER C1, -- contract type
ARCH_CODE_MEMBER C2, -- direction
ARCH_CODE_MEMBER C3, -- trade type
ARCH_CODE_MEMBER C_APPR, -- approval status
ARCH_CODE_MEMBER C_RECON, -- reconstatus
ARCH_CODE_MEMBER C_ALLOC, -- alloc status
ARCH_CODE_MEMBER C_LIFE, -- lifecycle status
ARCH_CODE_MEMBER C_AGREEMENT, --  Agreement
A_ORGANIZATION TP,
A_OBJECT_ROLE TP_ROLE
WHERE
 NOE.SUBMITTER_PERSON_ID = D.INTERNAL_VALUE
 AND D.MAP_TYPE=4 -- person
 AND D.NAMER_ID=1000000
 AND D.STATUS=1
 AND D.TYPE=0
 -- side a mapping
 AND NOE.SIDE_A_ORG_ID=E.INTERNAL_VALUE
 AND E.MAP_TYPE=3 -- organization
 AND E.NAMER_ID=1000000
 AND E.STATUS=1
 AND E.TYPE=0
 -- side b mapping
 AND NOE.SIDE_B_ORG_ID=F.INTERNAL_VALUE
 AND F.MAP_TYPE=3 -- organization
 AND F.NAMER_ID=1000000
 AND F.STATUS=1
 AND F.TYPE=0
 --  base currency
 AND NOE.BASE_INSTRUMENT_ID=G.ID
 AND G.TYPE = 5006 -- currency
 --  secondary currency
 AND NOE.SECONDARY_INSTRUMENT_ID=H.ID
 AND H.TYPE = 5006 -- currency
 -- entering org mapping
 AND  NOE.ENTERING_ORG_ID=I.INTERNAL_VALUE
 AND I.MAP_TYPE=3 -- organization
 AND I.NAMER_ID=1000000
 AND I.STATUS=1
 AND I.TYPE=0
 -- optional trader
 AND NOE.TRADER_ID = J.ID(+)
 --contract type
  AND C1.CODE_KEY= TO_CHAR(NOE.CONTRACT_TYPE)
  AND C1.GROUP_ID=1000022
  --direction
  AND C2.CODE_KEY=  TO_CHAR(NOE.DIRECTION)
  AND C2.GROUP_ID=1000021
  --trade type
  AND C3.CODE_KEY=  TO_CHAR(NOE.TRADE_TYPE)
  AND C3.GROUP_ID=1000024
  -- approval status
  AND C_APPR.CODE_KEY = TO_CHAR(NOE.APPROVE_STATUS)
  AND C_APPR.GROUP_ID = 1001011
  -- recon status
  AND C_RECON.CODE_KEY = TO_CHAR(NOE.RECON_STATUS)
  AND C_RECON.GROUP_ID = 1001012
  -- alloc status
  AND C_ALLOC.CODE_KEY = TO_CHAR(NOE.ALLOC_STATUS)
  AND C_ALLOC.GROUP_ID = 1001013
  -- life status
  AND C_LIFE.CODE_KEY = TO_CHAR(NOE.LIFE_STATUS)
  AND C_LIFE.GROUP_ID = 1001014
  -- Agreement
  AND NOE.AGREEMENT = 2
  AND C_AGREEMENT.CODE_KEY = TO_CHAR(NOE.AGREEMENT)
  AND C_AGREEMENT.GROUP_ID = 1000032
  AND TP.ID = NOE.SIDE_A_ORG_ID
  AND TP.ID = TP_ROLE.OBJECT_ID
  AND TP_ROLE.OBJECT_TYPE = 1000;

--
-- 196. V_FXPB_REPORT_EOD_NOE_GIVEUP  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_EOD_NOE_GIVEUP 
(ID, CLIENT_REF, APPROVAL, APPR_REASON, RECON, 
 ALLOC, LIFECYCLE, CREATION_DATE, ENTERING_ORG, SETTLEMENT_DATE, 
 SUBMITTER_PERSON, TRADE_DATE, RATE, SIDE_A, SIDE_A_ORG_ID, 
 SIDE_B, SIDE_B_ORG_ID, TRADER, U_FAR_RATE, BASE_CCY, 
 SECONDARY_CCY, CONTRACT_TYPE, DIRECTION, QUANTITY, QUANTITY2, 
 VALUE_DATE, FAR_QUANTITY, FAR_QUANTITY2, FAR_VALUE_DATE, REPORTER, 
 TRADE_TYPE, NEW_NOE, OLD_NOE, IS_DUMMY, AGREEMENT, 
 SPOT_RATE, FORWARD_POINTS, TRADER_MARKUP, FORWARD_MARKUP, FAR_SPOT_RATE, 
 FAR_FORWARD_POINTS, FAR_TRADER_MARKUP, FAR_FORWARD_MARKUP, TP_ROLE) AS 
SELECT  /*+ ordered */
 NOE.ID,
 NOE.EXTERNAL_REF,
 C_APPR.DATA,
 (NOE.APPROVE_STATUS_REASON)APPR_REASON,
 C_RECON.DATA,
 C_ALLOC.DATA,
 C_LIFE.DATA,
 TO_DATE(TO_CHAR( NOE.CREATION_DATE,'DD/MM/YYYY'),'DD/MM/YYYY'),
 I.EXTERNAL_VALUE,
 NOE.SETTLEMENT_DATE,
 D.EXTERNAL_VALUE,
 NOE.TRADE_DATE,
 NOE.RATE,
 E.EXTERNAL_VALUE,
 NOE.SIDE_A_ORG_ID,
 F.EXTERNAL_VALUE,
 NOE.SIDE_B_ORG_ID,
 J.FIRST_NAME||' '||J.LAST_NAME,
 NOE.U_FAR_RATE,
 G.NAME,
 H.NAME,
 C1.DATA,
 C2.DATA,
 NOE.QUANTITY,
 NOE.QUANTITY2,
 NOE.VALUE_DATE,
 NOE.FAR_QUANTITY,
 NOE.FAR_QUANTITY2,
 NOE.FAR_VALUE_DATE,
 NOE.REPORTER,
C3.DATA,
NOE.NEW_ID,
NOE.OLD_ID,
case when NOE.IS_DUMMY = 1 then 'true' else 'false' end,
 C_AGREEMENT.DATA,
  NOE.SPOT_RATE,
  NOE.FORWARD_POINTS,
  NOE.TRADER_MARKUP,
  NOE.FORWARD_MARKUP,
  NOE.FAR_SPOT_RATE,
  NOE.FAR_FORWARD_POINTS,
  NOE.FAR_TRADER_MARKUP,
  NOE.FAR_FORWARD_MARKUP,
 (CASE WHEN TP_ROLE.ROLE = '1000002' THEN 'bank' ELSE 'client' END) TP_ROLE
FROM
FXPB_NOE NOE,
ARCH_DATA_MAPPING D, -- submitter
ARCH_DATA_MAPPING E, -- side a
ARCH_DATA_MAPPING F, -- side  b
A_INSTRUMENT G, -- base currency
A_INSTRUMENT H, -- secondary currency
ARCH_DATA_MAPPING I, --  entering org
A_PERSON J, --  trader (optional)
ARCH_CODE_MEMBER C1, -- contract type
ARCH_CODE_MEMBER C2, -- direction
ARCH_CODE_MEMBER C3, -- trade type
ARCH_CODE_MEMBER C_APPR, -- approval status
ARCH_CODE_MEMBER C_RECON, -- reconstatus
ARCH_CODE_MEMBER C_ALLOC, -- alloc status
ARCH_CODE_MEMBER C_LIFE, -- lifecycle status
ARCH_CODE_MEMBER C_AGREEMENT, --  Agreement
A_ORGANIZATION TP,
A_OBJECT_ROLE TP_ROLE
WHERE
 NOE.SUBMITTER_PERSON_ID = D.INTERNAL_VALUE
 AND D.MAP_TYPE=4 -- person
 AND D.NAMER_ID=1000000
 AND D.STATUS=1
 AND D.TYPE=0
 -- side a mapping
 AND NOE.SIDE_A_ORG_ID=E.INTERNAL_VALUE
 AND E.MAP_TYPE=3 -- organization
 AND E.NAMER_ID=1000000
 AND E.STATUS=1
 AND E.TYPE=0
 -- side b mapping
 AND NOE.SIDE_B_ORG_ID=F.INTERNAL_VALUE
 AND F.MAP_TYPE=3 -- organization
 AND F.NAMER_ID=1000000
 AND F.STATUS=1
 AND F.TYPE=0
 --  base currency
 AND NOE.BASE_INSTRUMENT_ID=G.ID
 AND G.TYPE = 5006 -- currency
 --  secondary currency
 AND NOE.SECONDARY_INSTRUMENT_ID=H.ID
 AND H.TYPE = 5006 -- currency
 -- entering org mapping
 AND  NOE.ENTERING_ORG_ID=I.INTERNAL_VALUE
 AND I.MAP_TYPE=3 -- organization
 AND I.NAMER_ID=1000000
 AND I.STATUS=1
 AND I.TYPE=0
 -- optional trader
 AND NOE.TRADER_ID = J.ID(+)
 --contract type
  AND C1.CODE_KEY= TO_CHAR(NOE.CONTRACT_TYPE)
  AND C1.GROUP_ID=1000022
  --direction
  AND C2.CODE_KEY=  TO_CHAR(NOE.DIRECTION)
  AND C2.GROUP_ID=1000021
  --trade type
  AND C3.CODE_KEY=  TO_CHAR(NOE.TRADE_TYPE)
  AND C3.GROUP_ID=1000024
  -- approval status
  AND C_APPR.CODE_KEY = TO_CHAR(NOE.APPROVE_STATUS)
  AND C_APPR.GROUP_ID = 1001011
  -- recon status
  AND C_RECON.CODE_KEY = TO_CHAR(NOE.RECON_STATUS)
  AND C_RECON.GROUP_ID = 1001012
  -- alloc status
  AND C_ALLOC.CODE_KEY = TO_CHAR(NOE.ALLOC_STATUS)
  AND C_ALLOC.GROUP_ID = 1001013
  -- life status
  AND NOE.LIFE_STATUS = 10
  AND C_LIFE.CODE_KEY = TO_CHAR(NOE.LIFE_STATUS)
  AND C_LIFE.GROUP_ID = 1001014
  -- Agreement
  AND C_AGREEMENT.CODE_KEY = TO_CHAR(NOE.AGREEMENT)
  AND C_AGREEMENT.GROUP_ID = 1000032
  AND TP.ID = NOE.SIDE_A_ORG_ID
  AND TP.ID = TP_ROLE.OBJECT_ID
  AND TP_ROLE.OBJECT_TYPE = 1000;

--
-- 197. V_FXPB_REPORT_LINEAR_NOE_DEALS  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_LINEAR_NOE_DEALS 
(ID, DOMAIN_ID, PARTNER_ID, PARTNER_NAME, STATUS, 
 REQUEST_ID, REASON, TIME, UUID, NOE_REF, 
 TRADING_PARTY, ENTERING_PARTY, SUBMITTER, COUNTER_PARTY, VALUE_DATE, 
 SECOND_CCY, BASE_CCY, VALUE_RATE, TRADE_DATE, FAR_VALUE_RATE, 
 FAR_VALUE_DATE, TRADE_TYPE, CONTRACT_DIRECTION, CONTRACT_TYPE, CONTRACT_QTY, 
 CLIENT_REF, TRADER, UNUSED_ID, OPERATION, OBJECT_TYPE, 
 FAR_QTY, DESCRIPTION, PB, FIXING_DATE, REPORTER, 
 NAMER_ID, TRADER_NAMER_ID) AS 
SELECT /*+ ordered first_rows */
DEALS.ID, DEALS.DOMAIN_ID, PARTNER_ID, PARTNER.NAME,
(STATUS_CODE.DATA)STATUS, (DEALS.F19)REQUEST_ID,
REASON, TIME, UUID,
(CASE  WHEN (DEALS.STATUS=2) THEN NOE_REF ELSE '' END) NOE_REF,
(TPARTY_MAP.EXTERNAL_VALUE)TRADING_PARTY, (EPARTY_MAP.EXTERNAL_VALUE)ENTERING_PARTY,
(SUBMITTER_MAP.EXTERNAL_VALUE)SUBMITTER, (CPARTY_MAP.EXTERNAL_VALUE)COUNTER_PARTY,
(DEALS.F5)VALUE_DATE,
(SECOND_CCY.NAME)SECOND_CCY, (BASE_CCY.NAME)BASE_CCY, (DEALS.F8)VALUE_RATE,
(DEALS.F9)TRADE_DATE, (DEALS.F10)FAR_VALUE_RATE,
(DEALS.F11)FAR_VALUE_DATE,
(TRADE_TYPE.DATA)TRADE_TYPE,
(DIRECTION.DATA)CONTRACT_DIRECTION,
(CONTRACT_TYPE.DATA)CONTRACT_TYPE,
(DEALS.F15)CONTRACT_QTY,
(DEALS.F16)CLIENT_REF, (TRADER_MAP.EXTERNAL_VALUE)TRADER, (DEALS.F18)UNUSED_ID, (DEALS.F20)OPERATION,
(DEALS.F21)OBJECT_TYPE, (DEALS.F22)FAR_QTY, (DEALS.F23)DESCRIPTION, (PB_MAP.EXTERNAL_VALUE)PB, (DEALS.F25)FIXING_DATE, (DEALS.F26)REPORTER,
(TPARTY_MAP.NAMER_ID)NAMER_ID,
(TRADER_MAP.NAMER_ID)TRADER_NAMER_ID
 FROM
ARCH_PARTNER PARTNER,
A_INSTRUMENT BASE_CCY,
A_INSTRUMENT SECOND_CCY,
ARCH_GENERIC_NOE_DEALS DEALS,
--ARCH_GENERIC_NOE_DEALS_EXT EXT,
ARCH_DATA_MAPPING TPARTY_MAP,
ARCH_DATA_MAPPING EPARTY_MAP,
ARCH_DATA_MAPPING SUBMITTER_MAP,
ARCH_DATA_MAPPING TRADER_MAP,
ARCH_DATA_MAPPING CPARTY_MAP,
ARCH_DATA_MAPPING PB_MAP,
ARCH_CODE_MEMBER TRADE_TYPE,
ARCH_CODE_MEMBER DIRECTION,
ARCH_CODE_MEMBER CONTRACT_TYPE,
ARCH_CODE_MEMBER STATUS_CODE
--ARCH_CODE_MEMBER RECON,
--ARCH_CODE_MEMBER APPROVAL,
--ARCH_CODE_MEMBER LIFE
--ARCH_CODE_MEMBER SIDEAROLE,
--ARCH_CODE_MEMBER SIDEBROLE
WHERE
--DEALS.ID = 2000032 AND
-- find trading party map type
TPARTY_MAP.INTERNAL_VALUE=DEALS.F1
AND TPARTY_MAP.MAP_TYPE=3
AND TPARTY_MAP.TYPE=0
AND TPARTY_MAP.STATUS=1
-- find entering party map type
AND EPARTY_MAP.INTERNAL_VALUE=DEALS.F2
AND EPARTY_MAP.MAP_TYPE=3
AND EPARTY_MAP.TYPE=0
AND EPARTY_MAP.STATUS=1
AND EPARTY_MAP.NAMER_ID=TPARTY_MAP.NAMER_ID
-- find submitter name map type
AND SUBMITTER_MAP.INTERNAL_VALUE=DEALS.F3
AND SUBMITTER_MAP.MAP_TYPE=4
AND SUBMITTER_MAP.TYPE=0
AND SUBMITTER_MAP.STATUS=1
AND SUBMITTER_MAP.NAMER_ID=TPARTY_MAP.NAMER_ID
-- find counter party map type
AND CPARTY_MAP.INTERNAL_VALUE=DEALS.F4
AND CPARTY_MAP.MAP_TYPE=3
AND CPARTY_MAP.TYPE=0
AND CPARTY_MAP.STATUS=1
AND CPARTY_MAP.NAMER_ID=TPARTY_MAP.NAMER_ID
-- find pb map type
AND PB_MAP.INTERNAL_VALUE=DEALS.F24
AND PB_MAP.MAP_TYPE=3
AND PB_MAP.TYPE=0
AND PB_MAP.STATUS=1
AND PB_MAP.NAMER_ID=TPARTY_MAP.NAMER_ID
-- find trader name map type
AND TRADER_MAP.INTERNAL_VALUE(+)=DEALS.F17
AND TRADER_MAP.MAP_TYPE(+)=4
AND TRADER_MAP.TYPE(+)=0
AND TRADER_MAP.STATUS(+)=1
-- Map currencies
AND BASE_CCY.TYPE=5006
AND BASE_CCY.ID = DEALS.F7
AND SECOND_CCY.TYPE=5006
AND SECOND_CCY.ID = DEALS.F6
-- find trade type
AND TRADE_TYPE.GROUP_ID=300024
AND TRADE_TYPE.CODE_KEY = DEALS.F12
-- find direction
AND DIRECTION.GROUP_ID=300021
AND DIRECTION.CODE_KEY = DEALS.F13
-- find contract type
AND CONTRACT_TYPE.GROUP_ID=20
AND CONTRACT_TYPE.CODE_KEY = DEALS.F14
-- status
AND STATUS_CODE.GROUP_ID=4
AND STATUS_CODE.CODE_KEY = TO_CHAR(DEALS.STATUS)
AND DEALS.PARTNER_ID = PARTNER.ID
AND DEALS.DOMAIN_ID = PARTNER.DOMAIN_ID;

--
-- 198. V_FXPB_REPORT_LINEAR_OA_DEALS  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_LINEAR_OA_DEALS 
(ID, DOMAIN_ID, PARTNER_ID, PARTNER_NAME, STATUS, 
 REQUEST_ID, REASON, TIME, UUID, OA_REF, 
 TRADING_PARTY, ENTERING_PARTY, SUBMITTER, TRADE_DATE, TOTAL_QTY, 
 CLIENT_REF, FUND_NAME, ALLOCATION_CLIENT_REF, ALLOCATION_QTY, OPERATION, 
 OBJECT_TYPE, NAMER_ID) AS 
SELECT
DEALS.ID, DEALS.DOMAIN_ID, PARTNER_ID, PARTNER.NAME,
(STATUS_CODE.DATA)STATUS, (DEALS.F19)REQUEST_ID,
REASON, TIME, UUID,
(CASE  WHEN (DEALS.STATUS=2) THEN OA_REF ELSE '' END) OA_REF,
(null)TRADING_PARTY, (EPARTY_MAP.EXTERNAL_VALUE)ENTERING_PARTY,
(null)SUBMITTER,
--(CPARTY_MAP.EXTERNAL_VALUE)COUNTER_PARTY,
(DEALS.F1)TRADE_DATE,
(DEALS.F2)TOTAL_QTY,
(DEALS.F3)CLIENT_REF,
(DEALS.F4)FUND_NAME,
(DEALS.F5)ALLOCATION_CLIENT_REF,
(DEALS.F6)ALLOCATION_QTY,
 (DEALS.F20)OPERATION,
(DEALS.F21)OBJECT_TYPE,
(null)NAMER_ID
 FROM
ARCH_GENERIC_OA_DEALS DEALS,
--ARCH_DATA_MAPPING TPARTY_MAP,
ARCH_DATA_MAPPING EPARTY_MAP,
--ARCH_DATA_MAPPING SUBMITTER_MAP,
ARCH_CODE_MEMBER STATUS_CODE,
--ARCH_DATA_MAPPING CPARTY_MAP,
ARCH_PARTNER PARTNER
WHERE
-- find trading party map type
/*TPARTY_MAP.INTERNAL_VALUE=DEALS.F1
AND TPARTY_MAP.MAP_TYPE=3
AND TPARTY_MAP.TYPE=0
AND TPARTY_MAP.STATUS=1*/
-- find entering party map type
EPARTY_MAP.INTERNAL_VALUE=DEALS.F2
AND EPARTY_MAP.MAP_TYPE=3
AND EPARTY_MAP.TYPE=0
AND EPARTY_MAP.STATUS=1
--AND EPARTY_MAP.NAMER_ID=TPARTY_MAP.NAMER_ID
-- find submitter name map type
/*AND SUBMITTER_MAP.INTERNAL_VALUE=DEALS.F3
AND SUBMITTER_MAP.MAP_TYPE=4
AND SUBMITTER_MAP.TYPE=0
AND SUBMITTER_MAP.STATUS=1
AND SUBMITTER_MAP.NAMER_ID=TPARTY_MAP.NAMER_ID*/
-- status
AND STATUS_CODE.GROUP_ID=4
AND STATUS_CODE.CODE_KEY = TO_CHAR(DEALS.STATUS)
--  partner
AND DEALS.PARTNER_ID = PARTNER.ID
AND DEALS.DOMAIN_ID = PARTNER.DOMAIN_ID;

--
-- 199. V_FXPB_REPORT_NOE  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_NOE 
(ID, CLIENT_REF, APPROVAL, APPR_REASON, RECON, 
 ALLOC, LIFECYCLE, CREATION_DATE, ENTERING_ORG, SETTLEMENT_DATE, 
 SUBMITTER_PERSON, TRADE_DATE, RATE, SIDE_A, SIDE_B, 
 TRADER, U_FAR_RATE, BASE_CCY, SECONDARY_CCY, CONTRACT_TYPE, 
 DIRECTION, QUANTITY, QUANTITY2, VALUE_DATE, FAR_QUANTITY, 
 FAR_QUANTITY2, FAR_VALUE_DATE, REPORTER, TRADE_TYPE, NEW_NOE, 
 OLD_NOE, IS_DUMMY, AGREEMENT, SPOT_RATE, FORWARD_POINTS, 
 TRADER_MARKUP, FORWARD_MARKUP, FAR_SPOT_RATE, FAR_FORWARD_POINTS, FAR_TRADER_MARKUP, 
 FAR_FORWARD_MARKUP, TP_ROLE) AS 
SELECT  /*+ ordered */
 NOE.ID,
 NOE.EXTERNAL_REF,
 C_APPR.DATA,
 (NOE.APPROVE_STATUS_REASON)APPR_REASON,
 C_RECON.DATA,
 C_ALLOC.DATA,
 C_LIFE.DATA,
 NOE.CREATION_DATE,
 I.EXTERNAL_VALUE,
 NOE.SETTLEMENT_DATE,
 D.EXTERNAL_VALUE,
 NOE.TRADE_DATE,
 NOE.RATE,
 E.EXTERNAL_VALUE,
 F.EXTERNAL_VALUE,
 J.FIRST_NAME||' '||J.LAST_NAME,
 NOE.U_FAR_RATE,
 G.NAME,
 H.NAME,
 C1.DATA,
 C2.DATA,
 NOE.QUANTITY,
 NOE.QUANTITY2,
 NOE.VALUE_DATE,
 NOE.FAR_QUANTITY,
 NOE.FAR_QUANTITY2,
 NOE.FAR_VALUE_DATE,
 NOE.REPORTER,
C3.DATA,
NOE.NEW_ID,
NOE.OLD_ID,
case when NOE.IS_DUMMY = 1 then 'true' else 'false' end,
C_AGREEMENT.DATA,
  NOE.SPOT_RATE,
  NOE.FORWARD_POINTS,
  NOE.TRADER_MARKUP,
  NOE.FORWARD_MARKUP,
  NOE.FAR_SPOT_RATE,
  NOE.FAR_FORWARD_POINTS,
  NOE.FAR_TRADER_MARKUP,
  NOE.FAR_FORWARD_MARKUP,
 (CASE WHEN TP_ROLE.ROLE = '1000002' THEN 'bank' ELSE 'client' END) TP_ROLE
FROM
FXPB_NOE NOE,
ARCH_DATA_MAPPING D, -- submitter
ARCH_DATA_MAPPING E, -- side a
ARCH_DATA_MAPPING F, -- side  b
A_INSTRUMENT G, -- base currency
A_INSTRUMENT H, -- secondary currency
ARCH_DATA_MAPPING I, --  entering org
A_PERSON J, --  trader (optional)
ARCH_CODE_MEMBER C1, -- contract type
ARCH_CODE_MEMBER C2, -- direction
ARCH_CODE_MEMBER C3, -- trade type
ARCH_CODE_MEMBER C_APPR, -- approval status
ARCH_CODE_MEMBER C_RECON, -- reconstatus
ARCH_CODE_MEMBER C_ALLOC, -- alloc status
ARCH_CODE_MEMBER C_LIFE, -- lifecycle status
ARCH_CODE_MEMBER C_AGREEMENT, --  Agreement
A_ORGANIZATION TP,
A_OBJECT_ROLE TP_ROLE
WHERE
 NOE.SUBMITTER_PERSON_ID = D.INTERNAL_VALUE
 AND D.MAP_TYPE=4 -- person
 AND D.NAMER_ID=1000000
 AND D.STATUS=1
 AND D.TYPE=0
 -- side a mapping
 AND NOE.SIDE_A_ORG_ID=E.INTERNAL_VALUE
 AND E.MAP_TYPE=3 -- organization
 AND E.NAMER_ID=1000000
 AND E.STATUS=1
 AND E.TYPE=0
 -- side b mapping
 AND NOE.SIDE_B_ORG_ID=F.INTERNAL_VALUE
 AND F.MAP_TYPE=3 -- organization
 AND F.NAMER_ID=1000000
 AND F.STATUS=1
 AND F.TYPE=0
 --  base currency
 AND NOE.BASE_INSTRUMENT_ID=G.ID
 AND G.TYPE = 5006 -- currency
 --  secondary currency
 AND NOE.SECONDARY_INSTRUMENT_ID=H.ID
 AND H.TYPE = 5006 -- currency
 -- entering org mapping
 AND  NOE.ENTERING_ORG_ID=I.INTERNAL_VALUE
 AND I.MAP_TYPE=3 -- organization
 AND I.NAMER_ID=1000000
 AND I.STATUS=1
 AND I.TYPE=0
 -- optional trader
 AND NOE.TRADER_ID = J.ID(+)
 --contract type
  AND C1.CODE_KEY= TO_CHAR(NOE.CONTRACT_TYPE)
  AND C1.GROUP_ID=1000022
  --direction
  AND C2.CODE_KEY=  TO_CHAR(NOE.DIRECTION)
  AND C2.GROUP_ID=1000021
  --trade type
  AND C3.CODE_KEY=  TO_CHAR(NOE.TRADE_TYPE)
  AND C3.GROUP_ID=1000024
  -- approval status
  AND C_APPR.CODE_KEY = TO_CHAR(NOE.APPROVE_STATUS)
  AND C_APPR.GROUP_ID = 1001011
  -- recon status
  AND C_RECON.CODE_KEY = TO_CHAR(NOE.RECON_STATUS)
  AND C_RECON.GROUP_ID = 1001012
  -- alloc status
  AND C_ALLOC.CODE_KEY = TO_CHAR(NOE.ALLOC_STATUS)
  AND C_ALLOC.GROUP_ID = 1001013
  -- life status
  AND C_LIFE.CODE_KEY = TO_CHAR(NOE.LIFE_STATUS)
  AND C_LIFE.GROUP_ID = 1001014
  -- Agreement
  AND C_AGREEMENT.CODE_KEY = TO_CHAR(NOE.AGREEMENT)
  AND C_AGREEMENT.GROUP_ID = 1000032
  AND TP.ID = NOE.SIDE_A_ORG_ID
  AND TP.ID = TP_ROLE.OBJECT_ID
  AND TP_ROLE.OBJECT_TYPE = 1000;

--
-- 200. V_FXPB_REPORT_NOE_FRONT_PAGE  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_NOE_FRONT_PAGE 
(ID, CLIENT_REF, APPROVAL, APPR_REASON, RECON, 
 ALLOC, LIFECYCLE, CREATION_DATE, ENTERING_ORG, SETTLEMENT_DATE, 
 SUBMITTER_PERSON, TRADE_DATE, RATE, SIDE_A, SIDE_B, 
 TRADER, U_FAR_RATE, BASE_CCY, SECONDARY_CCY, CONTRACT_TYPE, 
 DIRECTION, QUANTITY, QUANTITY2, VALUE_DATE, FAR_QUANTITY, 
 FAR_QUANTITY2, FAR_VALUE_DATE, REPORTER, TRADE_TYPE, NEW_NOE, 
 OLD_NOE, IS_DUMMY, AGREEMENT, SPOT_RATE, FORWARD_POINTS, 
 TRADER_MARKUP, FORWARD_MARKUP, FAR_SPOT_RATE, FAR_FORWARD_POINTS, FAR_TRADER_MARKUP, 
 FAR_FORWARD_MARKUP) AS 
SELECT  NOE.ID,
 NOE.EXTERNAL_REF,
 C_APPR.DATA,
 (NOE.APPROVE_STATUS_REASON)APPR_REASON,
 C_RECON.DATA,
 C_ALLOC.DATA,
 C_LIFE.DATA,
 NOE.CREATION_DATE,
 I.EXTERNAL_VALUE,
 NOE.SETTLEMENT_DATE,
 D.EXTERNAL_VALUE,
 NOE.TRADE_DATE,
 NOE.RATE,
 E.EXTERNAL_VALUE,
 F.EXTERNAL_VALUE,
 J.FIRST_NAME||' '||J.LAST_NAME,
 NOE.U_FAR_RATE,
 G.NAME,
 H.NAME,
 C1.DATA,
 C2.DATA,
 NOE.QUANTITY,
 NOE.QUANTITY2,
 NOE.VALUE_DATE,
 NOE.FAR_QUANTITY,
 NOE.FAR_QUANTITY2,
 NOE.FAR_VALUE_DATE,
 NOE.REPORTER,
C3.DATA,
NOE.NEW_ID,
NOE.OLD_ID,
case when NOE.IS_DUMMY = 1 then 'true' else 'false' end,
C_AGREEMENT.DATA,
  NOE.SPOT_RATE,
  NOE.FORWARD_POINTS,
  NOE.TRADER_MARKUP,
  NOE.FORWARD_MARKUP,
  NOE.FAR_SPOT_RATE,
  NOE.FAR_FORWARD_POINTS,
  NOE.FAR_TRADER_MARKUP,
  NOE.FAR_FORWARD_MARKUP
FROM
FXPB_NOE NOE,
ARCH_DATA_MAPPING D, -- submitter
ARCH_DATA_MAPPING E, -- side a
ARCH_DATA_MAPPING F, -- side  b
A_INSTRUMENT G, -- base currency
A_INSTRUMENT H, -- secondary currency
ARCH_DATA_MAPPING I, --  entering org
A_PERSON J, --  trader (optional)
ARCH_CODE_MEMBER C1, -- contract type
ARCH_CODE_MEMBER C2, -- direction
ARCH_CODE_MEMBER C3, -- trade type
ARCH_CODE_MEMBER C_APPR, -- approval status
ARCH_CODE_MEMBER C_RECON, -- reconstatus
ARCH_CODE_MEMBER C_ALLOC, -- alloc status
ARCH_CODE_MEMBER C_LIFE, -- lifecycle status
ARCH_CODE_MEMBER C_AGREEMENT --  Agreement
WHERE
	NOE.SUBMITTER_PERSON_ID = D.INTERNAL_VALUE
	AND D.MAP_TYPE=4 -- person
	AND D.NAMER_ID=1000000
	AND D.STATUS=1
	AND D.TYPE=0
	-- side a mapping
	AND NOE.SIDE_A_ORG_ID=E.INTERNAL_VALUE
	AND E.MAP_TYPE=3 -- organization
	AND E.NAMER_ID=1000000
	AND E.STATUS=1
	AND E.TYPE=0
	-- side b mapping
	AND NOE.SIDE_B_ORG_ID=F.INTERNAL_VALUE
	AND F.MAP_TYPE=3 -- organization
	AND F.NAMER_ID=1000000
	AND F.STATUS=1
	AND F.TYPE=0
	--  base currency
	AND NOE.BASE_INSTRUMENT_ID=G.ID
	AND G.TYPE = 5006 -- currency
	--  secondary currency
	AND NOE.SECONDARY_INSTRUMENT_ID=H.ID
	AND H.TYPE = 5006 -- currency
	-- entering org mapping
	AND  NOE.ENTERING_ORG_ID=I.INTERNAL_VALUE
	AND I.MAP_TYPE=3 -- organization
	AND I.NAMER_ID=1000000
	AND I.STATUS=1
	AND I.TYPE=0
	-- optional trader
	AND NOE.TRADER_ID = J.ID(+)
	--contract type
	AND C1.CODE_KEY= TO_CHAR(NOE.CONTRACT_TYPE)
	AND C1.GROUP_ID=1000022
	--direction
	AND C2.CODE_KEY=  TO_CHAR(NOE.DIRECTION)
	AND C2.GROUP_ID=1000021
	--trade type
	AND C3.CODE_KEY=  TO_CHAR(NOE.TRADE_TYPE)
	AND C3.GROUP_ID=1000024
	-- approval status
	AND C_APPR.CODE_KEY = TO_CHAR(NOE.APPROVE_STATUS)
	AND C_APPR.GROUP_ID = 1001011
	-- recon status
	AND C_RECON.CODE_KEY = TO_CHAR(NOE.RECON_STATUS)
	AND C_RECON.GROUP_ID = 1001012
	-- alloc status
	AND C_ALLOC.CODE_KEY = TO_CHAR(NOE.ALLOC_STATUS)
	AND C_ALLOC.GROUP_ID = 1001013
	-- life status
	AND C_LIFE.CODE_KEY = TO_CHAR(NOE.LIFE_STATUS)
	AND C_LIFE.GROUP_ID = 1001014
	-- Agreement
	AND C_AGREEMENT.CODE_KEY = TO_CHAR(NOE.AGREEMENT)
	AND C_AGREEMENT.GROUP_ID = 1000032
  -- Filtering
	AND NOE.AGREEMENT <> 2
	-- active or done
	AND (LIFE_STATUS = 2
	OR (LIFE_STATUS = 4 AND trunc(NOE.CREATION_DATE) = trunc(sysdate)));

--
-- 201. V_FXPB_REPORT_OPTION_BILLING  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_OPTION_BILLING 
(TRADE_ID, DIRECTION, QUANTITY, CCY1, CCY2, 
 CALCULATED_FEE, BILLING_TYPE, TRADE_DATE, CLIENT, FUND, 
 IS_FUND, PARENT_BILLING_ID) AS 
SELECT /*+ ORDERED */
	T.ID, -- trade id
	BD1.DIRECTION, -- direction
	T.QUANTITY, --qty
	CCY1.NAME, --CCY1
	CCY2.NAME, --CCY2
	--FEE
	BD1.FINAL_BILLING_FEE + CASE WHEN BD2.FINAL_BILLING_FEE IS NULL THEN 0 ELSE BD2.FINAL_BILLING_FEE END,--CALCULATED_FEE
	BD1.BILLING_TYPE,  --BILLING_TYPE
	T.TRADE_DATE, --TRADE_DATE
	C.EXTERNAL_VALUE,--CLIENT
	CASE WHEN F.MAP_TYPE =7 THEN F.EXTERNAL_VALUE ELSE '' END, --FUND
	CASE WHEN F.MAP_TYPE =7 THEN 1 ELSE 0 END,
	BD1.PERENT_BILLING_ID
FROM
	FXPB_OPTION_TRADE T,
	ARCH_BILLING_DATA BD1,
	ARCH_BILLING_DATA BD2,
	ARCH_DATA_MAPPING F,
	ARCH_DATA_MAPPING C,
	A_INSTRUMENT CCY1,
	A_INSTRUMENT CCY2
WHERE
	T.BILLING_DATA_ID1 = BD1.ID
	AND T.LIFE_STATUS <> 4 -- no deleted trades
	AND T.BILLING_DATA_ID2 = BD2.ID(+)
	AND F.NAMER_ID=1000000 AND F.STATUS=1 AND F.TYPE=0
	AND C.MAP_TYPE=3 -- organization
	AND C.NAMER_ID=1000000 AND C.STATUS=1 AND C.TYPE=0
	AND
	(
  	    (
			(
			    (T.ROLE_A = 1000003 AND F.MAP_TYPE=3) -- client
				OR (T.ROLE_A = 1000004 AND F.MAP_TYPE=7) -- fund
			)
			AND T.SIDE_A_ORG_ID=F.INTERNAL_VALUE
			AND T.SIDE_A_MANAGER_ID=C.INTERNAL_VALUE
		)
		OR
		(
		    (
		        (T.ROLE_B = 1000003 AND F.MAP_TYPE=3) -- client
				OR  (T.ROLE_B = 1000004 AND F.MAP_TYPE=7) -- fund
			)
 			AND T.SIDE_B_ORG_ID=F.INTERNAL_VALUE
			AND T.SIDE_B_MANAGER_ID=C.INTERNAL_VALUE
		)
	)
	AND CCY1.TYPE= 5006 AND CCY2.TYPE= 5006 --ccy
	AND BD1.SECONDERY_INSTRUMENT_ID = CCY1.ID
	AND BD1.BASE_INSTRUMENT_ID = CCY2.ID;

--
-- 202. V_FXPB_REPORT_OPTION_CT  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_OPTION_CT 
(TRADE_GROUP, TRADE_ID, LIFE_STATUS, BOOKING_STATUS, OPTION_STATUS, 
 SIDE_A_MANAGER, SIDE_B_MANAGER, SIDE_A, SIDE_B, SIDE_A_NOE_ID, 
 SIDE_B_NOE_ID, CURRENCY1, CONTRACT_TYPE, QUANTITY1, CURRENCY2, 
 NEAR_QUANTITY2, EXPIRY_DATE, DATE_TERMINATED, STRIKE, STRIKE_QUOTE_MODE, 
 OPTION_TYPE, OPTION_STYLE, BARRIER_TYPE, LOWER_BARRIER_LEVEL, UPPER_BARRIER_LEVEL, 
 PRICE_PAID, PRICE_QUOTE, FWD_DATE, RATE, TRADE_DATE, 
 SETTLEMENT_DATE, TRADE_TYPE, AGREEMENT, UNDERLYING, OPTION_BO_TRADE_ID) AS 
SELECT
  /*+ ordered */
	  TG.ID, -- tg id
	  TRADE.ID, -- trade id
	  (C_TR_LG.DATA)STATUS_TR,
	  (C_TR_BOR.DATA)STATUS_BOR,
	  (C_TR_OPTION.DATA)STATUS_OPTION,
	  M3.EXTERNAL_VALUE,
	  M4.EXTERNAL_VALUE,
	  M2.EXTERNAL_VALUE,
	  M1.EXTERNAL_VALUE,
	  TRADE.TRADING_ACTIVITY_SIDE_A, -- sell  NOE    (swaped)
	  TRADE.TRADING_ACTIVITY_SIDE_B, -- buyer NOE    (swaped)
	  I2.NAME, -- secondary ccy
      (C1.DATA) CONTRACT_TYPE,
	  TRADE.QUANTITY,
	  I1.NAME, -- base ccy
	  TRADE.QUANTITY2,
	  NOE.EXPIRY_DATE,
	  TRADE.TERMINATED_DATE, --cr 5160
	  (NOE.RATE) STRIKE,
 	  (C_STRIKE_Q_MODE.DATA) STRIKE_QUOTE_MODE,
	  (C_OPTION_TYPE.DATA) OPTION_TYPE,
 	  (C_OPTION_STYLE.DATA) OPTION_STYLE,
	  NOE.BARRIER_TYPE,
	  NOE.LOWER_BARRIER_LEVEL,
	  NOE.UPPER_BARRIER_LEVEL,
	  NOE.PRICE_PAID,
	  (NOE.PREMIUM_TYPE) PRICE_QUOTE,
	  (NOE.VALUE_DATE) FWD_DATE,
	  TRADE.RATE,
	  TRADE.TRADE_DATE,
	  TRADE.SETTLEMENT_DATE,
	  (C.DATA) TRADE_TYPE,
	  (C_AGREEMENT.DATA) AGREEMENT,
	  (NOE.UNDERLYING_CLIENT_REF) UNDERLYING,
	  TRADE.OPTION_BO_TRADE_ID
FROM
		FXPB_OPTION_TRADE  TG,--TRADE GROUP
		FXPB_OPTION_TRADE  TRADE,--TRADE
		A_TA_TA_REL B,
		FXPB_OPTION_NOE NOE,
		ARCH_DATA_MAPPING M1, -- buyer da
		ARCH_DATA_MAPPING M2, -- seller da
		ARCH_DATA_MAPPING M3, -- side a manager
		ARCH_DATA_MAPPING M4, -- side b manager
		A_INSTRUMENT I1, -- base currency
		A_INSTRUMENT I2, -- secondary currency
		ARCH_CODE_MEMBER C1, -- contract type
		ARCH_CODE_MEMBER C_TR_LG, -- lifecycle status
		ARCH_CODE_MEMBER C_TR_BOR, -- BOR status
		ARCH_CODE_MEMBER C_TR_OPTION, -- OPTION status
		ARCH_CODE_MEMBER C, -- trade type
		ARCH_CODE_MEMBER C_AGREEMENT, -- trade type
		ARCH_CODE_MEMBER C_STRIKE_Q_MODE, -- Strike quote mode
		ARCH_CODE_MEMBER C_OPTION_TYPE, -- Option type
		ARCH_CODE_MEMBER C_OPTION_STYLE -- Option style
WHERE
TG.TYPE = 4009
AND	 B.PARENT_TA_ID = TG.ID
AND B.RELATION = 13
AND B.CHILD_TA_ID = TRADE.ID--GET CHILD TA
AND NOE.ID = TRADE.TRADING_ACTIVITY_SIDE_A
 --  base currency
 AND NOE.BASE_INSTRUMENT_ID=I1.ID
 AND I1.TYPE = 5006 -- currency
 --  secondary currency
 AND NOE.SECONDARY_INSTRUMENT_ID=I2.ID
 AND I2.TYPE = 5006 -- currency
 -- life status
 AND C_TR_LG.CODE_KEY = TO_CHAR(TRADE.LIFE_STATUS)
 AND C_TR_LG.GROUP_ID = 1001018
 -- BOR status
 AND C_TR_BOR.CODE_KEY = TO_CHAR(TRADE.BOR_STATUS)
 AND C_TR_BOR.GROUP_ID = 1001019
 -- OPTION status
 AND C_TR_OPTION.CODE_KEY = TO_CHAR(TRADE.OPTION_STATUS)
 AND C_TR_OPTION.GROUP_ID = 1100025
  --trade type
  AND C.CODE_KEY=  TO_CHAR(NOE.TRADE_TYPE)
  AND C.GROUP_ID=1000024
 -- side a mapping
 AND TRADE.SIDE_B_ORG_ID=M1.INTERNAL_VALUE
 AND M1.MAP_TYPE IN (3,7) -- organization  or fund
 AND M1.NAMER_ID=1000000
 AND M1.STATUS=1
 AND M1.TYPE=0
 -- side b mapping
 AND TRADE.SIDE_A_ORG_ID=M2.INTERNAL_VALUE
 AND M2.MAP_TYPE IN (3,7) -- organization  or fund
 AND M2.NAMER_ID=1000000
 AND M2.STATUS=1
 AND M2.TYPE=0
  -- side a manager
 AND TRADE.SIDE_A_MANAGER_ID=M3.INTERNAL_VALUE
 AND M3.MAP_TYPE = 3
 AND M3.NAMER_ID=1000000
 AND M3.STATUS=1
 AND M3.TYPE=0
  -- side b manager
 AND TRADE.SIDE_b_MANAGER_ID=M4.INTERNAL_VALUE
 AND M4.MAP_TYPE = 3
 AND M4.NAMER_ID=1000000
 AND M4.STATUS=1
 AND M4.TYPE=0
 --contract type
  AND C1.CODE_KEY= TO_CHAR(NOE.CONTRACT_TYPE)
  AND C1.GROUP_ID=1100021
 -- Agreement
 AND C_AGREEMENT.CODE_KEY = TO_CHAR(NOE.AGREEMENT)
 AND C_AGREEMENT.GROUP_ID = 1000032
  -- Strike Quote Mode
  AND C_STRIKE_Q_MODE.CODE_KEY = TO_CHAR(NOE.STRIKE_QUOTE_MODE)
  AND C_STRIKE_Q_MODE.GROUP_ID = 1100024
  -- Option type
  AND C_OPTION_TYPE.CODE_KEY = TO_CHAR(NOE.OPTION_TYPE)
  AND C_OPTION_TYPE.GROUP_ID = 1100022
  -- Option style
  AND C_OPTION_STYLE.CODE_KEY = TO_CHAR(NOE.OPTION_STYLE)
  AND C_OPTION_STYLE.GROUP_ID = 1100020;

--
-- 203. V_FXPB_REPORT_OPTION_NOE  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_OPTION_NOE 
(ID, ALLOC, RECON, APPROVAL, APPR_REASON, 
 LIFECYCLE, SIDE_A, SIDE_B, OPTION_TYPE, DIRECTION, 
 EXPIRY_DATE, SETTLEMENT_DATE, VALUE_DATE, CONTRACT_TYPE, SECONDARY_CCY, 
 QUANTITY, BASE_CCY, QUANTITY2, STRIKE, STRIKE_QUOTE_MODE, 
 OPTION_STYLE, PRICE_PAID, PREMIUM_TYPE, PREMIUM_AMOUNT, PREMIUM_CCY, 
 PREMIUM_DATE, BARRIER_TYPE, BARRIER_LEVEL, LOWER_BARRIER_LEVEL, UPPER_BARRIER_LEVEL, 
 REBATE_PERCENT_1, REBATE_PERCENT_2, REBATE_QUOTE_MODE, REBATE_TYPE, PAYOUT_AMOUNT, 
 PAYOUT_CCY, TRADER, TRADE_DATE, CREATION_DATE, EXTERNAL_REF, 
 TRADE_TYPE, PORTFOLIO_ID, IS_DUMMY, AGREEMENT, SUBMITTER_PERSON, 
 ENTERING_ORG, CUT_OFF_ZONE, UNDERLYING_CLIENT_REF, DELIVERY_METHOD, REPORTER, 
 NEW_NOE, OLD_NOE, OPTION_CONTRACT_TYPE, EXPIRY_TIME, DATE_TERMINATED, 
 NDF, NDF_FIXING_DATE, NDF_LINKED_TRADE, TP_ROLE) AS 
SELECT  /*+ ordered */
 NOE.ID,
 (C_ALLOC.DATA) ALLOC,
 (C_RECON.DATA) RECON,
 (C_APPR.DATA) APPROVAL,
 (NOE.APPROVE_STATUS_REASON)APPR_REASON,
 (C_LIFE.DATA) LIFECYCLE,
 (E.EXTERNAL_VALUE) SIDE_A,
 (F.EXTERNAL_VALUE) SIDE_B,
 (C_OPTION_TYPE.DATA) OPTION_TYPE,
 (C2.DATA) DIRECTION,
 NOE.EXPIRY_DATE,
 NOE.SETTLEMENT_DATE,
 NOE.VALUE_DATE,
 (C1.DATA) CONTRACT_TYPE,
 (H.NAME) SECONDARY_CCY,
 NOE.QUANTITY,
 (G.NAME) BASE_CCY,
 NOE.QUANTITY2,
 (NOE.RATE) STRIKE,
 (C_STRIKE_Q_MODE.DATA) STRIKE_QUOTE_MODE,
 (C_OPTION_STYLE.DATA) OPTION_STYLE,
 NOE.PRICE_PAID,
 (C_PREMIUM_TYPE.DATA) PREMIUM_TYPE,
 NOE.PREMIUM_AMOUNT,
 (CCY_PREMIUM.NAME) PREMIUM_CCY,
 NOE.PREMIUM_DATE,
(C_BARRIER_TYPE.DATA)BARRIER_TYPE,
 NOE.BARRIER_LEVEL,
 NOE.LOWER_BARRIER_LEVEL,
 NOE.UPPER_BARRIER_LEVEL,
 NOE.REBATE_PERCENT_1,
 NOE.REBATE_PERCENT_2,
 (C_REBATE_QUOTE_MODE.DATA)REBATE_QUOTE_MODE,
 NOE.REBATE_TYPE,
 NOE.PAYOUT_AMOUNT,
 (CCY_PAYOUT.NAME) PAYOUT_CCY,
 (J.FIRST_NAME||' '||J.LAST_NAME) TRADER,
 NOE.TRADE_DATE,
 NOE.CREATION_DATE,
 NOE.EXTERNAL_REF,
 (C3.DATA) TRADE_TYPE,
 NOE.PORTFOLIO_ID,
 (CASE WHEN NOE.IS_DUMMY = 1 THEN 'true' ELSE 'false' END) IS_DUMMY,
 (C_AGREEMENT.DATA) AGREEMENT,
 (D.EXTERNAL_VALUE) SUBMITTER_PERSON,
 (I.EXTERNAL_VALUE) ENTERING_ORG,
 NOE.CUT_OFF_ZONE,
 NOE.UNDERLYING_CLIENT_REF,
 (C_DELIVERY_METHOD.DATA) DELIVERY_METHOD,
 NOE.REPORTER,
 (NOE.NEW_ID) NEW_NOE,
 (NOE.OLD_ID) OLD_NOE,
 (C_OPTION_C_TYPE.DATA) OPTION_CONTRACT_TYPE,
 NOE.EXPIRY_TIME,
 NOE.DATE_TERMINATED,
 (CASE WHEN NOE.NDF = 1 THEN 'true' ELSE 'false' END) NDF,
 NOE.NDF_FIXING_DATE,
 NOE.NDF_LINKED_TRADE,
 (CASE WHEN TP_ROLE.ROLE = '1000002' THEN 'bank' ELSE 'client' END) TP_ROLE
FROM
FXPB_OPTION_NOE NOE,
ARCH_DATA_MAPPING D, -- submitter
ARCH_DATA_MAPPING E, -- side a
ARCH_DATA_MAPPING F, -- side  b
A_INSTRUMENT G, -- base currency
A_INSTRUMENT H, -- secondary currency
ARCH_DATA_MAPPING I, --  entering org
A_PERSON J, --  trader (optional)
ARCH_CODE_MEMBER C1, -- contract type
ARCH_CODE_MEMBER C2, -- direction
ARCH_CODE_MEMBER C3, -- trade type
ARCH_CODE_MEMBER C_APPR, -- approval status
ARCH_CODE_MEMBER C_RECON, -- reconstatus
ARCH_CODE_MEMBER C_ALLOC, -- alloc status
ARCH_CODE_MEMBER C_LIFE, -- lifecycle status
ARCH_CODE_MEMBER C_AGREEMENT, --  Agreement
ARCH_CODE_MEMBER C_STRIKE_Q_MODE, -- Strike quote mode
A_INSTRUMENT CCY_PAYOUT,    -- Payout Ccy
A_INSTRUMENT CCY_PREMIUM,  -- Premium Ccy
ARCH_CODE_MEMBER C_PREMIUM_TYPE, -- Premium Type
ARCH_CODE_MEMBER C_OPTION_STYLE, -- Option style
ARCH_CODE_MEMBER C_OPTION_C_TYPE, -- Option contract type
ARCH_CODE_MEMBER C_OPTION_TYPE, -- Option type
ARCH_CODE_MEMBER C_DELIVERY_METHOD, -- Delivery method
ARCH_CODE_MEMBER C_BARRIER_TYPE, -- Barrier Type
ARCH_CODE_MEMBER C_REBATE_QUOTE_MODE, -- rebate quote mode
A_ORGANIZATION TP,
A_OBJECT_ROLE TP_ROLE
WHERE
 NOE.SUBMITTER_PERSON_ID = D.INTERNAL_VALUE
 AND D.MAP_TYPE=4 -- person
 AND D.NAMER_ID=1000000
 AND D.STATUS=1
 AND D.TYPE=0
 -- side a mapping
 AND NOE.SIDE_A_ORG_ID=E.INTERNAL_VALUE
 AND E.MAP_TYPE=3 -- organization
 AND E.NAMER_ID=1000000
 AND E.STATUS=1
 AND E.TYPE=0
 -- side b mapping
 AND NOE.SIDE_B_ORG_ID=F.INTERNAL_VALUE
 AND F.MAP_TYPE=3 -- organization
 AND F.NAMER_ID=1000000
 AND F.STATUS=1
 AND F.TYPE=0
 --  base currency
 AND NOE.BASE_INSTRUMENT_ID=G.ID
 AND G.TYPE = 5006 -- currency
 --  secondary currency
 AND NOE.SECONDARY_INSTRUMENT_ID=H.ID
 AND H.TYPE = 5006 -- currency
 -- entering org mapping
 AND  NOE.ENTERING_ORG_ID=I.INTERNAL_VALUE
 AND I.MAP_TYPE=3 -- organization
 AND I.NAMER_ID=1000000
 AND I.STATUS=1
 AND I.TYPE=0
 -- optional trader
 AND NOE.TRADER_ID = J.ID(+)
 --contract type
  AND C1.CODE_KEY= TO_CHAR(NOE.CONTRACT_TYPE)
  AND C1.GROUP_ID=1100021
  --direction
  AND C2.CODE_KEY=  TO_CHAR(NOE.DIRECTION)
  AND C2.GROUP_ID=1000021
  --trade type
  AND C3.CODE_KEY=  TO_CHAR(NOE.TRADE_TYPE)
  AND C3.GROUP_ID=1100026
  -- approval status
  AND C_APPR.CODE_KEY = TO_CHAR(NOE.APPROVE_STATUS)
  AND C_APPR.GROUP_ID = 1001011
  -- recon status
  AND C_RECON.CODE_KEY = TO_CHAR(NOE.RECON_STATUS)
  AND C_RECON.GROUP_ID = 1001012
  -- alloc status
  AND C_ALLOC.CODE_KEY = TO_CHAR(NOE.ALLOC_STATUS)
  AND C_ALLOC.GROUP_ID = 1001013
  -- life status
  AND C_LIFE.CODE_KEY = TO_CHAR(NOE.LIFE_STATUS)
  AND C_LIFE.GROUP_ID = 1001014
  -- Agreement
  AND C_AGREEMENT.CODE_KEY = TO_CHAR(NOE.AGREEMENT)
  AND C_AGREEMENT.GROUP_ID = 1000032
  -- Strike Quote Mode
  AND C_STRIKE_Q_MODE.CODE_KEY = TO_CHAR(NOE.STRIKE_QUOTE_MODE)
  AND C_STRIKE_Q_MODE.GROUP_ID = 1100024
  -- Premium Ccy
  AND NOE.PREMIUM_CCY = CCY_PREMIUM.ID
  AND CCY_PREMIUM.TYPE = 5006 -- currency
  -- Premium Type
  AND C_PREMIUM_TYPE.CODE_KEY = TO_CHAR(NOE.PREMIUM_TYPE)
  AND C_PREMIUM_TYPE.GROUP_ID = 1100019
  -- Option style
  AND C_OPTION_STYLE.CODE_KEY = TO_CHAR(NOE.OPTION_STYLE)
  AND C_OPTION_STYLE.GROUP_ID = 1100020
  -- Option contract type
  AND C_OPTION_C_TYPE.CODE_KEY = TO_CHAR(NOE.CONTRACT_TYPE)
  AND C_OPTION_C_TYPE.GROUP_ID = 1100021
  -- Option type
  AND C_OPTION_TYPE.CODE_KEY = TO_CHAR(NOE.OPTION_TYPE)
  AND C_OPTION_TYPE.GROUP_ID = 1100022
  -- Delivery Method
  AND C_DELIVERY_METHOD.CODE_KEY = TO_CHAR(NOE.DELIVERY_METHOD)
  AND C_DELIVERY_METHOD.GROUP_ID = 1100023
  -- Payout Ccy
  AND NOE.PAYOUT_CURRENCY = CCY_PAYOUT.ID(+)
  AND CCY_PAYOUT.TYPE(+) = 5006 -- currency
  -- TP Role
  AND TP.ID = NOE.SIDE_A_ORG_ID
  AND TP.ID = TP_ROLE.OBJECT_ID
  AND TP_ROLE.OBJECT_TYPE = 1000
  --Barrier Type
  AND C_BARRIER_TYPE.CODE_KEY = TO_CHAR(NOE.BARRIER_TYPE)
  AND C_BARRIER_TYPE.GROUP_ID = 1100045
  --rebate quote mode
  AND C_REBATE_QUOTE_MODE.CODE_KEY = NVL(TO_CHAR(NOE.REBATE_QUOTE_MODE), 0)
  AND C_REBATE_QUOTE_MODE.GROUP_ID = 1100046;

--
-- 204. V_FXPB_REPORT_OPTION_NOE_DEALS  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_OPTION_NOE_DEALS 
(ID, PARTNER_NAME, STATUS, REQUEST_ID, REASON, 
 TIME, UUID, CLIENT_NOE_ID, BANK_NOE_ID, TRADE_REF_ID, 
 OPERATION, TRADING_PARTY, SUBMITER, COUNTER_PARTY, SECONDARY_PARTY, 
 VALUE_DATE, SECONDARY_CCY, QTY, BASE_CCY, RATE, 
 OPTION_TYPE, CONTACT_DIRECTION, CONTRACT_TYPE, OPTION_STYLE, TRADE_TYPE, 
 CLIENT_REF, TRADER, REPORTER, LINKED_TRADE) AS 
SELECT M.ID
	        ,M.PARTNER_NAME
	        ,CG1.DATA as STATUS
	        ,M.MUREX_TRADE_ID as REQUEST_ID
	        ,M.REASON
	        ,M.TIME
	        ,M.UUID
	        ,(CASE WHEN (M.CLIENT_NOE_ID>0) THEN M.CLIENT_NOE_ID ELSE '' END) as CLIENT_NOE_ID
	        ,(CASE WHEN (M.BANK_NOE_ID>0) THEN M.BANK_NOE_ID ELSE '' END) as BANK_NOE_ID
	        ,(CASE WHEN (M.TRADE_REF_ID>0) THEN M.TRADE_REF_ID ELSE '' END) as TRADE_REF_ID
	        ,M.OPERATION as OPERATION
	        ,M.TRAIDING_PARTY as TRADING_PARTY
	        ,M.SUBMITTER_PERSON_ID as SUBMITER
	        ,M.COUNTER_PARTY as COUNTER_PARTY
	        ,M.SECONDARY_PARTY as SECONDARY_PARTY
	        ,M.VALUE_DATE as VALUE_DATE
	        ,M.SECONDARY_CCY_NAME as SECONDARY_CCY
	        ,M.QTY as QTY
	        ,M.BASE_CCY_NAME as BASE_CCY
	        ,M.RATE as RATE
	        ,M.OPTION_TYPE as OPTION_TYPE
	        ,(CASE WHEN (M.BINTERNAL='N') THEN 'BUY' ELSE (CASE WHEN (M.SINTERNAL='N') THEN 'SELL' ELSE '' END) END) as CONTACT_DIRECTION
	        ,CG3.DATA as CONTRACT_TYPE
	        ,(CASE WHEN (M.TP_AE='E') THEN 'European' ELSE (CASE WHEN (M.TP_AE='A') THEN 'American' ELSE '' END) END) as OPTION_STYLE
	        ,CG2.DATA as TRADE_TYPE
	        ,M.CLIENT_REF as CLIENT_REF
	        ,M.TP_TRADER as TRADER
			,'' as REPORTER
	        ,M.TP_CREATOR as LINKED_TRADE
FROM JPMC_GENERIC_MUREX_DEALS M
	 ,ARCH_CODE_MEMBER CG1
	 ,ARCH_CODE_MEMBER CG2
	 ,ARCH_CODE_MEMBER CG3
WHERE (CG1.GROUP_ID = 1100038) AND (CG1.CODE_KEY = M.STATUS)
  AND (CG2.GROUP_ID = 1000024) AND (CG2.CODE_KEY = M.TRADE_TYPE)
  AND (CG3.GROUP_ID = 1000022) AND (CG3.CODE_KEY = M.CONTRACT_TYPE);

--
-- 205. V_FXPB_REPORT_OPTION_NOE_FP  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_OPTION_NOE_FP 
(ID, ALLOC, RECON, APPROVAL, APPR_REASON, 
 LIFECYCLE, SIDE_A, SIDE_B, OPTION_TYPE, DIRECTION, 
 EXPIRY_DATE, SETTLEMENT_DATE, VALUE_DATE, CONTRACT_TYPE, SECONDARY_CCY, 
 QUANTITY, BASE_CCY, QUANTITY2, STRIKE, STRIKE_QUOTE_MODE, 
 OPTION_STYLE, PRICE_PAID, PREMIUM_TYPE, PREMIUM_AMOUNT, PREMIUM_CCY, 
 PREMIUM_DATE, BARRIER_TYPE, BARRIER_LEVEL, LOWER_BARRIER_LEVEL, UPPER_BARRIER_LEVEL, 
 REBATE_PERCENT_1, REBATE_PERCENT_2, REBATE_QUOTE_MODE, REBATE_TYPE, PAYOUT_AMOUNT, 
 PAYOUT_CCY, TRADER, TRADE_DATE, CREATION_DATE, EXTERNAL_REF, 
 TRADE_TYPE, PORTFOLIO_ID, IS_DUMMY, AGREEMENT, SUBMITTER_PERSON, 
 ENTERING_ORG, CUT_OFF_ZONE, UNDERLYING_CLIENT_REF, DELIVERY_METHOD, REPORTER, 
 NEW_NOE, OLD_NOE, OPTION_CONTRACT_TYPE, EXPIRY_TIME, DATE_TERMINATED, 
 NDF, NDF_FIXING_DATE, NDF_LINKED_TRADE, TP_ROLE) AS 
SELECT  /*+ ordered */
 NOE.ID,
 (C_ALLOC.DATA) ALLOC,
 (C_RECON.DATA) RECON,
 (C_APPR.DATA) APPROVAL,
 (NOE.APPROVE_STATUS_REASON)APPR_REASON,
 (C_LIFE.DATA) LIFECYCLE,
 (E.EXTERNAL_VALUE) SIDE_A,
 (F.EXTERNAL_VALUE) SIDE_B,
 (C_OPTION_TYPE.DATA) OPTION_TYPE,
 (C2.DATA) DIRECTION,
 NOE.EXPIRY_DATE,
 NOE.SETTLEMENT_DATE,
 NOE.VALUE_DATE,
 (C1.DATA) CONTRACT_TYPE,
 (H.NAME) SECONDARY_CCY,
 NOE.QUANTITY,
 (G.NAME) BASE_CCY,
 NOE.QUANTITY2,
 (NOE.RATE) STRIKE,
 (C_STRIKE_Q_MODE.DATA) STRIKE_QUOTE_MODE,
 (C_OPTION_STYLE.DATA) OPTION_STYLE,
 NOE.PRICE_PAID,
 (C_PREMIUM_TYPE.DATA) PREMIUM_TYPE,
 NOE.PREMIUM_AMOUNT,
 (CCY_PREMIUM.NAME) PREMIUM_CCY,
 NOE.PREMIUM_DATE,
(C_BARRIER_TYPE.DATA)BARRIER_TYPE,
 NOE.BARRIER_LEVEL,
 NOE.LOWER_BARRIER_LEVEL,
 NOE.UPPER_BARRIER_LEVEL,
 NOE.REBATE_PERCENT_1,
 NOE.REBATE_PERCENT_2,
 (C_REBATE_QUOTE_MODE.DATA)REBATE_QUOTE_MODE,
 NOE.REBATE_TYPE,
 NOE.PAYOUT_AMOUNT,
'',-- (CCY_PAYOUT.NAME) PAYOUT_CCY,
 (J.FIRST_NAME||' '||J.LAST_NAME) TRADER,
 NOE.TRADE_DATE,
 NOE.CREATION_DATE,
 NOE.EXTERNAL_REF,
 (C3.DATA) TRADE_TYPE,
 NOE.PORTFOLIO_ID,
 (CASE WHEN NOE.IS_DUMMY = 1 THEN 'true' ELSE 'false' END) IS_DUMMY,
 (C_AGREEMENT.DATA) AGREEMENT,
 (D.EXTERNAL_VALUE) SUBMITTER_PERSON,
 (I.EXTERNAL_VALUE) ENTERING_ORG,
 NOE.CUT_OFF_ZONE,
 NOE.UNDERLYING_CLIENT_REF,
 (C_DELIVERY_METHOD.DATA) DELIVERY_METHOD,
 NOE.REPORTER,
 (NOE.NEW_ID) NEW_NOE,
 (NOE.OLD_ID) OLD_NOE,
 (C_OPTION_C_TYPE.DATA) OPTION_CONTRACT_TYPE,
 NOE.EXPIRY_TIME,
 NOE.DATE_TERMINATED,
 (CASE WHEN NOE.NDF = 1 THEN 'true' ELSE 'false' END) NDF,
 NOE.NDF_FIXING_DATE,
 NOE.NDF_LINKED_TRADE,
 (CASE WHEN TP_ROLE.ROLE = '1000002' THEN 'bank' ELSE 'client' END) TP_ROLE
FROM
FXPB_OPTION_NOE NOE,
ARCH_DATA_MAPPING D, -- submitter
ARCH_DATA_MAPPING E, -- side a
ARCH_DATA_MAPPING F, -- side  b
A_INSTRUMENT G, -- base currency
A_INSTRUMENT H, -- secondary currency
ARCH_DATA_MAPPING I, --  entering org
A_PERSON J, --  trader (optional)
ARCH_CODE_MEMBER C1, -- contract type
ARCH_CODE_MEMBER C2, -- direction
ARCH_CODE_MEMBER C3, -- trade type
ARCH_CODE_MEMBER C_APPR, -- approval status
ARCH_CODE_MEMBER C_RECON, -- reconstatus
ARCH_CODE_MEMBER C_ALLOC, -- alloc status
ARCH_CODE_MEMBER C_LIFE, -- lifecycle status
ARCH_CODE_MEMBER C_AGREEMENT, --  Agreement
ARCH_CODE_MEMBER C_STRIKE_Q_MODE, -- Strike quote mode
--A_INSTRUMENT CCY_PAYOUT,    -- Payout Ccy
A_INSTRUMENT CCY_PREMIUM,  -- Premium Ccy
ARCH_CODE_MEMBER C_PREMIUM_TYPE, -- Premium Type
ARCH_CODE_MEMBER C_OPTION_STYLE, -- Option style
ARCH_CODE_MEMBER C_OPTION_C_TYPE, -- Option contract type
ARCH_CODE_MEMBER C_OPTION_TYPE, -- Option type
ARCH_CODE_MEMBER C_DELIVERY_METHOD, -- Delivery method
ARCH_CODE_MEMBER C_BARRIER_TYPE, -- Barrier Type
ARCH_CODE_MEMBER C_REBATE_QUOTE_MODE, -- rebate quote mode
A_ORGANIZATION TP,
A_OBJECT_ROLE TP_ROLE
WHERE
 NOE.SUBMITTER_PERSON_ID = D.INTERNAL_VALUE
 AND D.MAP_TYPE=4 -- person
 AND D.NAMER_ID=1000000
 AND D.STATUS=1
 AND D.TYPE=0
 -- side a mapping
 AND NOE.SIDE_A_ORG_ID=E.INTERNAL_VALUE
 AND E.MAP_TYPE=3 -- organization
 AND E.NAMER_ID=1000000
 AND E.STATUS=1
 AND E.TYPE=0
 -- side b mapping
 AND NOE.SIDE_B_ORG_ID=F.INTERNAL_VALUE
 AND F.MAP_TYPE=3 -- organization
 AND F.NAMER_ID=1000000
 AND F.STATUS=1
 AND F.TYPE=0
 --  base currency
 AND NOE.BASE_INSTRUMENT_ID=G.ID
 AND G.TYPE = 5006 -- currency
 --  secondary currency
 AND NOE.SECONDARY_INSTRUMENT_ID=H.ID
 AND H.TYPE = 5006 -- currency
 -- entering org mapping
 AND  NOE.ENTERING_ORG_ID=I.INTERNAL_VALUE
 AND I.MAP_TYPE=3 -- organization
 AND I.NAMER_ID=1000000
 AND I.STATUS=1
 AND I.TYPE=0
 -- optional trader
 AND NOE.TRADER_ID = J.ID(+)
 --contract type
  AND C1.CODE_KEY= TO_CHAR(NOE.CONTRACT_TYPE)
  AND C1.GROUP_ID=1100021
  --direction
  AND C2.CODE_KEY=  TO_CHAR(NOE.DIRECTION)
  AND C2.GROUP_ID=1000021
  --trade type
  AND C3.CODE_KEY=  TO_CHAR(NOE.TRADE_TYPE)
  AND C3.GROUP_ID=1100026
  -- approval status
  AND C_APPR.CODE_KEY = TO_CHAR(NOE.APPROVE_STATUS)
  AND C_APPR.GROUP_ID = 1001011
  -- recon status
  AND C_RECON.CODE_KEY = TO_CHAR(NOE.RECON_STATUS)
  AND C_RECON.GROUP_ID = 1001012
  -- alloc status
  AND C_ALLOC.CODE_KEY = TO_CHAR(NOE.ALLOC_STATUS)
  AND C_ALLOC.GROUP_ID = 1001013
  -- life status
  AND C_LIFE.CODE_KEY = TO_CHAR(NOE.LIFE_STATUS)
  AND C_LIFE.GROUP_ID = 1001014
  -- Agreement
  AND C_AGREEMENT.CODE_KEY = TO_CHAR(NOE.AGREEMENT)
  AND C_AGREEMENT.GROUP_ID = 1000032
  -- Strike Quote Mode
  AND C_STRIKE_Q_MODE.CODE_KEY = TO_CHAR(NOE.STRIKE_QUOTE_MODE)
  AND C_STRIKE_Q_MODE.GROUP_ID = 1100024
  -- Premium Ccy
  AND NOE.PREMIUM_CCY = CCY_PREMIUM.ID
  AND CCY_PREMIUM.TYPE = 5006 -- currency
  -- Premium Type
  AND C_PREMIUM_TYPE.CODE_KEY = TO_CHAR(NOE.PREMIUM_TYPE)
  AND C_PREMIUM_TYPE.GROUP_ID = 1100019
  -- Option style
  AND C_OPTION_STYLE.CODE_KEY = TO_CHAR(NOE.OPTION_STYLE)
  AND C_OPTION_STYLE.GROUP_ID = 1100020
  -- Option contract type
  AND C_OPTION_C_TYPE.CODE_KEY = TO_CHAR(NOE.CONTRACT_TYPE)
  AND C_OPTION_C_TYPE.GROUP_ID = 1100021
  -- Option type
  AND C_OPTION_TYPE.CODE_KEY = TO_CHAR(NOE.OPTION_TYPE)
  AND C_OPTION_TYPE.GROUP_ID = 1100022
  -- Delivery Method
  AND C_DELIVERY_METHOD.CODE_KEY = TO_CHAR(NOE.DELIVERY_METHOD)
  AND C_DELIVERY_METHOD.GROUP_ID = 1100023
  -- Payout Ccy
--  AND NOE.PAYOUT_CURRENCY = CCY_PAYOUT.ID
--  AND CCY_PAYOUT.TYPE = 5006 -- currency
  -- TP Role
  AND TP.ID = NOE.SIDE_A_ORG_ID
  AND TP.ID = TP_ROLE.OBJECT_ID
  AND TP_ROLE.OBJECT_TYPE = 1000
  --Barrier Type
  AND C_BARRIER_TYPE.CODE_KEY = TO_CHAR(NOE.BARRIER_TYPE)
  AND C_BARRIER_TYPE.GROUP_ID = 1100045
  --rebate quote mode
  AND C_REBATE_QUOTE_MODE.CODE_KEY = TO_CHAR(NOE.REBATE_QUOTE_MODE)
  AND C_REBATE_QUOTE_MODE.GROUP_ID = 1100046
  -- Filtering
	AND NOE.AGREEMENT <> 2
	-- active or done
	AND (LIFE_STATUS = 2
	OR (LIFE_STATUS = 4 AND trunc(NOE.CREATION_DATE) = trunc(sysdate)));

--
-- 206. V_FXPB_REPORT_OPTION_POSITION  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_OPTION_POSITION 
(GROUP_ID, TRAIANA_ID, MUREX_ID, EXPIRY_DATE, STRIKE, 
 TRADER_ID, PORTFOLIO_ID, AGREEMENT_ID, TRD_TYPE, FUND_ID, 
 CLIENT_ID, EB_ID, PB_ID, COUNTERPARTY_ID, OPTION_TYPE, 
 CONTRACT_TYPE, PRICE, PREMIUM_TYPE_ID, PREMIUM_CCY, RISK_NOTIONAL, 
 BASE_NOTIONAL, BASE_CCY_ID, RISK_CCY_ID, BASE_CCY, RISK_CCY, 
 DIRECTION, INSTRUMENT_ID, DELTA_CCY, DELTA_CCY_ID, DELTA, 
 SPOT_RATE, SPOT_DATE, CCY_PAIR, GAMMA, VEGA, 
 VOLATILITY, RATE_DIRECTION, UNREALIZED_DAILY_PNL, UNREALIZES_MTM, UNREALIZED_M2D, 
 REALIZED_DAILY_PNL, REALIZES_MTM, REALIZED_M2D, TOTAL_DAILY_PNL, TOTAL_MTM_PNL, 
 TOTAL_MTD_PNL, FAKE_ROW, CORRECT_CCY_PAIR) AS 
SELECT
	   TG.ID as GROUP_ID
	   ,TRD.ID as TRAIANA_ID
	   ,TRD.OPTION_BO_TRADE_ID as MUREX_ID
 	   ,TRD.EXPIRY_DATE as EXPIRY_DATE
	   ,TRD.RATE as STRIKE
	   ,TRD.TRADER_ID as TRADER_ID
	   ,TRD.PORTFOLIO_ID as PORTFOLIO_ID
	   ,TRD.AGREEMENT as AGREEMENT_ID
	   --
	   ,(case when ((TRD.ROLE_A = 1000002) OR (TRD.ROLE_B = 1000002)) then (1) else
	    (case when ((TRD.ROLE_A = 1000003) OR (TRD.ROLE_B = 1000003)) then (2) else
		(case when ((TRD.ROLE_A = 1000004) OR (TRD.ROLE_B = 1000004)) then (3) else (0)
		end) end) end) as TRD_TYPE -- Bank = 1, Client = 2, Fund = 3
    	,(case when (TRD.ROLE_A=1000004) then TRD.SIDE_A_ORG_ID else (case when (TRD.ROLE_B=1000004) then TRD.SIDE_B_ORG_ID else (-1) end) end) as FUND_ID
	--
		,(case when (NOE.ROLE_A = 1000003) then (NOE.SIDE_A_ORG_ID) else (NOE.SIDE_B_ORG_ID) end) as CLIENT_ID
		,(case when (NOE.ROLE_A = 1000002) then (NOE.SIDE_A_ORG_ID) else (NOE.SIDE_B_ORG_ID) end) as EB_ID
		,NOE.PB_ID as PB_ID
	--
	   ,(case when (NOE.ROLE_A=1000002) then NOE.SIDE_A_ORG_ID else NOE.SIDE_B_ORG_ID end) as COUNTERPARTY_ID
	   ,OTYPE.NAME as OPTION_TYPE
	   ,CTYPE.NAME as CONTRACT_TYPE
	--
	   --,NOE.PREMIUM_AMOUNT as PRICE  <-- CR5922
	   ,NVL(MDVALEXT.MTM_PRICE, 0) as PRICE
	   ,NOE.PREMIUM_TYPE as PREMIUM_TYPE_ID
	   ,INSTR4.NAME as PREMIUM_CCY
	--
	   ,TRD.QUANTITY as RISK_NOTIONAL
	   ,TRD.QUANTITY2 as BASE_NOTIONAL
	--
	   ,NOE.BASE_INSTRUMENT_ID as BASE_CCY_ID --ccy2
	   ,NOE.SECONDARY_INSTRUMENT_ID as RISK_CCY_ID --ccy1
	   ,INSTR2.NAME as BASE_CCY
       ,INSTR1.NAME as RISK_CCY
	--
	   ,(case when(NOE.ROLE_A = 1000003) then (case when(NOE.DIRECTION=1) then ('Buy') else ('Sell') end)
	   else (case when(NOE.DIRECTION=1) then ('Sell') else ('Buy') end) end) as DIRECTION
		 ,NOE.INSTRUMENT_ID as INSTRUMENT_ID
		 -- FXPB_VAL_MD_OPTION_EXT
		 ,INSTR3.NAME as DELTA_CCY
		 ,NVL(MDVALEXT.GREEKS_CCY_ID,1000140) as DELTA_CCY_ID
		 ,NVL(MDVALEXT.DELTA, 0) as DELTA
		 ,NVL(MDVALEXT.GREEKS_SPOT, 1) as SPOT_RATE
		 ,NVL(MDVALEXT.GREEKS_SPOT_DATE, trunc(SYSDATE)-1) as SPOT_DATE
		 ,NVL(MDVALEXT.CCY_PAIR, 'EURUSD') as CCY_PAIR
		 ,NVL(MDVALEXT.GAMMA, 0) as GAMMA
		 ,NVL(MDVALEXT.VEGA, 0) as VEGA
		 ,NVL(MDVALEXT.VOLATILITY, 0) as VOLATILITY
		 ,NVL(MDVALEXT.IS_BASE_CCY_FIRST, 0) as RATE_DIRECTION
		 -- unrealised
		 ,NVL(MDVALEXT.UNREALIZED_DAILY_PNL, 0) as UNREALIZED_DAILY_PNL
		 ,NVL(MDVALEXT.UNREALIZED_INC_PNL, 0) as UNREALIZES_MTM
		 ,NVL(MDVALEXT.UNREALIZED_MONTH2DAY_PNL, 0) as UNREALIZED_M2D
		 -- realised
		 ,NVL(MDVALEXT.REALIZED_DAILY_PNL, 0) as REALIZED_DAILY_PNL
		 ,NVL(MDVALEXT.REALIZED_INC_PNL, 0) as REALIZES_MTM
		 ,NVL(MDVALEXT.REALIZED_MONTH2DAY_PNL, 0) as REALIZED_M2D
		 -- total
		 ,NVL((MDVALEXT.UNREALIZED_DAILY_PNL + MDVALEXT.REALIZED_DAILY_PNL), 0) as TOTAL_DAILY_PNL
		 ,NVL((MDVALEXT.UNREALIZED_INC_PNL + MDVALEXT.REALIZED_INC_PNL), 0) as TOTAL_MTM_PNL
		 ,NVL(MDVALEXT.MONTH2DAY_TOTAL_PNL, 0) as TOTAL_MTD_PNL
		 ,(case when (MDVALEXT.MUREX_TRADE_ID = NVL(MDVALEXT.MUREX_TRADE_ID, 0)) then (0) else (1) end) as FAKE_ROW
		 ,ABCR.CCY_PAIR as CORRECT_CCY_PAIR
  FROM
  	   fxpb_option_trade TRD
  	   ,fxpb_option_noe NOE
	   ,fxpb_md_option_ext MDVALEXT
	   ,ARCH_CODE_MEMBER OTYPE   -- Option Type
	   ,ARCH_CODE_MEMBER CTYPE   -- Contract Type
	   ,A_INSTRUMENT INSTR1
	   ,A_INSTRUMENT INSTR2
	   ,A_INSTRUMENT INSTR3
	   ,A_INSTRUMENT INSTR4
	   ,FXPB_OPTION_TRADE  TG--TRADE GROUP
	   ,A_TA_TA_REL RELATION
	   ,ARCH_BILLING_CCY_PAIR ABCR
 WHERE
 	    -- joints
		(TG.TYPE = 4009)
		AND	(RELATION.PARENT_TA_ID = TG.ID)
		AND (RELATION.RELATION = 13)
		AND (RELATION.CHILD_TA_ID = TRD.ID)
		AND (TRD.TRADING_ACTIVITY_SIDE_A = NOE.ID)
		--AND (MDVAL.ID = MDVALEXT.ID)  -- BUG joint should be by murex ID
		AND (TRD.OPTION_BO_TRADE_ID = TO_CHAR(MDVALEXT.MUREX_TRADE_ID(+)))
		AND (OTYPE.GROUP_ID = 1100022) AND (OTYPE.CODE_KEY = NOE.OPTION_TYPE)
	   	AND (CTYPE.GROUP_ID = 3000) AND (CTYPE.CODE_KEY = NOE.CONTRACT_TYPE)
	  	AND (INSTR2.ID = NOE.BASE_INSTRUMENT_ID)
      	AND (INSTR1.ID = NOE.SECONDARY_INSTRUMENT_ID)
		AND (INSTR3.ID = NVL(MDVALEXT.GREEKS_CCY_ID,1000140))
		AND (INSTR4.ID = NOE.PREMIUM_CCY)
		-- Calculate correct CCY pair
		AND (((ABCR.FIRST_CCY_ID = NOE.BASE_INSTRUMENT_ID)AND(ABCR.SECOND_CCY_ID = NOE.SECONDARY_INSTRUMENT_ID))
		 OR ((ABCR.FIRST_CCY_ID = NOE.SECONDARY_INSTRUMENT_ID)AND(ABCR.SECOND_CCY_ID = NOE.BASE_INSTRUMENT_ID)))
		-- trades filtering
		AND (TRD.TYPE = 4008)			 -- filter group trades
		AND ((TRD.ROLE_A = 1000001) OR (TRD.ROLE_B = 1000001)) -- filters master trade
		AND (TRD.LIFE_STATUS IN (2,5))   -- booked (2), not booked (5)
		--AND ((TRD.BOR_STATUS = 2) OR (TRD.OPTION_BO_TRADE_ID IS NULL))         -- reconciled (2)
		AND (TRD.BOR_STATUS = 2)
		-- OPTION_STATUS active <-> (1)
		AND ((TRD.OPTION_STATUS = 1)  OR (TRD.EXPIRY_DATE >= trunc(SYSDATE)-1));

--
-- 207. V_FXPB_REPORT_OPTION_SPLIT  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_OPTION_SPLIT 
(ID, ADVISOR, NOE_ID, COUNTER_NOE, APPROVAL, 
 ACTIVITY, TRADE_DATE, CREATION_DATE, ENTERED_BY, CLIENT_REF, 
 ALLOCATED_QUANTITY, NEW_SPLIT, OLD_SPLIT, CURRENCY_PAIR, PREMIUM_AMOUNT, 
 PREMIUM_CCY) AS 
SELECT
 /*+ first_rows */
	   (SPLIT.ID)ID,
	   (MAP_CLIENT.EXTERNAL_VALUE)CLIENT,
	   (SPLIT.NOE_ID)NOE_ID,
	   (NOE.COUNTER_NOE_ID)COUNTER_NOE,
	   (C_APPROVAL.DATA)APPROVAL,
	   (C_LIFE.DATA)ACTIVITY,
	   SPLIT.TRADE_DATE,
	   SPLIT.CREATION_DATE,
	   (MAP_ENTERINF_ORG.EXTERNAL_VALUE)ENTERED_BY,
	   SPLIT.EXTERNAL_REF,
	   SPLIT.TOTAL,
	   SPLIT.NEW_ID,
	   SPLIT.OLD_ID,
	   CCY_PAIR.CCY_PAIR,
	   NOE.PREMIUM_AMOUNT,
	   (CCY_PREMIUM.NAME) PREMIUM_CCY
FROM
	   FXPB_SPLIT SPLIT,
	   FXPB_OPTION_NOE NOE,
	   ARCH_DATA_MAPPING MAP_CLIENT,
	   ARCH_DATA_MAPPING MAP_ENTERINF_ORG, --  entering org
	   ARCH_CODE_MEMBER C_LIFE,
	   ARCH_CODE_MEMBER C_APPROVAL,
	   ARCH_BILLING_CCY_PAIR CCY_PAIR,
	   A_INSTRUMENT CCY_PREMIUM  -- Premium Ccy
WHERE
	 SPLIT.TYPE = 4010
	 AND NOE.ID = SPLIT.NOE_ID
    	 -- approval status
	 AND C_APPROVAL.CODE_KEY = TO_CHAR(SPLIT.APPROVE_STATUS)
	 AND C_APPROVAL.GROUP_ID = 1001015
	 -- life status
	 AND C_LIFE.CODE_KEY = TO_CHAR(SPLIT.LIFE_STATUS)
	 AND C_LIFE.GROUP_ID = 1001016
	 -- client mapping
	 AND SPLIT.SIDE_A_ORG_ID =MAP_CLIENT.INTERNAL_VALUE -- client
	 AND MAP_CLIENT.MAP_TYPE=3 -- organization
	 AND MAP_CLIENT.NAMER_ID=1000000
	 AND MAP_CLIENT.STATUS=1
	 AND MAP_CLIENT.TYPE=0
 	 -- entering org mapping
	 AND  SPLIT.ENTERING_ORG_ID=MAP_ENTERINF_ORG.INTERNAL_VALUE
	 AND MAP_ENTERINF_ORG.MAP_TYPE=3 -- organization
	 AND MAP_ENTERINF_ORG.NAMER_ID=1000000
	 AND MAP_ENTERINF_ORG.STATUS=1
	 AND MAP_ENTERINF_ORG.TYPE=0
	 -- currency pair
	 AND (
	    (NOE.BASE_INSTRUMENT_ID = CCY_PAIR.SECOND_CCY_ID AND NOE.SECONDARY_INSTRUMENT_ID= CCY_PAIR.FIRST_CCY_ID)
		 OR
	    (NOE.BASE_INSTRUMENT_ID = CCY_PAIR.FIRST_CCY_ID AND NOE.SECONDARY_INSTRUMENT_ID= CCY_PAIR.SECOND_CCY_ID)
  	     )
     -- Premium Ccy
     AND NOE.PREMIUM_CCY = CCY_PREMIUM.ID
     AND CCY_PREMIUM.TYPE = 5006 -- currency;

--
-- 208. V_FXPB_REPORT_OPTION_TG  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_OPTION_TG 
(TRADE_GROUP, STATUS, SIDE_A, SIDE_A_NOE_ID, SIDE_B, 
 SIDE_B_NOE_ID, TRADE_DATE, CONTRACT_TYPE, CURRENCY1, QUANTITY1, 
 CURRENCY2, EXPIRY_DATE, STRIKE, STRIKE_QUOTE_MODE, OPTION_TYPE, 
 OPTION_STYLE, BARRIER_TYPE, QTY2, FWD_DATE, TIME, 
 TRADE_TYPE, AGREEMENT, NEAR_RATE) AS 
SELECT
/*+ first_rows */
	   (TRADE.ID)TRADE_GROUP,
	   (C_TG_LG.DATA)STATUS,
	   (M1.EXTERNAL_VALUE) SIDE_A,
	   (NOE_S.ID) SIDE_A_NOE_ID,
	   (M2.EXTERNAL_VALUE)SIDE_B,
	   (NOE_B.ID) SIDE_B_NOE_ID,
	   TRADE.TRADE_DATE,
 	   (C1.DATA) CONTRACT_TYPE,
	   (I2.NAME)CURRENCY1,
	   (NOE_S.QUANTITY)QUANTITY1,
	   (I1.NAME)CURRENCY2,
	   NOE_S.EXPIRY_DATE,
	   (NOE_S.RATE) STRIKE,
 	   (C_STRIKE_Q_MODE.DATA) STRIKE_QUOTE_MODE,
	   (C_OPTION_TYPE.DATA) OPTION_TYPE,
 	   (C_OPTION_STYLE.DATA) OPTION_STYLE,
           (case when (NOE_S.BARRIER_TYPE = 0)  then '' else (
		   select C_BARRIER_TYPE.DATA from ARCH_CODE_MEMBER  C_BARRIER_TYPE
		    where C_BARRIER_TYPE.CODE_KEY = TO_CHAR(NOE_S.BARRIER_TYPE)
  	                    AND C_BARRIER_TYPE.GROUP_ID = 1100029) end) as BARRIER_TYPE,
	   (NOE_S.QUANTITY2) QTY2,
	   (NOE_S.VALUE_DATE) FWD_DATE,
	   (TRADE.CREATION_DATE)TIME,
	   (C.DATA) TRADE_TYPE,
	   (C_AGREEMENT.DATA) AGREEMENT,
	   (TRADE.RATE) NEAR_RATE
FROM
	FXPB_OPTION_NOE NOE_S,--seller noe
	FXPB_OPTION_NOE NOE_B,--buyer noe
	FXPB_OPTION_TRADE TRADE, --trade
	ARCH_DATA_MAPPING M1, -- seller da
	ARCH_DATA_MAPPING M2, -- buyer da
	A_INSTRUMENT I1, -- base currency
	A_INSTRUMENT I2, -- secondary currency
	ARCH_CODE_MEMBER C1, -- contract type
	ARCH_CODE_MEMBER C_TG_LG, -- lifecycle status
	ARCH_CODE_MEMBER C, -- trade type
	ARCH_CODE_MEMBER C_AGREEMENT, -- Agreement
	ARCH_CODE_MEMBER C_STRIKE_Q_MODE, -- Strike quote mode
	ARCH_CODE_MEMBER C_OPTION_TYPE, -- Option type
	ARCH_CODE_MEMBER C_OPTION_STYLE-- Option style
WHERE
 	 TRADE.TYPE = 4009 --cut all trade groups
	 AND NOE_B.ID = TRADE.TRADING_ACTIVITY_SIDE_B--get buyer ta
	 AND NOE_S.ID = TRADE.TRADING_ACTIVITY_SIDE_A--get seller ta
	 --  base currency
	 AND NOE_S.BASE_INSTRUMENT_ID=I1.ID
	 AND I1.TYPE = 5006 -- currency
	 --  secondary currency
	 AND NOE_S.SECONDARY_INSTRUMENT_ID=I2.ID
	 AND I2.TYPE = 5006 -- currency
	 -- life status
	 AND C_TG_LG.CODE_KEY = TO_CHAR(TRADE.LIFE_STATUS)
	 AND C_TG_LG.GROUP_ID = 1001017
  	 --trade type
  	 AND C.CODE_KEY=  TO_CHAR(NOE_S.TRADE_TYPE)
  	 AND C.GROUP_ID=1000024
	 -- side a mapping
	 AND TRADE.SIDE_A_ORG_ID=M1.INTERNAL_VALUE
	 AND M1.MAP_TYPE=3 -- organization
	 AND M1.NAMER_ID=1000000
	 AND M1.STATUS=1
	 AND M1.TYPE=0
	 -- side b mapping
	 AND TRADE.SIDE_B_ORG_ID=M2.INTERNAL_VALUE
	 AND M2.MAP_TYPE=3 -- organization
	 AND M2.NAMER_ID=1000000
	 AND M2.STATUS=1
     AND M2.TYPE=0
	 --Agreement
	 AND C_AGREEMENT.CODE_KEY=  TO_CHAR(NOE_S.AGREEMENT)
     AND C_AGREEMENT.GROUP_ID=1000032
 	 --contract type
  	 AND C1.CODE_KEY= TO_CHAR(NOE_S.CONTRACT_TYPE)
  	 AND C1.GROUP_ID=1100021
  	 -- Strike Quote Mode
  	 AND C_STRIKE_Q_MODE.CODE_KEY = TO_CHAR(NOE_S.STRIKE_QUOTE_MODE)
  	 AND C_STRIKE_Q_MODE.GROUP_ID = 1100024
  	 -- Option type
  	 AND C_OPTION_TYPE.CODE_KEY = TO_CHAR(NOE_S.OPTION_TYPE)
  	 AND C_OPTION_TYPE.GROUP_ID = 1100022
  	 -- Option style
  	 AND C_OPTION_STYLE.CODE_KEY = TO_CHAR(NOE_S.OPTION_STYLE)
  	 AND C_OPTION_STYLE.GROUP_ID = 1100020;

--
-- 209. V_FXPB_REPORT_POSITION_NOE  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_POSITION_NOE 
(INSTRUMENT_ID, ACCOUNT_ID, POSITION_DATE, LONG_AMOUNT, SHORT_AMOUNT, 
 SOURCE_ID, TRADER_ID, PORTFOLIO_ID, AGREEMENT, DEAL_ID) AS 
SELECT  A.INSTRUMENT_ID,
        A.ACCOUNT_ID,
        A.POSITION_DATE,
        A.LONG_AMOUNT,
        A.SHORT_AMOUNT,
	A.SOURCE_ID,
        B.TRADER_ID,
	B.PORTFOLIO_ID,
	B.AGREEMENT,
	B.ID
FROM 	ARCH_POSITION_DETAILS A,  FXPB_NOE B
WHERE 	A.SOURCE_REF = TO_CHAR(B.ID)
  	AND A.SOURCE_REF_TYPE = 4003
	AND A.TYPE = 1   -- PositionTypesConstsInterface.K_NOE_BASED = 1;

--
-- 210. V_FXPB_REPORT_POSITION_NOE_FWD  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_POSITION_NOE_FWD 
(INSTRUMENT_ID, ACCOUNT_ID, POSITION_DATE, LONG_AMOUNT, SHORT_AMOUNT, 
 SOURCE_ID, TRADER_ID, PORTFOLIO_ID, AGREEMENT, DEAL_ID, 
 CCY_PAIR, BASE_ID, SECONDARY_ID) AS 
SELECT  -- ARCH_POSITION_DETAILS
		A.INSTRUMENT_ID,
        A.ACCOUNT_ID,
        A.POSITION_DATE,
        A.LONG_AMOUNT,
        A.SHORT_AMOUNT,
		A.SOURCE_ID,
		-- FXPB_NOE
        B.TRADER_ID,
		B.PORTFOLIO_ID,
		B.AGREEMENT,
		B.ID,
		--A_INSTRUMENT_FORWARD
		C.CCY_PAIR,
		C.BASE_ID,
		C.SECONDARY_ID
FROM 	ARCH_POSITION_DETAILS A,  FXPB_NOE B, A_INSTRUMENT_FORWARD C
WHERE 	A.SOURCE_REF = TO_CHAR(B.ID)
		AND A.SOURCE_REF_TYPE = 4003
		AND A.TYPE = 1		  		-- PositionTypesConstsInterface.K_NOE_BASED = 1
		AND A.SOURCE_ID = C.ID;

--
-- 211. V_FXPB_REPORT_POSITION_TRADE  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_POSITION_TRADE 
(INSTRUMENT_ID, ACCOUNT_ID, POSITION_DATE, LONG_AMOUNT, SHORT_AMOUNT, 
 SOURCE_ID, TRADER_ID, PORTFOLIO_ID, AGREEMENT, DEAL_ID) AS 
SELECT  A.INSTRUMENT_ID,
        A.ACCOUNT_ID,
        A.POSITION_DATE,
        A.LONG_AMOUNT,
        A.SHORT_AMOUNT,
	A.SOURCE_ID,
        B.TRADER_ID,
	B.PORTFOLIO_ID,
	B.AGREEMENT,
	B.ID
FROM 	ARCH_POSITION_DETAILS A,  FXPB_TRADE B
WHERE 	A.SOURCE_REF = TO_CHAR(B.ID)
  	AND A.SOURCE_REF_TYPE = 4005
	AND A.TYPE = 2   -- PositionTypesConstsInterface.K_BOOKED = 2;

--
-- 212. V_FXPB_REPORT_POSITION_TRD_FWD  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_POSITION_TRD_FWD 
(INSTRUMENT_ID, ACCOUNT_ID, POSITION_DATE, LONG_AMOUNT, SHORT_AMOUNT, 
 SOURCE_ID, TRADER_ID, PORTFOLIO_ID, AGREEMENT, DEAL_ID, 
 CCY_PAIR, BASE_ID, SECONDARY_ID) AS 
SELECT  -- ARCH_POSITION_DETAILS
	A.INSTRUMENT_ID,
        A.ACCOUNT_ID,
        A.POSITION_DATE,
        A.LONG_AMOUNT,
        A.SHORT_AMOUNT,
	A.SOURCE_ID,
	-- FXPB_NOE
        B.TRADER_ID,
	B.PORTFOLIO_ID,
	B.AGREEMENT,
	B.ID,
	--A_INSTRUMENT_FORWARD
	C.CCY_PAIR,
	C.BASE_ID,
	C.SECONDARY_ID
FROM 	ARCH_POSITION_DETAILS A,  FXPB_TRADE B, A_INSTRUMENT_FORWARD C
WHERE 	A.SOURCE_REF = TO_CHAR(B.ID)
  	AND A.SOURCE_REF_TYPE = 4005
	AND A.TYPE = 2   -- PositionTypesConstsInterface.K_BOOKED = 2
	AND A.SOURCE_ID = C.ID;

--
-- 213. V_FXPB_REPORT_SPLIT  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_SPLIT 
(ID, ADVISOR, NOE_ID, COUNTER_NOE, APPROVAL, 
 ACTIVITY, TRADE_DATE, CREATION_DATE, ENTERED_BY, CLIENT_REF, 
 ALLOCATED_QUANTITY, NEW_SPLIT, OLD_SPLIT, CURRENCY_PAIR) AS 
SELECT
 /*+ first_rows */
	   (SPLIT.ID)ID,
	   (MAP_CLIENT.EXTERNAL_VALUE)CLIENT,
	   (SPLIT.NOE_ID)NOE_ID,
	   (NOE.COUNTER_NOE_ID)COUNTER_NOE,
	   (C_APPROVAL.DATA)APPROVAL,
	   (C_LIFE.DATA)ACTIVITY,
	   SPLIT.TRADE_DATE,
	   SPLIT.CREATION_DATE,
	   (MAP_ENTERINF_ORG.EXTERNAL_VALUE)ENTERED_BY,
	   SPLIT.EXTERNAL_REF,
	   SPLIT.TOTAL,
	   SPLIT.NEW_ID,
	   SPLIT.OLD_ID,
	   CCY_PAIR.CCY_PAIR
from
	   FXPB_SPLIT SPLIT,
	   FXPB_NOE NOE,
	   ARCH_DATA_MAPPING MAP_CLIENT,
	   ARCH_DATA_MAPPING MAP_ENTERINF_ORG, --  entering org
	   ARCH_CODE_MEMBER C_LIFE,
	   ARCH_CODE_MEMBER C_APPROVAL,
	   ARCH_BILLING_CCY_PAIR CCY_PAIR
where
	 NOE.ID = SPLIT.NOE_ID
    	 -- approval status
	 AND C_APPROVAL.CODE_KEY = TO_CHAR(SPLIT.APPROVE_STATUS)
	 AND C_APPROVAL.GROUP_ID = 1001015
	 -- life status
	 AND C_LIFE.CODE_KEY = TO_CHAR(SPLIT.LIFE_STATUS)
	 AND C_LIFE.GROUP_ID = 1001016
	 -- client mapping
	 AND SPLIT.SIDE_A_ORG_ID =MAP_CLIENT.INTERNAL_VALUE -- client
	 AND MAP_CLIENT.MAP_TYPE=3 -- organization
	 AND MAP_CLIENT.NAMER_ID=1000000
	 AND MAP_CLIENT.STATUS=1
	 AND MAP_CLIENT.TYPE=0
 	 -- entering org mapping
	 AND  SPLIT.ENTERING_ORG_ID=MAP_ENTERINF_ORG.INTERNAL_VALUE
	 AND MAP_ENTERINF_ORG.MAP_TYPE=3 -- organization
	 AND MAP_ENTERINF_ORG.NAMER_ID=1000000
	 AND MAP_ENTERINF_ORG.STATUS=1
	 AND MAP_ENTERINF_ORG.TYPE=0
	 -- currency pair
	 AND (
	    (NOE.BASE_INSTRUMENT_ID = CCY_PAIR.SECOND_CCY_ID AND NOE.SECONDARY_INSTRUMENT_ID= CCY_PAIR.FIRST_CCY_ID)
		 OR
	    (NOE.BASE_INSTRUMENT_ID = CCY_PAIR.FIRST_CCY_ID AND NOE.SECONDARY_INSTRUMENT_ID= CCY_PAIR.SECOND_CCY_ID)
  	     );

--
-- 214. V_FXPB_REPORT_TG  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_REPORT_TG 
(TRADE_GROUP, SIDE_A, SIDE_A_NOE_ID, SIDE_B, SIDE_B_NOE_ID, 
 CURRENCY1, QUANTITY1, CURRENCY2, NEAR_QUANTITY, NEAR_DATE, 
 NEAR_RATE, FAR_QUANTITY, FAR_QUANTITY2, FAR_DATE, FAR_RATE, 
 TIME, STATUS, TRADE_TYPE, AGREEMENT, TRADE_DATE, 
 SPOT_RATE, FORWARD_POINTS, TRADER_MARKUP, FORWARD_MARKUP, FAR_SPOT_RATE, 
 FAR_FORWARD_POINTS, FAR_TRADER_MARKUP, FAR_FORWARD_MARKUP) AS 
SELECT
/*+ first_rows */
	  (TRADE.ID)TRADE_GROUP,
	  (M1.EXTERNAL_VALUE) SIDE_A,
	   NOE_s.ID,
	   (M2.EXTERNAL_VALUE)SIDE_B,
	   NOE_b.ID,
	   (I2.NAME)CURRENCY1,
	   (NOE_S.QUANTITY)QUANTITY1,
	   (I1.NAME)CURRENCY2,
	   (NOE_S.QUANTITY2)NEAR_QUANTITY,
	   (NOE_S.VALUE_DATE)NEAR_DATE,
	   (TRADE.RATE)NEAR_RATE,
	   (NOE_S.FAR_QUANTITY)FAR_QUANTITY,
	   (NOE_S.FAR_QUANTITY2)FAR_QUANTITY2,
	   (NOE_S.FAR_VALUE_DATE)FAR_DATE,
	   (TRADE.U_FAR_RATE)FAR_RATE,
	   (TRADE.CREATION_DATE)TIME,
	   (C_TG_LG.DATA)STATUS,
	   C.DATA,
	   C_AGREEMENT.DATA,
	   TRADE.TRADE_DATE,
  	   TRADE.SPOT_RATE,
  	   TRADE.FORWARD_POINTS,
   	   TRADE.TRADER_MARKUP,
  	   TRADE.FORWARD_MARKUP,
  	   TRADE.FAR_SPOT_RATE,
  	   TRADE.FAR_FORWARD_POINTS,
  	   TRADE.FAR_TRADER_MARKUP,
  	   TRADE.FAR_FORWARD_MARKUP
FROM
	FXPB_NOE NOE_S,--seller noe
	FXPB_NOE NOE_B,--buyer noe
	FXPB_TRADE TRADE, --trade
	ARCH_DATA_MAPPING M1, -- seller da
	ARCH_DATA_MAPPING M2, -- buyer da
	A_INSTRUMENT I1, -- base currency
	A_INSTRUMENT I2, -- secondary currency
	ARCH_CODE_MEMBER C_TG_LG, -- lifecycle status
	ARCH_CODE_MEMBER C, -- trade type
	ARCH_CODE_MEMBER C_AGREEMENT -- Agreement
WHERE
 	 TRADE.TYPE = 4006 --cut all trade groups
	 AND NOE_B.ID = TRADE.TRADING_ACTIVITY_SIDE_B--get buyer ta
	 AND NOE_S.ID = TRADE.TRADING_ACTIVITY_SIDE_A--get seller ta
	 --  base currency
	 AND NOE_S.BASE_INSTRUMENT_ID=I1.ID
	 AND I1.TYPE = 5006 -- currency
	 --  secondary currency
	 AND NOE_S.SECONDARY_INSTRUMENT_ID=I2.ID
	 AND I2.TYPE = 5006 -- currency
	 -- life status
	 AND C_TG_LG.CODE_KEY = TO_CHAR(TRADE.LIFE_STATUS)
	 AND C_TG_LG.GROUP_ID = 1001017
  --trade type
  AND C.CODE_KEY=  TO_CHAR(NOE_S.TRADE_TYPE)
  AND C.GROUP_ID=1000024
	 -- side a mapping
	 AND TRADE.SIDE_A_ORG_ID=M1.INTERNAL_VALUE
	 AND M1.MAP_TYPE=3 -- organization
	 AND M1.NAMER_ID=1000000
	 AND M1.STATUS=1
	 AND M1.TYPE=0
	 -- side b mapping
	 AND TRADE.SIDE_B_ORG_ID=M2.INTERNAL_VALUE
	 AND M2.MAP_TYPE=3 -- organization
	 AND M2.NAMER_ID=1000000
	 AND M2.STATUS=1
     AND M2.TYPE=0
	 --Agreement
	 AND C_AGREEMENT.CODE_KEY=  TO_CHAR(NOE_S.AGREEMENT)
     AND C_AGREEMENT.GROUP_ID=1000032;

--
-- 215. V_FXPB_VOLMEISRESEND_EVENTLIST  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_VOLMEISRESEND_EVENTLIST 
(ID, NAME) AS 
SELECT ID, NAME
FROM ARCH_EVENT
WHERE ID in (1000030, 1000031, 1000032, 1000033)
ORDER BY NAME;

--
-- 216. V_FXPB_WEB_FUNDS  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_WEB_FUNDS 
(TRADING_PARTY, FUND_NAME) AS 
SELECT
	  MAP_TP.EXTERNAL_VALUE,
	  MAP_FUND.EXTERNAL_VALUE
FROM
	 A_ORGANIZATION A, -- tp
	  A_OBJECT_ROLE B, -- role of the tp
	  A_ORGANIZATION C, -- fund
	  A_OBJECT_ROLE D, -- role of the  fund
	  A_OBJECT_2_OBJECT E, -- relation between the tp and the fund
	ARCH_DATA_MAPPING MAP_TP,
	ARCH_DATA_MAPPING MAP_FUND,
	A_STATE_DETAIL SD  -- org status
WHERE
	  A.ID = B.OBJECT_ID
	  AND B.OBJECT_TYPE = 1000 -- org
	  AND (B.ROLE = 1000002 --bank
	  	  OR B.ROLE = 1000003) -- client
	  AND D.ROLE = 1000004 --fund
      AND E.FROM_OBJECT_ID = A.ID
	  AND E.FROM_OBJECT_TYPE = 1000
	  AND E.TO_OBJECT_ID = C.ID
	  AND E.TO_OBJECT_TYPE = 1000
	  AND E.RELATION = 1-- owns
	  AND C.ID = D.OBJECT_ID
	  AND D.OBJECT_TYPE = 1000
	  -- naming of tp
  	 AND A.ID = MAP_TP.INTERNAL_VALUE
	 AND MAP_TP.MAP_TYPE=3 -- org
	 AND MAP_TP.NAMER_ID=1000000
	 AND MAP_TP.STATUS=1
	 AND MAP_TP.TYPE=0
	 -- naming  of fund
   	 AND C.ID = MAP_FUND.INTERNAL_VALUE
	 AND MAP_FUND.MAP_TYPE=7 -- fund
	 AND MAP_FUND.NAMER_ID=1000000
	 AND MAP_FUND.STATUS=1
	 AND MAP_FUND.TYPE=0
	 -- status of funds == 'ENABLED'
	 AND SD.STATE_ID = C.STATE_ID
	 AND SD.STATUS_TYPE = 6
	 AND SD.STATUS_VALUE = 1;

--
-- 217. V_FXPB_WEB_PARTICIPANTS  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_WEB_PARTICIPANTS 
(PARTICIPANT_NAME, PARTICIPANT_ROLE, PARTNER_ID, DOMAIN_ID, ROLE_ID, 
 STATUS) AS 
SELECT
     (A.EXTERNAL_VALUE)PARTICIPANT_NAME,
	 (C1.DATA)PARTICIPANT_ROLE ,
	 1000000,
	  1000000,
	  E.ROLE,
	  (M.DATA)STATUS
FROM
	 ARCH_DATA_MAPPING A, -- participant name
	 A_OBJECT_ROLE E, -- participant role
	 A_ORGANIZATION F, -- parent organization
	 ARCH_CODE_MEMBER C1, -- org role
	 A_STATE_DETAIL D,  -- org status
	 ARCH_CODE_MEMBER M
WHERE
	 A.MAP_TYPE = 3  AND A.TYPE=0
	 AND A.INTERNAL_VALUE = F.ID
	 AND E.OBJECT_ID = F.ID
	 AND E.OBJECT_TYPE = 1000 -- org
	 AND C1.CODE_KEY = TO_CHAR(E.ROLE)
	 AND C1.GROUP_ID=1000000 --FXPBOrgRole
	 AND A.NAMER_ID = 1000000
	 AND D.STATE_ID = F.STATE_ID
	 AND D.STATUS_TYPE = 6
	 AND D.STATUS_VALUE <> -1	--org state != 'DELETED'
	 AND M.GROUP_ID = 6
	 AND M.CODE_KEY = D.STATUS_VALUE;

--
-- 218. V_FXPB_WEB_PORTFOLIO  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_WEB_PORTFOLIO 
(ORGANIZATION_ID, ORGANIZATION_NAME, PORTFOLIO_ID, PORTFOLIO_NAME, DESCRIPTION, 
 STATUS, STATUS_VAL) AS 
SELECT
		PORTFOLIO.ORGANIZATION_ID,
		D_MAP_ORG.EXTERNAL_VALUE AS  ORGANIZATION_NAME,
		PORTFOLIO.ID AS PORTFOLIO_ID,
		D_MAP_NAME.EXTERNAL_VALUE AS PORTFOLIO_NAME,
		 PORTFOLIO.DESCRIPTION,PORTFOLIO.STATUS,
		 M1.DATA AS STATUS_VAL
FROM
	FXPB_PORTFOLIO PORTFOLIO,
	ARCH_DATA_MAPPING D_MAP_ORG,
	ARCH_DATA_MAPPING D_MAP_NAME,
	ARCH_CODE_MEMBER M1
WHERE
	-- name of org
	PORTFOLIO.ORGANIZATION_ID = D_MAP_ORG.INTERNAL_VALUE
	AND D_MAP_ORG.MAP_TYPE = 3
	AND D_MAP_ORG.NAMER_ID=1000000
	AND D_MAP_ORG.STATUS=1
	AND D_MAP_ORG.TYPE=0
	-- name of portfolio
	AND PORTFOLIO.ID = D_MAP_NAME.INTERNAL_VALUE
	AND D_MAP_NAME.MAP_TYPE = 10
	AND D_MAP_NAME.NAMER_ID=1000000
	AND D_MAP_NAME.STATUS=1
	AND D_MAP_NAME.TYPE=0
	-- status value (String)
	AND M1.GROUP_ID = 6
	AND M1.CODE_KEY = PORTFOLIO.STATUS;

--
-- 219. V_FXPB_WEB_PRESET_ALLOCATION  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_WEB_PRESET_ALLOCATION 
(ORG_ID, ORG_NAME, ALLOC_ID, ALLOCATION_NAME, TYPE, 
 TYPE_VALUE, QUANTITY, FUND_NAME, ALLOCATION, STATUS, 
 STATUS_VAL) AS 
SELECT PRE_ALLOC.ORG_ID, D_MAP_ORG.EXTERNAL_VALUE,PRE_ALLOC.ID, PRE_ALLOC.NAME, PRE_ALLOC.TYPE,
	M.DATA AS TYPE_VALUE, PRE_ALLOC.QUANTITY, D_MAP_FUND.EXTERNAL_VALUE, PRE_ALLOC_DET.ALLOCATION,
	PRE_ALLOC.STATUS, M1.DATA AS STATUS_VAL
FROM
	FXPB_PRESET_ALLOCATION PRE_ALLOC,
	FXPB_PRESET_ALLOCATION_DETAIL PRE_ALLOC_DET,
	ARCH_DATA_MAPPING D_MAP_ORG,
	ARCH_DATA_MAPPING D_MAP_FUND,
	ARCH_CODE_MEMBER M,
	ARCH_CODE_MEMBER M1
WHERE
	PRE_ALLOC.ID = PRE_ALLOC_DET.PRESET_ALLOCATION_ID
	-- name of org
	AND PRE_ALLOC.ORG_ID = D_MAP_ORG.INTERNAL_VALUE
	AND D_MAP_ORG.MAP_TYPE = 3
	AND D_MAP_ORG.NAMER_ID=1000000
	AND D_MAP_ORG.STATUS=1
	AND D_MAP_ORG.TYPE=0
	-- name of fund
	AND PRE_ALLOC_DET.FUND_ID = D_MAP_FUND.INTERNAL_VALUE
	AND D_MAP_FUND.MAP_TYPE = 7
	AND D_MAP_FUND.NAMER_ID=1000000
	AND D_MAP_FUND.STATUS=1
	AND D_MAP_FUND.TYPE=0
	-- type value (String)
	AND M.GROUP_ID = 1000031
	AND M.CODE_KEY = PRE_ALLOC.TYPE
	-- status value (String)
	AND M1.GROUP_ID = 6
	AND M1.CODE_KEY = PRE_ALLOC.STATUS;

--
-- 220. V_FXPB_WEB_USER  (View) 
--
CREATE OR REPLACE FORCE VIEW V_FXPB_WEB_USER 
(USER_NAME, PARENT_NAME, PARENT_ROLE, TITLE, FIRST_NAME, 
 LAST_NAME, ROLE, PERSON_ID, NAMER_ID) AS 
select
     (A.EXTERNAL_VALUE)USER_NAME,
	 (D.EXTERNAL_VALUE)PARENT_NAME,
	 (C1.DATA)PARENT_ROLE ,
	 B.TITLE,
	 B.FIRST_NAME,
	 B.LAST_NAME,
	 H.ROLE,
	 B.ID,
	 A.NAMER_ID
from
	 ARCH_DATA_MAPPING A, -- user name
	 A_PERSON B,  -- user
	 A_OBJECT_2_OBJECT C, -- person 2 organization
	 ARCH_DATA_MAPPING D, -- org name
	 A_OBJECT_ROLE E, -- org role
	 A_ORGANIZATION F, -- parent organization
--	 WEB_USER_SETTINGS G,
	 A_OBJECT_ROLE H,
	 ARCH_CODE_MEMBER C1 -- org role
where
	 A.MAP_TYPE = 4  AND A.TYPE=0
	 AND D.MAP_TYPE = 3  AND D.TYPE=0
	 AND D.NAMER_ID = A.NAMER_ID
	 AND A.INTERNAL_VALUE = B.ID
	 AND B.ID = C.TO_OBJECT_ID
	 AND C.TO_OBJECT_TYPE = 3000 -- person
	 AND C.FROM_OBJECT_ID = D.INTERNAL_VALUE
	 AND C.FROM_OBJECT_TYPE = 1000 -- organization
	 AND E.OBJECT_ID = C.FROM_OBJECT_ID
	 AND E.OBJECT_TYPE = 1000 -- org
	 AND F.ID = E.OBJECT_ID
	 AND B.ID = H.OBJECT_ID
	 AND H.OBJECT_TYPE = 3000 -- person
	 AND C1.CODE_KEY = TO_CHAR(E.ROLE) AND GROUP_ID=1000000 --FXPBOrgRole;

--
-- 221. V_HARMONY_REPORT_GIVEUPS  (View) 
--
CREATE OR REPLACE FORCE VIEW V_HARMONY_REPORT_GIVEUPS 
(ID, DOMAIN_ID, PARTNER_ID, TIME, UUID, 
 NOE_REF, TRADING_PARTY, ENTERING_PARTY, SUBMITTER, COUNTER_PARTY, 
 VALUE_DATE, SECOND_CCY, BASE_CCY, VALUE_RATE, TRADE_DATE, 
 FAR_VALUE_RATE, FAR_VALUE_DATE, TRADE_TYPE, CONTRACT_DIRECTION, CONTRACT_TYPE, 
 CONTRACT_QTY, CLIENT_REF, TRADER, UNUSED_ID, HARMONY_GIVEUP_ID, 
 OPERATION, OBJECT_TYPE, FAR_QTY, DESCRIPTION, PB, 
 FIXING_DATE, REPORTER, STATUS, REASON, LIFE_STATUS, 
 LIFE_CYCLE_REASON, RECON_STATUS, RECONCILIATION_REASON, APPROVAL_STATUS, APPROVE_REASON, 
 NAMER_ID, TRADER_NAMER_ID) AS 
select
DEALS.ID, DOMAIN_ID, PARTNER_ID, TIME, UUID, NOE_REF,
(TPARTY_MAP.EXTERNAL_VALUE)TRADING_PARTY, (EPARTY_MAP.EXTERNAL_VALUE)ENTERING_PARTY,
(SUBMITTER_MAP.EXTERNAL_VALUE)SUBMITTER, (CPARTY_MAP.EXTERNAL_VALUE)COUNTER_PARTY,
(DEALS.F5)VALUE_DATE, (SECOND_CCY.NAME)SECOND_CCY, (BASE_CCY.NAME)BASE_CCY, (DEALS.F8)VALUE_RATE,
(DEALS.F9)TRADE_DATE, (DEALS.F10)FAR_VALUE_RATE,
(DEALS.F11)FAR_VALUE_DATE,
(TRADE_TYPE.DATA)TRADE_TYPE,
(DIRECTION.DATA)CONTRACT_DIRECTION,
(CONTRACT_TYPE.DATA)CONTRACT_TYPE,
(DEALS.F15)CONTRACT_QTY,
(DEALS.F16)CLIENT_REF, (TRADER_MAP.EXTERNAL_VALUE)TRADER, (DEALS.F18)UNUSED_ID, (DEALS.F19)HARMONY_GIVEUP_ID, (DEALS.F20)OPERATION,
(DEALS.F21)OBJECT_TYPE, (DEALS.F22)FAR_QTY, (DEALS.F23)DESCRIPTION, (PB_MAP.EXTERNAL_VALUE)PB, (DEALS.F25)FIXING_DATE, (DEALS.F26)REPORTER,
DEALS.STATUS, REASON,
(LIFE.DATA)LIFE_STATUS, LIFE_CYCLE_REASON,
(RECON.DATA)RECON_STATUS, RECONCILIATION_REASON,
(APPROVAL.DATA)APPROVAL_STATUS, APPROVE_REASON,
--(SIDEAROLE.DATA)SIDE_A_ROLE,(SIDEBROLE.DATA)SIDE_B_ROLE,
--(EXT.F3)AGREEMENT_TYPE,
--(EXT.F4)INSTRUMENT_ID,
(TPARTY_MAP.NAMER_ID)NAMER_ID,
(TRADER_MAP.NAMER_ID)TRADER_NAMER_ID
 from
ARCH_GENERIC_NOE_DEALS DEALS,
--ARCH_GENERIC_NOE_DEALS_EXT EXT,
ARCH_DATA_MAPPING TPARTY_MAP,
ARCH_DATA_MAPPING EPARTY_MAP,
ARCH_DATA_MAPPING SUBMITTER_MAP,
ARCH_DATA_MAPPING TRADER_MAP,
ARCH_DATA_MAPPING CPARTY_MAP,
ARCH_DATA_MAPPING PB_MAP,
A_INSTRUMENT BASE_CCY,
A_INSTRUMENT SECOND_CCY,
ARCH_CODE_MEMBER TRADE_TYPE,
ARCH_CODE_MEMBER DIRECTION,
ARCH_CODE_MEMBER CONTRACT_TYPE,
ARCH_CODE_MEMBER RECON,
ARCH_CODE_MEMBER APPROVAL,
ARCH_CODE_MEMBER LIFE
--ARCH_CODE_MEMBER SIDEAROLE,
--ARCH_CODE_MEMBER SIDEBROLE
where
--DEALS.ID = EXT.ID AND
-- find trading party map type
TPARTY_MAP.INTERNAL_VALUE=DEALS.F1 AND
TPARTY_MAP.MAP_TYPE=3 AND
TPARTY_MAP.TYPE=0 AND
TPARTY_MAP.STATUS=1 AND
-- find entering party map type
EPARTY_MAP.INTERNAL_VALUE=DEALS.F2 AND
EPARTY_MAP.MAP_TYPE=3 AND
EPARTY_MAP.TYPE=0 AND
EPARTY_MAP.STATUS=1 AND
EPARTY_MAP.NAMER_ID=TPARTY_MAP.NAMER_ID AND
-- find submitter name map type
SUBMITTER_MAP.INTERNAL_VALUE=DEALS.F3 AND
SUBMITTER_MAP.MAP_TYPE=4 AND
SUBMITTER_MAP.TYPE=0 AND
SUBMITTER_MAP.STATUS=1 AND
SUBMITTER_MAP.NAMER_ID=TPARTY_MAP.NAMER_ID AND
-- find counter party map type
CPARTY_MAP.INTERNAL_VALUE=DEALS.F4 AND
CPARTY_MAP.MAP_TYPE=3 AND
CPARTY_MAP.TYPE=0 AND
CPARTY_MAP.STATUS=1 AND
CPARTY_MAP.NAMER_ID=TPARTY_MAP.NAMER_ID AND
-- find pb map type
PB_MAP.INTERNAL_VALUE=DEALS.F24 AND
PB_MAP.MAP_TYPE=3 AND
PB_MAP.TYPE=0 AND
PB_MAP.STATUS=1 AND
PB_MAP.NAMER_ID=TPARTY_MAP.NAMER_ID AND
-- find trader name map type
TRADER_MAP.INTERNAL_VALUE(+)=DEALS.F17 AND
TRADER_MAP.MAP_TYPE(+)=4 AND
TRADER_MAP.TYPE(+)=0 AND
TRADER_MAP.STATUS(+)=1 AND
-- Map currencies
BASE_CCY.TYPE=5006 AND
BASE_CCY.ID = DEALS.F7 AND
SECOND_CCY.TYPE=5006 AND
SECOND_CCY.ID = DEALS.F6 AND
-- find trade type
TRADE_TYPE.GROUP_ID=300024 AND
TRADE_TYPE.CODE_KEY = DEALS.F12 AND
-- find direction
DIRECTION.GROUP_ID=300021 AND
DIRECTION.CODE_KEY = DEALS.F13 AND
-- find contract type
CONTRACT_TYPE.GROUP_ID=20 AND
CONTRACT_TYPE.CODE_KEY = DEALS.F14 AND
-- find RECON
RECON.GROUP_ID=300012 AND
RECON.CODE_KEY = DEALS.RECONCILIATION_STATUS AND
-- find APPROVAL
APPROVAL.GROUP_ID=300011 AND
APPROVAL.CODE_KEY = DEALS.APPROVE_STATUS AND
-- find LIFE
LIFE.GROUP_ID=300010 AND
LIFE.CODE_KEY = DEALS.LIFE_CYCLE_STATUS
--AND
-- find role of side a
--SIDEAROLE.GROUP_ID=300022 AND
--SIDEAROLE.CODE_KEY = EXT.F1 AND
-- find role of side b
--SIDEBROLE.GROUP_ID=300022 AND
--SIDEBROLE.CODE_KEY = EXT.F2;

--
-- 249. ARCH_GENERIC_REQUEST_DEALS_PK  (Constraint) 
--
ALTER TABLE ARCH_GENERIC_REQUEST_DEALS ADD CONSTRAINT ARCH_GENERIC_REQUEST_DEALS_PK PRIMARY KEY (ID);


--
-- 222. INSTRUMENT_TYPE  (Column) 
--
ALTER TABLE ARCH_BILLING_FLAT_FEE ADD (INSTRUMENT_TYPE  NUMBER(10)                   NOT NULL);

--
-- 223. INSTRUMENT_TYPE  (Column) 
--
ALTER TABLE ARCH_BILLING_LINE ADD (INSTRUMENT_TYPE  NUMBER(10)                    NULL);
update ARCH_BILLING_LINE set instrument_type = 1;
alter table ARCH_BILLING_LINE modify INSTRUMENT_TYPE   not null;

--
-- 224. INSTRUMENT_TYPE  (Column) 
--
ALTER TABLE ARCH_BILLING_PER_MILLION ADD (INSTRUMENT_TYPE  NUMBER(10)                    NULL);
update ARCH_BILLING_PER_MILLION  set instrument_type = 1;
alter table  ARCH_BILLING_PER_MILLION  modify INSTRUMENT_TYPE   not null;


--
-- 225. INSTRUMENT_TYPE  (Column) 
--
ALTER TABLE ARCH_BILLING_RULE ADD (INSTRUMENT_TYPE  NUMBER(10)                   NULL);
update ARCH_BILLING_RULE   set instrument_type = 1;
alter  table ARCH_BILLING_RULE   modify INSTRUMENT_TYPE   not null;


--
-- 226. ARCH_DATA_MAPPING  (Table) 
--
ALTER TABLE ARCH_DATA_MAPPING NOCACHE;

--
-- 227. REQUEST_DEALS_ID  (Column) 
--
ALTER TABLE ARCH_GENERIC_NOE_DEALS ADD (REQUEST_DEALS_ID  NUMBER(30));

--
-- 228. REQUEST_DEALS_ID  (Column) 
--
ALTER TABLE ARCH_GENERIC_OA_DEALS ADD (REQUEST_DEALS_ID  NUMBER(30));

--
-- 229. DESCRIPTION  (Column) 
--
ALTER TABLE ARCH_VAL_FUNCTION_PARAM ADD (DESCRIPTION  VARCHAR2(255));

--
-- 230. FUNCTION_ID_REF  (Column) 
--
ALTER TABLE ARCH_VAL_FUNCTION_PARAM DROP COLUMN FUNCTION_ID_REF;

--
-- 231. FUNCTION_PARAM_ID_REF  (Column) 
--
ALTER TABLE ARCH_VAL_FUNCTION_PARAM DROP COLUMN FUNCTION_PARAM_ID_REF;


--
-- 236. ARCH_VAL_SOURCE_DATA_TYPE_PK  (Constraint) 
--
ALTER TABLE ARCH_VAL_SOURCE_DATA_TYPE DROP PRIMARY KEY CASCADE;

--
-- 237. ARCH_VAL_SOURCE_DATA_TYPES_PK  (Constraint) 
--
ALTER TABLE ARCH_VAL_SOURCE_DATA_TYPE ADD CONSTRAINT ARCH_VAL_SOURCE_DATA_TYPES_PK PRIMARY KEY (ID);

--
-- 238. ARC_VAL_SOU_DATA_TYPE_COD_G_FK  (Constraint) 
--
ALTER TABLE ARCH_VAL_SOURCE_DATA_TYPE ADD CONSTRAINT ARC_VAL_SOU_DATA_TYPE_COD_G_FK FOREIGN KEY (CODE_GROUP_ID) 
    REFERENCES ARCH_CODE_GROUP (ID);

--
-- 239. A_TA_TA_REL_PK  (Constraint) 
--
-- ALTER TABLE A_TA_TA_REL ADD CONSTRAINT A_TA_TA_REL_PK PRIMARY KEY (CHILD_TA_ID, PARENT_TA_ID, RELATION);

--
-- 240. PRESET_ALLOC_DETAIL_ORG_FK  (Constraint) 
--
ALTER TABLE FXPB_PRESET_ALLOCATION_DETAIL DROP CONSTRAINT PRESET_ALLOC_DETAIL_ORG_FK;

--
-- 241. NOE_REQUEST_DEALS_CONSTRAINT  (Constraint) 
--
ALTER TABLE ARCH_GENERIC_NOE_DEALS ADD CONSTRAINT NOE_REQUEST_DEALS_CONSTRAINT FOREIGN KEY (REQUEST_DEALS_ID) 
    REFERENCES ARCH_GENERIC_REQUEST_DEALS (ID);

--
-- 250. ARCH_VAL_MARKET_DATA_PK  (Constraint) 
--
ALTER TABLE ARCH_VAL_MARKET_DATA ADD CONSTRAINT ARCH_VAL_MARKET_DATA_PK PRIMARY KEY (ID);


--
-- 242. OA_REQUEST_DEALS_CONSTRAINT  (Constraint) 
--
ALTER TABLE ARCH_GENERIC_OA_DEALS ADD CONSTRAINT OA_REQUEST_DEALS_CONSTRAINT FOREIGN KEY (REQUEST_DEALS_ID) 
    REFERENCES ARCH_GENERIC_REQUEST_DEALS (ID);

--
-- 243. ARCH_VAL_FUNCTION_PARAM_PK  (Constraint) 
--
ALTER TABLE ARCH_VAL_FUNCTION_PARAM DROP PRIMARY KEY CASCADE;

--
-- 244. ARCH_VAL_FUNC_PAR_PARAM_FK  (Constraint) 
--
--ALTER TABLE ARCH_VAL_FUNCTION_PARAM DROP CONSTRAINT ARCH_VAL_FUNC_PAR_PARAM_FK;

--
-- 245. ARCH_VAL_FUNC_PAR_SOUR_DATA_FK  (Constraint) 
--
--ALTER TABLE ARCH_VAL_FUNCTION_PARAM DROP CONSTRAINT ARCH_VAL_FUNC_PAR_SOUR_DATA_FK;

--
-- 246. ARCH_VAL_FUN_PAR_FUNC_FK  (Constraint) 
--
--ALTER TABLE ARCH_VAL_FUNCTION_PARAM DROP CONSTRAINT ARCH_VAL_FUN_PAR_FUNC_FK;

--
-- 247. ARCH_VAL_FUNCTION_PARAMS_PK  (Constraint) 
--
ALTER TABLE ARCH_VAL_FUNCTION_PARAM ADD CONSTRAINT ARCH_VAL_FUNCTION_PARAMS_PK PRIMARY KEY (ID);

--
-- 248. ARCH_CONTEXT_MARKET_DATA_FK  (Constraint) 
--
ALTER TABLE ARCH_VAL_MARKET_CONTEXT ADD CONSTRAINT ARCH_CONTEXT_MARKET_DATA_FK FOREIGN KEY (MARKET_DATA_ID) 
    REFERENCES ARCH_VAL_MARKET_DATA (ID);



--
-- 251. ARCH_VAL_MARKET_DATA_NAME_UNIQ  (Constraint) 
--
ALTER TABLE ARCH_VAL_MARKET_DATA ADD CONSTRAINT ARCH_VAL_MARKET_DATA_NAME_UNIQ UNIQUE (NAME);

--
-- 252. ARCH_VAL_SOURCE_DATA_PK  (Constraint) 
--
ALTER TABLE ARCH_VAL_SOURCE_DATA ADD CONSTRAINT ARCH_VAL_SOURCE_DATA_PK PRIMARY KEY (ID);

--
-- 253. ARCH_SOU_ID_SOU_DATA_TYPE_UNQ  (Constraint) 
--
ALTER TABLE ARCH_VAL_SOURCE_DATA ADD CONSTRAINT ARCH_SOU_ID_SOU_DATA_TYPE_UNQ UNIQUE (SOURCE_DATA_TYPE_ID, SOURCE_ID);

--
-- 254. A_INSTRUMENT_DBL_BARR_OPT_PK  (Constraint) 
--
ALTER TABLE A_INSTRUMENT_DBL_BARRIER_OPT ADD CONSTRAINT A_INSTRUMENT_DBL_BARR_OPT_PK PRIMARY KEY (ID);

--
-- 255. A_INSTRUMENT_DIGITAL_OPT_PK  (Constraint) 
--
ALTER TABLE A_INSTRUMENT_DIGITAL_OPT ADD CONSTRAINT A_INSTRUMENT_DIGITAL_OPT_PK PRIMARY KEY (ID);

--
-- 256. FXPB_CUT_OFF_TIMES_PK  (Constraint) 
--
ALTER TABLE FXPB_CUT_OFF_TIMES ADD CONSTRAINT FXPB_CUT_OFF_TIMES_PK PRIMARY KEY (ID);

--
-- 257. PK_FXPB_DEFAULT_CCY_PAIRS  (Constraint) 
--
ALTER TABLE FXPB_DEFAULT_CCY_PAIRS ADD CONSTRAINT PK_FXPB_DEFAULT_CCY_PAIRS PRIMARY KEY (ID);

--
-- 258. FXPB_DEFAULT_CCY_PAIRS_UNQ1  (Constraint) 
--
ALTER TABLE FXPB_DEFAULT_CCY_PAIRS ADD CONSTRAINT FXPB_DEFAULT_CCY_PAIRS_UNQ1 UNIQUE (CCY_PAIR);

--
-- 259. PK_FXPB_MD_OPTION_EXT  (Constraint) 
--
ALTER TABLE FXPB_MD_OPTION_EXT ADD CONSTRAINT PK_FXPB_MD_OPTION_EXT PRIMARY KEY (ID);

--
-- 260. FXPB_OPTION_TRADE_PK  (Constraint) 
--
ALTER TABLE FXPB_OPTION_TRADE ADD CONSTRAINT FXPB_OPTION_TRADE_PK PRIMARY KEY (ID);

--
-- 261. FXPB_ORG_ROLE_2_EVENT_PK  (Constraint) 
--
ALTER TABLE FXPB_ORG_ROLE_2_EVENT ADD CONSTRAINT FXPB_ORG_ROLE_2_EVENT_PK PRIMARY KEY (ID);

--
-- 262. FXPB_ORG_ROLE_2_EVENT_FK  (Constraint) 
--
ALTER TABLE FXPB_ORG_ROLE_2_EVENT ADD CONSTRAINT FXPB_ORG_ROLE_2_EVENT_FK FOREIGN KEY (EVENT_ID) 
    REFERENCES ARCH_EVENT (ID);

--
-- 263. PK_JPMC_GENERIC_MUREX_DEALS  (Constraint) 
--
ALTER TABLE JPMC_GENERIC_MUREX_DEALS ADD CONSTRAINT PK_JPMC_GENERIC_MUREX_DEALS PRIMARY KEY (ID);

--
-- 264. ARCH_VAL_MARKET_2_SOUR_DATA_PK  (Constraint) 
--
ALTER TABLE ARCH_VAL_MARKET_2_SOURCE_DATA ADD CONSTRAINT ARCH_VAL_MARKET_2_SOUR_DATA_PK PRIMARY KEY (ID);

--
-- 265. ARCH_VAL_MAR_2_SOU_DATA_MAR_FK  (Constraint) 
--
ALTER TABLE ARCH_VAL_MARKET_2_SOURCE_DATA ADD CONSTRAINT ARCH_VAL_MAR_2_SOU_DATA_MAR_FK FOREIGN KEY (MARKET_DATA_ID) 
    REFERENCES ARCH_VAL_MARKET_DATA (ID);

--
-- 266. ARCH_VAL_MAR_2_SOU_DATA_SOU_FK  (Constraint) 
--
ALTER TABLE ARCH_VAL_MARKET_2_SOURCE_DATA ADD CONSTRAINT ARCH_VAL_MAR_2_SOU_DATA_SOU_FK FOREIGN KEY (SOURCE_DATA_ID) 
    REFERENCES ARCH_VAL_SOURCE_DATA (ID);

--
-- 267. ARCH_VAL_MD_CURRENCY_PK  (Constraint) 
--
ALTER TABLE ARCH_VAL_MD_CURRENCY ADD CONSTRAINT ARCH_VAL_MD_CURRENCY_PK PRIMARY KEY (ID);

--
-- 268. ARCH__VAL_MD_CUR_INSTRUMENT_FK  (Constraint) 
--
ALTER TABLE ARCH_VAL_MD_CURRENCY ADD CONSTRAINT ARCH__VAL_MD_CUR_INSTRUMENT_FK FOREIGN KEY (INSTRUMENT_ID) 
    REFERENCES A_INSTRUMENT (ID);

--
-- 269. ARCH_VAL_MD_DISCOUNT_CURVE_PK  (Constraint) 
--
ALTER TABLE ARCH_VAL_MD_DISCOUNT_CURVE ADD CONSTRAINT ARCH_VAL_MD_DISCOUNT_CURVE_PK PRIMARY KEY (ID);

--
-- 270. ARCH_VAL_INST_DATE_SOUR_UNIQ  (Constraint) 
--
ALTER TABLE ARCH_VAL_MD_DISCOUNT_CURVE ADD CONSTRAINT ARCH_VAL_INST_DATE_SOUR_UNIQ UNIQUE (SOURCE_ID, INSTRUMENT_ID, DISCOUNT_DATE);

--
-- 271. ARCH_VAL_MD_DISC_CURVE_INST  (Constraint) 
--
ALTER TABLE ARCH_VAL_MD_DISCOUNT_CURVE ADD CONSTRAINT ARCH_VAL_MD_DISC_CURVE_INST FOREIGN KEY (INSTRUMENT_ID) 
    REFERENCES A_INSTRUMENT (ID);

--
-- 272. ARCH_VAL_MD_OPTION_PK  (Constraint) 
--
ALTER TABLE ARCH_VAL_MD_OPTION ADD CONSTRAINT ARCH_VAL_MD_OPTION_PK PRIMARY KEY (ID);

--
-- 273. ARCH_VAL_INST_SOUR_UNIQ  (Constraint) 
--
ALTER TABLE ARCH_VAL_MD_OPTION ADD CONSTRAINT ARCH_VAL_INST_SOUR_UNIQ UNIQUE (INSTRUMENT_ID, SOURCE_ID);

--
-- 274. ARCH_VAL_MD_OPTION_INS_FK  (Constraint) 
--
ALTER TABLE ARCH_VAL_MD_OPTION ADD CONSTRAINT ARCH_VAL_MD_OPTION_INS_FK FOREIGN KEY (INSTRUMENT_ID) 
    REFERENCES A_INSTRUMENT (ID);





CREATE INDEX ARCH_LOG_REF ON ARCH_LOG(REF) 
TABLESPACE TR_BIG_INDEX
STORAGE    (
            INITIAL          10M
            NEXT             5M
           );
CREATE INDEX ARCH_AUDIT_UUID ON ARCH_AUDIT(UUID) TABLESPACE TR_BIG_INDEX
STORAGE    (
            INITIAL          10M
            NEXT             5M
           );

REM
REM compile views
REM 


REM
REM added according to Ziv. hadles the billing changes.
REM
insert into ARCH_OBJECT_PROPS select ARCH_OBJECT_PROPS_SEQ.nextval, object_id,object_type,318,1
from (	select object_id,object_type  
	from ARCH_OBJECT_PROPS 
	where object_id not in (select object_id from ARCH_OBJECT_PROPS where code_id =318) 
	and     object_type = 20001
	group by object_id,object_type
        );
Delete ARCH_OBJECT_PROPS
	where OBJECT_TYPE = 20001
	AND value <> '1'
	AND CODE_ID = 318;

insert into arch_val_md_currency 
	select ARCH_VAL_MD_CURRENCY_SEQ.nextval,id,spot_rate,currency_date,2 
	from arch_credit_currency;

DROP TABLE ARCH_CREDIT_CURRENCY;

-- DROP TABLE AAA_TEST_TABLE;
-- DROP TABLE AAA_TEST_TRADES;
DROP VIEW V_A_REPORT_COUPLED_ACCOUNTS;

CREATE INDEX fxpb_noe_status_idx1
 ON FXPB_NOE(LIFE_STATUS, RECON_STATUS)
 LOGGING
 TABLESPACE TR_BIG_INDEX
 STORAGE    (
             INITIAL          10M
             NEXT             5M
            )
 NOPARALLEL;


CREATE INDEX fxpb_noe_rate
 ON FXPB_NOE(TRADE_DATE, RATE, QUANTITY)
  LOGGING
  TABLESPACE TR_BIG_INDEX
  STORAGE    (
              INITIAL          10M
              NEXT             5M
             )
  NOPARALLEL;
  