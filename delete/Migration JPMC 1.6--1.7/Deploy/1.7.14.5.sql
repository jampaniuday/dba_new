----------------------------------------------------------------------------------------------------------
--													--
-- Date : 03-Aug-2004											--
-- Company: Traiana Inc. 										--
-- Author : Isaac Raz 											--
--													--
-- Patch format:											--
-- 	Fixed header actions:										--
--		-Spool file										--
--		-Set options										--
--		-Alter constraints enable (Target: validate all FKs before updates)			--
--		-Alter constraints disable								--
--	patch updates:											--
--		-Sequential append of scripts from all the builds at the delivery			--
--	Fixed footer actions:										--
-- 		-Update properties									--
--		-Run others.sql 									--
--		-Mark version to DB									--
--		-Enable constraints									--
--		-Commit changes										--
--	Notes:												--
--		1. Do not use commit within the patches updates						--
--													--
-- Updates Tacking:											--
-- 13-Jun-2004: 											--
--	** Propertiese update (at the footer) added functionality: Obsolete properties removal.		--	
-- 28-Jun-2004												--
--	
----------------------------------------------------------------------------------------------------------
--WHENEVER SQLERROR EXIT -1
--WHENEVER OSERROR EXIT  -2
--spool 1.7.14.5.1.log
set echo on
set heading on
set feedback on
set scan off
set sqlblank on


exec alter_constraints('enable');
exec alter_constraints('disable');

--********************************************************************************************************--
--**			F I X E D   H E A D E R	 ends here 	 					**--
--********************************************************************************************************--

--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
-- build 1.7.14.5.1

delete from ARCH_CODE_GROUP where id=1100048;
INSERT INTO ARCH_CODE_GROUP ( ID, NAME, STATUS, DOMAIN_ID, ATTR, SOURCE, SOLUTION_NAME,
GROUP_COMMENT, KEYS_DATA_TYPE, VALUES_DATA_TYPE, CODES_CLASS ) VALUES ( 
4032, 'MessageGroupNames', 1, 100, 0, NULL, 'ALL', 'Message Group Names for connectivity'
, 'String', 'String', NULL);

delete from ARCH_CODE_MEMBER where GROUP_ID=1100048 and CODE_KEY='1000200';
INSERT INTO ARCH_CODE_MEMBER ( GROUP_ID, CODE_KEY, DATA, NAME, CODE_COMMENT,
STATUS ) VALUES ( 
4032, '1000200', 'FX and Options', 'FX and Options', 'Forth Code Group', 1);

delete from ARCH_CODE_MEMBER where GROUP_ID=1100048 and CODE_KEY='1000900';
delete from ARCH_CODE_MEMBER where GROUP_ID=1100048 and CODE_KEY='1000800';
delete from ARCH_CODE_MEMBER where GROUP_ID=1100048 and CODE_KEY='1001000';
INSERT INTO ARCH_CODE_MEMBER ( GROUP_ID, CODE_KEY, DATA, NAME, CODE_COMMENT,
STATUS ) VALUES (
4032, '1000900', 'Baxter', 'Baxter', 'Forth Code Group', 1);
INSERT INTO ARCH_CODE_MEMBER ( GROUP_ID, CODE_KEY, DATA, NAME, CODE_COMMENT,
STATUS ) VALUES (
4032, '1000800', 'Caxton', 'Caxton', 'Forth Code Group', 1);
-- CR 6789 starts here
INSERT INTO ARCH_CODE_MEMBER ( GROUP_ID, CODE_KEY, DATA, NAME, CODE_COMMENT,
STATUS ) VALUES (
4032, '1001000', 'Vega', 'Vega', 'Vega Client', 1);
-- CR 6789 ends here
--- CR  7025
INSERT INTO ARCH_CODE_MEMBER ( GROUP_ID, CODE_KEY, DATA, NAME, CODE_COMMENT,
STATUS ) VALUES (
4032, '1001100', 'OakHill', 'OakHill', 'Oakhill messages', 1);

---CR7025
INSERT INTO ARCH_FLOW_DEF ( ID, NAME, FLOW_CLASS, FLOW_MODE ) VALUES ( 
1100061, 'OakhillFlow', 'com.traiana.sol.jpmc.integration.oakhill.OakHillFlow', 1);

-- CR7025
INSERT INTO ARCH_MSG_GROUP_DETAIL ( MSG_GROUP_ID, PROTOCOL_MSG_ID ) VALUES ( 
1001100, 1100061);

-- CR 7025
INSERT INTO ARCH_MSG_LOGIC_INFO ( ID, ATTR, DESCRIPTION, PRE_FLOW_ID,
FLOW_ID ) VALUES ( 
1100061, 3, 'OakhillFlow', NULL, 1100061);

-- CR 7025 
INSERT INTO ARCH_MSG_PROTOCOL_INFO ( ID, LOGIC_MSG_ID, IN_TRANSFORMER, OUT_TRANSFORMER, DESCRIPTION,
NAME ) VALUES ( 
1100061, 1100061, 'OakHillDoc-DelimiterString', '', 'OakhillFlow', 'OakhillFlow');

-- CR 7025
INSERT INTO ARCH_MSG_TOKEN ( PROTOCOL_MSG_ID, TOKEN ) VALUES ( 
1100061, NULL);

CREATE OR REPLACE VIEW V_FXPB_REPORT_NOE_FRONT_PAGE ( ID,
CLIENT_REF, APPROVAL, APPR_REASON, RECON,
ALLOC, LIFECYCLE, CREATION_DATE, ENTERING_ORG,
SETTLEMENT_DATE, SUBMITTER_PERSON, TRADE_DATE, RATE,
SIDE_A, SIDE_B, TRADER, U_FAR_RATE,
BASE_CCY, SECONDARY_CCY, CONTRACT_TYPE, DIRECTION,
QUANTITY, QUANTITY2, VALUE_DATE, FAR_QUANTITY,
FAR_QUANTITY2, FAR_VALUE_DATE, REPORTER, TRADE_TYPE,
NEW_NOE, OLD_NOE, IS_DUMMY, AGREEMENT,
SPOT_RATE, FORWARD_POINTS, TRADER_MARKUP, FORWARD_MARKUP,
FAR_SPOT_RATE, FAR_FORWARD_POINTS, FAR_TRADER_MARKUP, FAR_FORWARD_MARKUP
 ) AS SELECT  NOE.ID,
 NOE.EXTERNAL_REF,
 C_APPR.DATA,
 (NOE.APPROVE_STATUS_REASON)APPR_REASON,
 C_RECON.DATA,
 C_ALLOC.DATA,
 C_LIFE.DATA,
 NOE.CREATION_DATE,
 I.EXTERNAL_VALUE,
 NOE.SETTLEMENT_DATE,
 D.EXTERNAL_VALUE,
 NOE.TRADE_DATE,
 NOE.RATE,
 E.EXTERNAL_VALUE,
 F.EXTERNAL_VALUE,
 J.FIRST_NAME||' '||J.LAST_NAME,
 NOE.U_FAR_RATE,
 G.NAME,
 H.NAME,
 C1.DATA,
 C2.DATA,
 NOE.QUANTITY,
 NOE.QUANTITY2,
 NOE.VALUE_DATE,
 NOE.FAR_QUANTITY,
 NOE.FAR_QUANTITY2,
 NOE.FAR_VALUE_DATE,
 NOE.REPORTER,
C3.DATA,
NOE.NEW_ID,
NOE.OLD_ID,
case when NOE.IS_DUMMY = 1 then 'yes' else 'no' end,
C_AGREEMENT.DATA,
  NOE.SPOT_RATE,
  NOE.FORWARD_POINTS,
  NOE.TRADER_MARKUP,
  NOE.FORWARD_MARKUP,
  NOE.FAR_SPOT_RATE,
  NOE.FAR_FORWARD_POINTS,
  NOE.FAR_TRADER_MARKUP,
  NOE.FAR_FORWARD_MARKUP
FROM
FXPB_NOE NOE,
ARCH_DATA_MAPPING D, -- submitter
ARCH_DATA_MAPPING E, -- side a
ARCH_DATA_MAPPING F, -- side  b
A_INSTRUMENT G, -- base currency
A_INSTRUMENT H, -- secondary currency
ARCH_DATA_MAPPING I, --  entering org
A_PERSON J, --  trader (optional)
ARCH_CODE_MEMBER C1, -- contract type
ARCH_CODE_MEMBER C2, -- direction
ARCH_CODE_MEMBER C3, -- trade type
ARCH_CODE_MEMBER C_APPR, -- approval status
ARCH_CODE_MEMBER C_RECON, -- reconstatus
ARCH_CODE_MEMBER C_ALLOC, -- alloc status
ARCH_CODE_MEMBER C_LIFE, -- lifecycle status
ARCH_CODE_MEMBER C_AGREEMENT --  Agreement
WHERE
	NOE.SUBMITTER_PERSON_ID = D.INTERNAL_VALUE
	AND D.MAP_TYPE=4 -- person
	AND D.NAMER_ID=1000000
	AND D.STATUS=1
	AND D.TYPE=0
	-- side a mapping
	AND NOE.SIDE_A_ORG_ID=E.INTERNAL_VALUE
	AND E.MAP_TYPE=3 -- organization
	AND E.NAMER_ID=1000000
	AND E.STATUS=1
	AND E.TYPE=0
	-- side b mapping
	AND NOE.SIDE_B_ORG_ID=F.INTERNAL_VALUE
	AND F.MAP_TYPE=3 -- organization
	AND F.NAMER_ID=1000000
	AND F.STATUS=1
	AND F.TYPE=0
	--  base currency
	AND NOE.BASE_INSTRUMENT_ID=G.ID
	AND G.TYPE = 5006 -- currency
	--  secondary currency
	AND NOE.SECONDARY_INSTRUMENT_ID=H.ID
	AND H.TYPE = 5006 -- currency
	-- entering org mapping
	AND  NOE.ENTERING_ORG_ID=I.INTERNAL_VALUE
	AND I.MAP_TYPE=3 -- organization
	AND I.NAMER_ID=1000000
	AND I.STATUS=1
	AND I.TYPE=0
	-- optional trader
	AND NOE.TRADER_ID = J.ID(+)
	--contract type
	AND C1.CODE_KEY= TO_CHAR(NOE.CONTRACT_TYPE)
	AND C1.GROUP_ID=1000022
	--direction
	AND C2.CODE_KEY=  TO_CHAR(NOE.DIRECTION)
	AND C2.GROUP_ID=1000021
	--trade type
	AND C3.CODE_KEY=  TO_CHAR(NOE.TRADE_TYPE)
	AND C3.GROUP_ID=1000024
	-- approval status
	AND C_APPR.CODE_KEY = TO_CHAR(NOE.APPROVE_STATUS)
	AND C_APPR.GROUP_ID = 1001011
	-- recon status
	AND C_RECON.CODE_KEY = TO_CHAR(NOE.RECON_STATUS)
	AND C_RECON.GROUP_ID = 1001012
	-- alloc status
	AND C_ALLOC.CODE_KEY = TO_CHAR(NOE.ALLOC_STATUS)
	AND C_ALLOC.GROUP_ID = 1001013
	-- life status
	AND C_LIFE.CODE_KEY = TO_CHAR(NOE.LIFE_STATUS)
	AND C_LIFE.GROUP_ID = 1001014
	-- Agreement
	AND C_AGREEMENT.CODE_KEY = TO_CHAR(NOE.AGREEMENT)
	AND C_AGREEMENT.GROUP_ID = 1000032
  -- Filtering
	AND NOE.AGREEMENT <> 2
	-- active or done
	AND ( (LIFE_STATUS = 2 AND trunc(NOE.CREATION_DATE) = trunc(sysdate))
	OR    (LIFE_STATUS = 4 AND trunc(NOE.CREATION_DATE) = trunc(sysdate)) );

CREATE OR REPLACE VIEW V_FXPB_REPORT_OPTION_NOE_DEALS ( ID,
PARTNER_NAME, STATUS, REQUEST_ID, REASON,
TIME, UUID, CLIENT_NOE_ID, BANK_NOE_ID,
TRADE_REF_ID, TRN_TYPE, OPERATION, TRADING_PARTY, SUBMITER,
COUNTER_PARTY, SECONDARY_PARTY, VALUE_DATE, SECONDARY_CCY,
QTY, BASE_CCY, RATE, OPTION_TYPE,
CONTACT_DIRECTION, CONTRACT_TYPE, OPTION_STYLE, TRADE_TYPE,
CLIENT_REF, TRADER, REPORTER, LINKED_TRADE
 ) AS SELECT M.ID
	        ,M.PARTNER_NAME
	        ,CG1.DATA AS STATUS
	        ,M.MUREX_TRADE_ID AS REQUEST_ID
	        ,M.REASON
	        ,M.TIME
	        ,M.UUID
	        ,(CASE WHEN (M.CLIENT_NOE_ID>0) THEN M.CLIENT_NOE_ID ELSE '' END) AS CLIENT_NOE_ID
	        ,(CASE WHEN (M.BANK_NOE_ID>0) THEN M.BANK_NOE_ID ELSE '' END) AS BANK_NOE_ID
	        ,(CASE WHEN (M.TRADE_REF_ID>0) THEN M.TRADE_REF_ID ELSE '' END) AS TRADE_REF_ID
			,M.TRN_TYPE
	        ,M.OPERATION AS OPERATION
	        ,M.TRAIDING_PARTY AS TRADING_PARTY
	        ,M.SUBMITTER_PERSON_ID AS SUBMITER
	        ,M.COUNTER_PARTY AS COUNTER_PARTY
	        ,M.SECONDARY_PARTY AS SECONDARY_PARTY
	        ,M.VALUE_DATE AS VALUE_DATE
	        ,M.SECONDARY_CCY_NAME AS SECONDARY_CCY
	        ,M.QTY AS QTY
	        ,M.BASE_CCY_NAME AS BASE_CCY
	        ,M.RATE AS RATE
	        ,M.OPTION_TYPE AS OPTION_TYPE
	        ,(CASE WHEN (M.BINTERNAL='N') THEN 'BUY' ELSE (CASE WHEN (M.SINTERNAL='N') THEN 'SELL' ELSE '' END) END) AS CONTACT_DIRECTION
	        ,CG3.DATA AS CONTRACT_TYPE
	        ,(CASE WHEN (M.TP_AE='E') THEN 'European' ELSE (CASE WHEN (M.TP_AE='A') THEN 'American' ELSE '' END) END) AS OPTION_STYLE
	        ,CG2.DATA AS TRADE_TYPE
	        ,M.CLIENT_REF AS CLIENT_REF
	        ,M.TP_TRADER AS TRADER
			,'' AS REPORTER
	        ,M.TP_CREATOR AS LINKED_TRADE
FROM JPMC_GENERIC_MUREX_DEALS M
	 ,ARCH_CODE_MEMBER CG1
	 ,ARCH_CODE_MEMBER CG2
	 ,ARCH_CODE_MEMBER CG3
WHERE (CG1.GROUP_ID = 1100038) AND (CG1.CODE_KEY = M.STATUS)
  AND (CG2.GROUP_ID = DECODE(TRN_TYPE,'FXD',1000024,1100026)) AND (CG2.CODE_KEY = M.TRADE_TYPE)
  AND (CG3.GROUP_ID = 1000022) AND (CG3.CODE_KEY = M.CONTRACT_TYPE)
;

CREATE OR REPLACE VIEW V_FXPB_REPORT_OPTION_NOE_FP ( ID,
ALLOC, RECON, APPROVAL, APPR_REASON,
LIFECYCLE, SIDE_A, SIDE_B, OPTION_TYPE,
DIRECTION, EXPIRY_DATE, SETTLEMENT_DATE, VALUE_DATE,
CONTRACT_TYPE, SECONDARY_CCY, QUANTITY, BASE_CCY,
QUANTITY2, STRIKE, STRIKE_QUOTE_MODE, OPTION_STYLE,
PRICE_PAID, PREMIUM_TYPE, PREMIUM_AMOUNT, PREMIUM_CCY,
PREMIUM_DATE, BARRIER_TYPE, BARRIER_LEVEL, LOWER_BARRIER_LEVEL,
UPPER_BARRIER_LEVEL, REBATE_PERCENT_1, REBATE_PERCENT_2, REBATE_QUOTE_MODE,
REBATE_TYPE, PAYOUT_AMOUNT, PAYOUT_CCY, TRADER,
TRADE_DATE, CREATION_DATE, EXTERNAL_REF, TRADE_TYPE,
PORTFOLIO_ID, IS_DUMMY, AGREEMENT, SUBMITTER_PERSON,
ENTERING_ORG, CUT_OFF_ZONE, UNDERLYING_CLIENT_REF, DELIVERY_METHOD,
REPORTER, NEW_NOE, OLD_NOE, OPTION_CONTRACT_TYPE,
EXPIRY_TIME, DATE_TERMINATED, NDF, NDF_FIXING_DATE,
NDF_LINKED_TRADE, TP_ROLE ) AS SELECT  /*+ ordered */
 NOE.ID,
 (C_ALLOC.DATA) ALLOC,
 (C_RECON.DATA) RECON,
 (C_APPR.DATA) APPROVAL,
 (NOE.APPROVE_STATUS_REASON)APPR_REASON,
 (C_LIFE.DATA) LIFECYCLE,
 (E.EXTERNAL_VALUE) SIDE_A,
 (F.EXTERNAL_VALUE) SIDE_B,
 (C_OPTION_TYPE.DATA) OPTION_TYPE,
 (C2.DATA) DIRECTION,
 NOE.EXPIRY_DATE,
 NOE.SETTLEMENT_DATE,
 NOE.VALUE_DATE,
 (C1.DATA) CONTRACT_TYPE,
 (H.NAME) SECONDARY_CCY,
 NOE.QUANTITY,
 (G.NAME) BASE_CCY,
 NOE.QUANTITY2,
 (NOE.RATE) STRIKE,
 (C_STRIKE_Q_MODE.DATA) STRIKE_QUOTE_MODE,
 (C_OPTION_STYLE.DATA) OPTION_STYLE,
 NOE.PRICE_PAID,
 (C_PREMIUM_TYPE.DATA) PREMIUM_TYPE,
 NOE.PREMIUM_AMOUNT,
 (CCY_PREMIUM.NAME) PREMIUM_CCY,
 NOE.PREMIUM_DATE,
(C_BARRIER_TYPE.DATA)BARRIER_TYPE,
 NOE.BARRIER_LEVEL,
 NOE.LOWER_BARRIER_LEVEL,
 NOE.UPPER_BARRIER_LEVEL,
 NOE.REBATE_PERCENT_1,
 NOE.REBATE_PERCENT_2,
 (C_REBATE_QUOTE_MODE.DATA)REBATE_QUOTE_MODE,
 NOE.REBATE_TYPE,
 NOE.PAYOUT_AMOUNT,
'',-- (CCY_PAYOUT.NAME) PAYOUT_CCY,
 (J.FIRST_NAME||' '||J.LAST_NAME) TRADER,
 NOE.TRADE_DATE,
 NOE.CREATION_DATE,
 NOE.EXTERNAL_REF,
 (C3.DATA) TRADE_TYPE,
 NOE.PORTFOLIO_ID,
 (CASE WHEN NOE.IS_DUMMY = 1 THEN 'yes' ELSE 'no' END) IS_DUMMY,
 (C_AGREEMENT.DATA) AGREEMENT,
 (D.EXTERNAL_VALUE) SUBMITTER_PERSON,
 (I.EXTERNAL_VALUE) ENTERING_ORG,
 NOE.CUT_OFF_ZONE,
 NOE.UNDERLYING_CLIENT_REF,
 (C_DELIVERY_METHOD.DATA) DELIVERY_METHOD,
 NOE.REPORTER,
 (NOE.NEW_ID) NEW_NOE,
 (NOE.OLD_ID) OLD_NOE,
 (C_OPTION_C_TYPE.DATA) OPTION_CONTRACT_TYPE,
 NOE.EXPIRY_TIME,
 NOE.DATE_TERMINATED,
 (CASE WHEN NOE.NDF = 1 THEN 'true' ELSE 'false' END) NDF,
 NOE.NDF_FIXING_DATE,
 NOE.NDF_LINKED_TRADE,
 (CASE WHEN TP_ROLE.ROLE = '1000002' THEN 'bank' ELSE 'client' END) TP_ROLE
FROM
FXPB_OPTION_NOE NOE,
ARCH_DATA_MAPPING D, -- submitter
ARCH_DATA_MAPPING E, -- side a
ARCH_DATA_MAPPING F, -- side  b
A_INSTRUMENT G, -- base currency
A_INSTRUMENT H, -- secondary currency
ARCH_DATA_MAPPING I, --  entering org
A_PERSON J, --  trader (optional)
ARCH_CODE_MEMBER C1, -- contract type
ARCH_CODE_MEMBER C2, -- direction
ARCH_CODE_MEMBER C3, -- trade type
ARCH_CODE_MEMBER C_APPR, -- approval status
ARCH_CODE_MEMBER C_RECON, -- reconstatus
ARCH_CODE_MEMBER C_ALLOC, -- alloc status
ARCH_CODE_MEMBER C_LIFE, -- lifecycle status
ARCH_CODE_MEMBER C_AGREEMENT, --  Agreement
ARCH_CODE_MEMBER C_STRIKE_Q_MODE, -- Strike quote mode
--A_INSTRUMENT CCY_PAYOUT,    -- Payout Ccy
A_INSTRUMENT CCY_PREMIUM,  -- Premium Ccy
ARCH_CODE_MEMBER C_PREMIUM_TYPE, -- Premium Type
ARCH_CODE_MEMBER C_OPTION_STYLE, -- Option style
ARCH_CODE_MEMBER C_OPTION_C_TYPE, -- Option contract type
ARCH_CODE_MEMBER C_OPTION_TYPE, -- Option type
ARCH_CODE_MEMBER C_DELIVERY_METHOD, -- Delivery method
ARCH_CODE_MEMBER C_BARRIER_TYPE, -- Barrier Type
ARCH_CODE_MEMBER C_REBATE_QUOTE_MODE, -- rebate quote mode
A_ORGANIZATION TP,
A_OBJECT_ROLE TP_ROLE
WHERE
 NOE.SUBMITTER_PERSON_ID = D.INTERNAL_VALUE
 AND D.MAP_TYPE=4 -- person
 AND D.NAMER_ID=1000000
 AND D.STATUS=1
 AND D.TYPE=0
 -- side a mapping
 AND NOE.SIDE_A_ORG_ID=E.INTERNAL_VALUE
 AND E.MAP_TYPE=3 -- organization
 AND E.NAMER_ID=1000000
 AND E.STATUS=1
 AND E.TYPE=0
 -- side b mapping
 AND NOE.SIDE_B_ORG_ID=F.INTERNAL_VALUE
 AND F.MAP_TYPE=3 -- organization
 AND F.NAMER_ID=1000000
 AND F.STATUS=1
 AND F.TYPE=0
 --  base currency
 AND NOE.BASE_INSTRUMENT_ID=G.ID
 AND G.TYPE = 5006 -- currency
 --  secondary currency
 AND NOE.SECONDARY_INSTRUMENT_ID=H.ID
 AND H.TYPE = 5006 -- currency
 -- entering org mapping
 AND  NOE.ENTERING_ORG_ID=I.INTERNAL_VALUE
 AND I.MAP_TYPE=3 -- organization
 AND I.NAMER_ID=1000000
 AND I.STATUS=1
 AND I.TYPE=0
 -- optional trader
 AND NOE.TRADER_ID = J.ID(+)
 --contract type
  AND C1.CODE_KEY= TO_CHAR(NOE.CONTRACT_TYPE)
  AND C1.GROUP_ID=1100021
  --direction
  AND C2.CODE_KEY=  TO_CHAR(NOE.DIRECTION)
  AND C2.GROUP_ID=1000021
  --trade type
  AND C3.CODE_KEY=  TO_CHAR(NOE.TRADE_TYPE)
  AND C3.GROUP_ID=1100026
  -- approval status
  AND C_APPR.CODE_KEY = TO_CHAR(NOE.APPROVE_STATUS)
  AND C_APPR.GROUP_ID = 1001011
  -- recon status
  AND C_RECON.CODE_KEY = TO_CHAR(NOE.RECON_STATUS)
  AND C_RECON.GROUP_ID = 1001012
  -- alloc status
  AND C_ALLOC.CODE_KEY = TO_CHAR(NOE.ALLOC_STATUS)
  AND C_ALLOC.GROUP_ID = 1001013
  -- life status
  AND C_LIFE.CODE_KEY = TO_CHAR(NOE.LIFE_STATUS)
  AND C_LIFE.GROUP_ID = 1001014
  -- Agreement
  AND C_AGREEMENT.CODE_KEY = TO_CHAR(NOE.AGREEMENT)
  AND C_AGREEMENT.GROUP_ID = 1000032
  -- Strike Quote Mode
  AND C_STRIKE_Q_MODE.CODE_KEY = TO_CHAR(NOE.STRIKE_QUOTE_MODE)
  AND C_STRIKE_Q_MODE.GROUP_ID = 1100024
  -- Premium Ccy
  AND NOE.PREMIUM_CCY = CCY_PREMIUM.ID
  AND CCY_PREMIUM.TYPE = 5006 -- currency
  -- Premium Type
  AND C_PREMIUM_TYPE.CODE_KEY = TO_CHAR(NOE.PREMIUM_TYPE)
  AND C_PREMIUM_TYPE.GROUP_ID = 1100019
  -- Option style
  AND C_OPTION_STYLE.CODE_KEY = TO_CHAR(NOE.OPTION_STYLE)
  AND C_OPTION_STYLE.GROUP_ID = 1100020
  -- Option contract type
  AND C_OPTION_C_TYPE.CODE_KEY = TO_CHAR(NOE.CONTRACT_TYPE)
  AND C_OPTION_C_TYPE.GROUP_ID = 1100021
  -- Option type
  AND C_OPTION_TYPE.CODE_KEY = TO_CHAR(NOE.OPTION_TYPE)
  AND C_OPTION_TYPE.GROUP_ID = 1100022
  -- Delivery Method
  AND C_DELIVERY_METHOD.CODE_KEY = TO_CHAR(NOE.DELIVERY_METHOD)
  AND C_DELIVERY_METHOD.GROUP_ID = 1100023
  -- Payout Ccy
--  AND NOE.PAYOUT_CURRENCY = CCY_PAYOUT.ID
--  AND CCY_PAYOUT.TYPE = 5006 -- currency
  -- TP Role
  AND TP.ID = NOE.SIDE_A_ORG_ID
  AND TP.ID = TP_ROLE.OBJECT_ID
  AND TP_ROLE.OBJECT_TYPE = 1000
  --Barrier Type
  AND C_BARRIER_TYPE.CODE_KEY = TO_CHAR(NOE.BARRIER_TYPE)
  AND C_BARRIER_TYPE.GROUP_ID = 1100045
  --rebate quote mode
  AND C_REBATE_QUOTE_MODE.CODE_KEY = TO_CHAR(NOE.REBATE_QUOTE_MODE)
  AND C_REBATE_QUOTE_MODE.GROUP_ID = 1100046
  -- Filtering
	AND NOE.AGREEMENT <> 2
	-- active or done
	AND ( (LIFE_STATUS = 2 AND trunc(NOE.CREATION_DATE) = trunc(sysdate))
	OR    (LIFE_STATUS = 4 AND trunc(NOE.CREATION_DATE) = trunc(sysdate)) );

--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
-- build 1.7.14.5.2
delete ARCH_OBJ_PROP_DEF where id=238;
INSERT INTO ARCH_OBJ_PROP_DEF ( ID, NAME, VALIDATOR, REQUIRED, GROUP_ID, VALUE_TYPE, VALUES_CODE_GROUP, DEFAULT_VALUE, VISIBILITY_MODE, ORDER_SEQ ) 
	VALUES ( 238, 'Mq Server Port', 'long', 1, 108, 'long', NULL, NULL, 0, NULL); 
--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
--********************************************************************************************************--
--**			F I X E D   F O O T E R	 starts here 						**--
--********************************************************************************************************--

---- others.sql (start)
-- Override Origin System Defs for Linear/Option Back-Office Systems
DELETE FROM ARCH_CODE_MEMBER WHERE group_id = 1001000 AND code_key IN ('2', '3');
INSERT INTO ARCH_CODE_MEMBER ( GROUP_ID, CODE_KEY, DATA, NAME, CODE_COMMENT, STATUS ) 
	VALUES ( 1001000, '2', 'IRFE', 'IRFE', 'Origin System IRFE', 1); 
INSERT INTO ARCH_CODE_MEMBER ( GROUP_ID, CODE_KEY, DATA, NAME, CODE_COMMENT, STATUS ) 
	VALUES ( 1001000, '3', 'Murex', 'Murex', 'Origin System Murex', 1);

-- Override MAIL connector def for JP
delete ARCH_CONN_CHECKER_DATA where PROTOCOL_NAME='MAIL';
INSERT INTO ARCH_CONN_CHECKER_DATA ( PROTOCOL_NAME, IMPLEMENTATION_CLASS,TO_CHECK ) 
	VALUES ( 'MAIL', 'com.traiana.sol.jpmc.core.engine.connector.mail.WEduMailData', 1); 
----others.sql (end)

exec PROP_UPDATE_PROPERTIES; 
exec ALTER_CONSTRAINTS('enable');
exec ANALYZE_ALL_TABLES;

---- Mark current version 
INSERT INTO ARCH_VERSION ( TIMESTAMP, VERSION, DESCRIPTION, LOGFILE, SOLUTION_VERSION )
  	VALUES (sysdate , '3.0.3.1', 'JPMC 1.7 STF 14.5 ', '/Arch2.0/installationLog/databaseInstall.log', '1.7.14.5');

commit;

--spool off
